Ident { ident: "u8", span: #0 bytes(31894..31896) }
[Variant { attrs: [], ident: Ident { ident: "Normal", span: #0 bytes(31964..31970) }, fields: Unit, discriminant: Some((Eq, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }))) }, Comma, Variant { attrs: [], ident: Ident { ident: "Reset", span: #0 bytes(31980..31985) }, fields: Unit, discriminant: Some((Eq, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) }))) }, Comma, Variant { attrs: [], ident: Ident { ident: "Teleport", span: #0 bytes(31995..32003) }, fields: Unit, discriminant: Some((Eq, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 2 }) }))) }, Comma, Variant { attrs: [], ident: Ident { ident: "Rotation", span: #0 bytes(32013..32021) }, fields: Unit, discriminant: Some((Eq, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 3 }) }))) }, Comma]
#![feature(prelude_import)]
#![feature(min_const_generics)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
pub mod errors {
    use std::fmt::Display;
    pub struct MCPEPacketDataError {
        path: Vec<String>,
        field_name: String,
        error_type: String,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for MCPEPacketDataError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                MCPEPacketDataError {
                    path: ref __self_0_0,
                    field_name: ref __self_0_1,
                    error_type: ref __self_0_2,
                } => {
                    let mut debug_trait_builder = f.debug_struct("MCPEPacketDataError");
                    let _ = debug_trait_builder.field("path", &&(*__self_0_0));
                    let _ = debug_trait_builder.field("field_name", &&(*__self_0_1));
                    let _ = debug_trait_builder.field("error_type", &&(*__self_0_2));
                    debug_trait_builder.finish()
                }
            }
        }
    }
    impl MCPEPacketDataError {
        pub fn new(field_name: impl Into<String>, error_type: impl Into<String>) -> Self {
            Self {
                path: ::alloc::vec::Vec::new(),
                field_name: field_name.into(),
                error_type: error_type.into(),
            }
        }
        pub fn map(mut self, field: impl Into<String>) -> Self {
            self.path.push(field.into());
            self
        }
    }
    impl Display for MCPEPacketDataError {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.write_fmt(::core::fmt::Arguments::new_v1(
                &["", ".", " : "],
                &match (
                    &self
                        .path
                        .iter()
                        .rev()
                        .map(|x| x.as_str())
                        .collect::<Vec<&str>>()
                        .join("."),
                    &self.field_name,
                    &self.error_type,
                ) {
                    (arg0, arg1, arg2) => [
                        ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Display::fmt),
                        ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                        ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                    ],
                },
            ))
        }
    }
}
pub mod objects {
    mod takeall {
        use crate::prelude::{MCPEPacketData, MCPEPacketDataError};
        pub struct TakeAll(pub Vec<u8>);
        impl MCPEPacketData for TakeAll {
            fn decode(
                reader: &mut impl crate::prelude::Reader,
            ) -> Result<Self, MCPEPacketDataError> {
                Ok(Self(reader.read_to_end()))
            }
            fn encode(
                &self,
                writer: &mut impl crate::prelude::Writer,
            ) -> Result<(), MCPEPacketDataError> {
                writer
                    .write_slice(&self.0)
                    .map_err(|x| x.map("take_all_value"))?;
                Ok(())
            }
        }
    }
    pub use takeall::*;
    mod var_int {
        use crate::prelude::{BitInformation, Indexable, MCPEPacketData, MCPEPacketDataError, ZigZag};
        pub struct UnsignedVarInt(pub u32);
        #[automatically_derived]
        #[allow(unused_qualifications)]
        impl ::core::fmt::Debug for UnsignedVarInt {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    UnsignedVarInt(ref __self_0_0) => {
                        let mut debug_trait_builder = f.debug_tuple("UnsignedVarInt");
                        let _ = debug_trait_builder.field(&&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        impl MCPEPacketData for UnsignedVarInt {
            fn decode(
                reader: &mut impl crate::prelude::Reader,
            ) -> Result<Self, MCPEPacketDataError> {
                let mut shift_amount: u32 = 0;
                let mut decoded_value: u32 = 0;
                loop {
                    let next_byte = reader.next().map_err(|x| x.map("unsigned_var_int"))?;
                    decoded_value |= ((next_byte & 0b01111111) as u32) << shift_amount;
                    if next_byte.has_most_signifigant_bit() {
                        shift_amount += 7;
                    } else {
                        return Ok(Self(decoded_value));
                    }
                }
            }
            fn encode(
                &self,
                writer: &mut impl crate::prelude::Writer,
            ) -> Result<(), MCPEPacketDataError> {
                let mut value: u32 = self.0;
                if value == 0 {
                    writer.write(0).map_err(|x| x.map("unsigned_var_int"))?;
                } else {
                    while value >= 0b10000000 {
                        writer.write(((value & 0b01111111) as u8) | 0b10000000)?;
                        value = value >> 7;
                    }
                    writer.write((value & 0b01111111) as u8)?;
                }
                Ok(())
            }
        }
        pub struct UnsignedVarLong(pub u64);
        #[automatically_derived]
        #[allow(unused_qualifications)]
        impl ::core::fmt::Debug for UnsignedVarLong {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    UnsignedVarLong(ref __self_0_0) => {
                        let mut debug_trait_builder = f.debug_tuple("UnsignedVarLong");
                        let _ = debug_trait_builder.field(&&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        impl MCPEPacketData for UnsignedVarLong {
            fn decode(
                reader: &mut impl crate::prelude::Reader,
            ) -> Result<Self, MCPEPacketDataError> {
                let mut shift_amount: u64 = 0;
                let mut decoded_value: u64 = 0;
                loop {
                    let next_byte = reader.next().map_err(|x| x.map("unsigned_var_long"))?;
                    decoded_value |= ((next_byte & 0b01111111) as u64) << shift_amount;
                    if next_byte.has_most_signifigant_bit() {
                        shift_amount += 7;
                    } else {
                        return Ok(Self(decoded_value));
                    }
                }
            }
            fn encode(
                &self,
                writer: &mut impl crate::prelude::Writer,
            ) -> Result<(), MCPEPacketDataError> {
                let mut value: u64 = self.0;
                if value == 0 {
                    writer.write(0).map_err(|x| x.map("unsigned_var_long"))?;
                } else {
                    while value >= 0b10000000 {
                        writer.write(((value & 0b01111111) as u8) | 0b10000000)?;
                        value = value >> 7;
                    }
                    writer.write((value & 0b01111111) as u8)?;
                }
                Ok(())
            }
        }
        pub struct VarLong(pub i64);
        #[automatically_derived]
        #[allow(unused_qualifications)]
        impl ::core::fmt::Debug for VarLong {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    VarLong(ref __self_0_0) => {
                        let mut debug_trait_builder = f.debug_tuple("VarLong");
                        let _ = debug_trait_builder.field(&&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        impl MCPEPacketData for VarLong {
            fn decode(
                reader: &mut impl crate::prelude::Reader,
            ) -> Result<Self, MCPEPacketDataError> {
                Ok(Self(
                    UnsignedVarLong::decode(reader)
                        .map_err(|x| x.map("var_long"))?
                        .0
                        .zigzag(),
                ))
            }
            fn encode(
                &self,
                writer: &mut impl crate::prelude::Writer,
            ) -> Result<(), MCPEPacketDataError> {
                UnsignedVarLong(self.0.zigzag())
                    .encode(writer)
                    .map_err(|x| x.map("var_long"))
            }
        }
        pub struct VarInt(pub i32);
        #[automatically_derived]
        #[allow(unused_qualifications)]
        impl ::core::fmt::Debug for VarInt {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    VarInt(ref __self_0_0) => {
                        let mut debug_trait_builder = f.debug_tuple("VarInt");
                        let _ = debug_trait_builder.field(&&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        impl MCPEPacketData for VarInt {
            fn decode(
                reader: &mut impl crate::prelude::Reader,
            ) -> Result<Self, MCPEPacketDataError> {
                Ok(Self(
                    UnsignedVarInt::decode(reader)
                        .map_err(|x| x.map("var_int"))?
                        .0
                        .zigzag(),
                ))
            }
            fn encode(
                &self,
                writer: &mut impl crate::prelude::Writer,
            ) -> Result<(), MCPEPacketDataError> {
                UnsignedVarInt(self.0.zigzag())
                    .encode(writer)
                    .map_err(|x| x.map("var_int"))
            }
        }
        impl Indexable for VarInt {
            fn as_usize(&self) -> usize {
                self.0 as _
            }
            fn from_usize(u: usize) -> Self {
                Self(u as _)
            }
        }
        impl Indexable for UnsignedVarInt {
            fn as_usize(&self) -> usize {
                self.0 as _
            }
            fn from_usize(u: usize) -> Self {
                Self(u as _)
            }
        }
    }
    pub use var_int::*;
    mod utils {
        mod bit_utils {
            pub trait BitInformation {
                /// Gets the number of bits contained in this type
                fn number_of_bits(&self) -> usize;
                /// Checks to see if bit X is set
                fn has_x_bit(&self, position: usize) -> bool;
                /// Checks to see if the requested bit position is in bounds
                fn is_bit_in_bounds(&self, position: usize) -> bool {
                    position <= self.number_of_bits()
                }
                /// Checks to see if the most signifigant bit is set
                fn has_most_signifigant_bit(&self) -> bool {
                    self.has_x_bit(self.number_of_bits() - 1)
                }
            }
            impl BitInformation for u8 {
                /// Gets the number of bits contained in this type
                fn number_of_bits(&self) -> usize {
                    8
                }
                fn has_x_bit(&self, position: usize) -> bool {
                    if self.is_bit_in_bounds(position) {
                        return (self & (0b00000001 << position)) != 0;
                    } else {
                        return false;
                    }
                }
            }
            impl BitInformation for i8 {
                /// Gets the number of bits contained in this type
                fn number_of_bits(&self) -> usize {
                    8
                }
                fn has_x_bit(&self, position: usize) -> bool {
                    if self.is_bit_in_bounds(position) {
                        return (self & (0b00000001 << position)) != 0;
                    } else {
                        return false;
                    }
                }
            }
            impl BitInformation for u16 {
                /// Gets the number of bits contained in this type
                fn number_of_bits(&self) -> usize {
                    16
                }
                fn has_x_bit(&self, position: usize) -> bool {
                    if self.is_bit_in_bounds(position) {
                        return (self & (0b0000000000000001 << position)) != 0;
                    } else {
                        return false;
                    }
                }
            }
            impl BitInformation for i16 {
                /// Gets the number of bits contained in this type
                fn number_of_bits(&self) -> usize {
                    16
                }
                fn has_x_bit(&self, position: usize) -> bool {
                    if self.is_bit_in_bounds(position) {
                        return (self & (0b0000000000000001 << position)) != 0;
                    } else {
                        return false;
                    }
                }
            }
            impl BitInformation for u32 {
                /// Gets the number of bits contained in this type
                fn number_of_bits(&self) -> usize {
                    32
                }
                fn has_x_bit(&self, position: usize) -> bool {
                    if self.is_bit_in_bounds(position) {
                        return (self & (0b00000000000000000000000000000001 << position)) != 0;
                    } else {
                        return false;
                    }
                }
            }
            impl BitInformation for i32 {
                /// Gets the number of bits contained in this type
                fn number_of_bits(&self) -> usize {
                    32
                }
                fn has_x_bit(&self, position: usize) -> bool {
                    if self.is_bit_in_bounds(position) {
                        return (self & (0b00000000000000000000000000000001 << position)) != 0;
                    } else {
                        return false;
                    }
                }
            }
            impl BitInformation for u64 {
                /// Gets the number of bits contained in this type
                fn number_of_bits(&self) -> usize {
                    64
                }
                fn has_x_bit(&self, position: usize) -> bool {
                    if self.is_bit_in_bounds(position) {
                        return (self
                            & (0b0000000000000000000000000000000000000000000000000000000000000001
                                << position))
                            != 0;
                    } else {
                        return false;
                    }
                }
            }
            impl BitInformation for i64 {
                /// Gets the number of bits contained in this type
                fn number_of_bits(&self) -> usize {
                    64
                }
                fn has_x_bit(&self, position: usize) -> bool {
                    if self.is_bit_in_bounds(position) {
                        return (self
                            & (0b0000000000000000000000000000000000000000000000000000000000000001
                                << position))
                            != 0;
                    } else {
                        return false;
                    }
                }
            }
            impl BitInformation for usize {
                /// Gets the number of bits contained in this type
                fn number_of_bits(&self) -> usize {
                    (self.count_ones() + self.count_zeros()) as usize
                }
                fn has_x_bit(&self, position: usize) -> bool {
                    if self.is_bit_in_bounds(position) {
                        return (self
                            & (0b0000000000000000000000000000000000000000000000000000000000000001
                                << position))
                            != 0;
                    } else {
                        return false;
                    }
                }
            }
            impl BitInformation for isize {
                /// Gets the number of bits contained in this type
                fn number_of_bits(&self) -> usize {
                    (self.count_ones() + self.count_zeros()) as usize
                }
                fn has_x_bit(&self, position: usize) -> bool {
                    if self.is_bit_in_bounds(position) {
                        return (self
                            & (0b0000000000000000000000000000000000000000000000000000000000000001
                                << position))
                            != 0;
                    } else {
                        return false;
                    }
                }
            }
        }
        pub use bit_utils::*;
        mod zig_zag {
            //! Zig-zag encoding of integral values
            /// A trait for enabling zig-zag encoding of various values
            pub trait ZigZag<T> {
                /// Encodes this ZigZag-enabled type into the type specified by implementation
                fn zigzag(&self) -> T;
            }
            impl ZigZag<u8> for i8 {
                /// Encodes this i8 as a zigzagged u8
                fn zigzag(&self) -> u8 {
                    ((self << 1) ^ (self >> 7)) as u8
                }
            }
            impl ZigZag<i8> for u8 {
                /// Encodes this u8 as a zigzagged i8
                fn zigzag(&self) -> i8 {
                    ((self >> 1) as i8) ^ (-((self & 1) as i8))
                }
            }
            impl ZigZag<u16> for i16 {
                /// Encodes this i16 as a zigzagged u16
                fn zigzag(&self) -> u16 {
                    ((self << 1) ^ (self >> 15)) as u16
                }
            }
            impl ZigZag<i16> for u16 {
                /// Encodes this u16 as a zigzagged i16
                fn zigzag(&self) -> i16 {
                    ((self >> 1) as i16) ^ (-((self & 1) as i16))
                }
            }
            impl ZigZag<u32> for i32 {
                /// Encodes this i32 as a zigzagged u32
                fn zigzag(&self) -> u32 {
                    ((self << 1) ^ (self >> 31)) as u32
                }
            }
            impl ZigZag<i32> for u32 {
                /// Encodes this u32 as a zigzagged i32
                fn zigzag(&self) -> i32 {
                    ((self >> 1) as i32) ^ (-((self & 1) as i32))
                }
            }
            impl ZigZag<u64> for i64 {
                /// Encodes this i64 as a zigzagged u64
                fn zigzag(&self) -> u64 {
                    ((self << 1) ^ (self >> 63)) as u64
                }
            }
            impl ZigZag<i64> for u64 {
                /// Encodes this u64 as a zigzagged i64
                fn zigzag(&self) -> i64 {
                    ((self >> 1) as i64) ^ (-((self & 1) as i64))
                }
            }
        }
        pub use zig_zag::*;
    }
    pub use utils::*;
    mod traits {
        mod vec_indexed {
            use std::{
                marker::PhantomData,
                ops::{Deref, DerefMut},
            };
            use crate::prelude::{MCPEPacketData, MCPEPacketDataError, Reader, Writer};
            pub trait Indexable {
                fn as_usize(&self) -> usize;
                fn from_usize(u: usize) -> Self;
            }
            pub struct VecIndexed<T: MCPEPacketData, E: Indexable + MCPEPacketData>(
                pub Vec<T>,
                PhantomData<E>,
            );
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl<
                    T: ::core::fmt::Debug + MCPEPacketData,
                    E: ::core::fmt::Debug + Indexable + MCPEPacketData,
                > ::core::fmt::Debug for VecIndexed<T, E>
            {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        VecIndexed(ref __self_0_0, ref __self_0_1) => {
                            let mut debug_trait_builder = f.debug_tuple("VecIndexed");
                            let _ = debug_trait_builder.field(&&(*__self_0_0));
                            let _ = debug_trait_builder.field(&&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl<T: MCPEPacketData, E: Indexable + MCPEPacketData> From<Vec<T>> for VecIndexed<T, E> {
                fn from(e: Vec<T>) -> Self {
                    VecIndexed(e, PhantomData)
                }
            }
            impl<T: MCPEPacketData, E: Indexable + MCPEPacketData> Into<Vec<T>> for VecIndexed<T, E> {
                fn into(self) -> Vec<T> {
                    self.0
                }
            }
            impl<T: MCPEPacketData, E: Indexable + MCPEPacketData> AsRef<Vec<T>> for VecIndexed<T, E> {
                fn as_ref(&self) -> &Vec<T> {
                    &self.0
                }
            }
            impl<T: MCPEPacketData, E: Indexable + MCPEPacketData> AsMut<Vec<T>> for VecIndexed<T, E> {
                fn as_mut(&mut self) -> &mut Vec<T> {
                    &mut self.0
                }
            }
            impl<T: MCPEPacketData, E: Indexable + MCPEPacketData> Deref for VecIndexed<T, E> {
                type Target = Vec<T>;
                fn deref(&self) -> &Self::Target {
                    self.as_ref()
                }
            }
            impl<T: MCPEPacketData, E: Indexable + MCPEPacketData> DerefMut for VecIndexed<T, E> {
                fn deref_mut(&mut self) -> &mut Self::Target {
                    self.as_mut()
                }
            }
            impl<T: MCPEPacketData, E: Indexable + MCPEPacketData> MCPEPacketData for VecIndexed<T, E> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    let size: usize = E::decode(reader)
                        .map_err(|x| x.map("vec_indexed_index"))?
                        .as_usize();
                    Ok(Self(
                        (0..size)
                            .map(|_| T::decode(reader))
                            .collect::<Result<_, _>>()
                            .map_err(|x| x.map("vec_indexed_value"))?,
                        PhantomData,
                    ))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    (E::from_usize(self.0.len()))
                        .encode(writer)
                        .map_err(|x| x.map("vec_indexed_index"))?;
                    for i in &self.0 {
                        i.encode(writer).map_err(|x| x.map("vec_indexed_value"))?;
                    }
                    Ok(())
                }
            }
        }
        pub use vec_indexed::*;
        mod arrays {
            use std::convert::TryInto;
            use crate::prelude::{
                MCPEPacketData, MCPEPacketDataError, Reader, UnsignedVarInt, VecIndexed, Writer,
            };
            pub type ByteArray = VecIndexed<u8, UnsignedVarInt>;
            impl<T: MCPEPacketData, const N: usize> MCPEPacketData for [T; N] {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    (0..N)
                        .map(|_| T::decode(reader))
                        .collect::<Result<Vec<_>, _>>()
                        .map_err(|x| x.map("const_array_value"))?
                        .try_into()
                        .map_err(|_| {
                            MCPEPacketDataError::new(
                                "const_array_value",
                                "Invalid const_array_value length",
                            )
                        })
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    for i in self {
                        i.encode(writer).map_err(|x| x.map("const_array_value"))?;
                    }
                    Ok(())
                }
            }
            pub struct ByteArrayEncapsulated<T>(pub T);
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl<T: ::core::fmt::Debug> ::core::fmt::Debug for ByteArrayEncapsulated<T> {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        ByteArrayEncapsulated(ref __self_0_0) => {
                            let mut debug_trait_builder = f.debug_tuple("ByteArrayEncapsulated");
                            let _ = debug_trait_builder.field(&&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl<T: MCPEPacketData> MCPEPacketData for ByteArrayEncapsulated<T> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(ByteArrayEncapsulated(
                        T::decode(&mut ByteArray::decode(reader)?.0.iter())
                            .map_err(|x| x.map("byte_array_encapsulated_value"))?,
                    ))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    let mut buffer = Vec::new();
                    self.0
                        .encode(&mut buffer)
                        .map_err(|x| x.map("byte_array_encapsulated_buffer"))?;
                    ByteArray::from(buffer)
                        .encode(writer)
                        .map_err(|x| x.map("byte_array_encapsulated_value"))
                }
            }
            pub struct ReadToEndVec<T: MCPEPacketData>(pub Vec<T>);
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl<T: ::core::fmt::Debug + MCPEPacketData> ::core::fmt::Debug for ReadToEndVec<T> {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        ReadToEndVec(ref __self_0_0) => {
                            let mut debug_trait_builder = f.debug_tuple("ReadToEndVec");
                            let _ = debug_trait_builder.field(&&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            pub struct StaticData<'a, T: MCPEPacketData>(pub &'a [T]);
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl<'a, T: ::core::fmt::Debug + MCPEPacketData> ::core::fmt::Debug for StaticData<'a, T> {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        StaticData(ref __self_0_0) => {
                            let mut debug_trait_builder = f.debug_tuple("StaticData");
                            let _ = debug_trait_builder.field(&&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl<'a, T: ::core::clone::Clone + MCPEPacketData> ::core::clone::Clone for StaticData<'a, T> {
                #[inline]
                fn clone(&self) -> StaticData<'a, T> {
                    match *self {
                        StaticData(ref __self_0_0) => {
                            StaticData(::core::clone::Clone::clone(&(*__self_0_0)))
                        }
                    }
                }
            }
            impl<T: MCPEPacketData> MCPEPacketData for StaticData<'_, T> {
                fn decode(_: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    ::core::panicking::panic("not yet implemented")
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    for i in self.0 {
                        i.encode(writer).map_err(|x| x.map("static_data"))?;
                    }
                    Ok(())
                }
            }
            impl<T: MCPEPacketData> MCPEPacketData for ReadToEndVec<T> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    let mut out = Vec::new();
                    while let Ok(e) = T::decode(reader) {
                        out.push(e);
                    }
                    Ok(Self(out))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    for i in &self.0 {
                        i.encode(writer).map_err(|x| x.map("read_to_end_value"))?;
                    }
                    Ok(())
                }
            }
        }
        pub use arrays::*;
        mod little_endian {
            use crate::prelude::Indexable;
            pub struct Le<T>(pub T);
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl<T: ::core::fmt::Debug> ::core::fmt::Debug for Le<T> {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        Le(ref __self_0_0) => {
                            let mut debug_trait_builder = f.debug_tuple("Le");
                            let _ = debug_trait_builder.field(&&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl<T: Clone> Clone for Le<T> {
                fn clone(&self) -> Self {
                    Le(self.0.clone())
                }
            }
            impl<T: Indexable> Indexable for Le<T> {
                fn as_usize(&self) -> usize {
                    self.0.as_usize()
                }
                fn from_usize(u: usize) -> Self {
                    Self(T::from_usize(u))
                }
            }
        }
        pub use little_endian::*;
        mod std_types {
            use crate::prelude::{Indexable, Le, MCPEPacketData, MCPEPacketDataError, Reader, Writer};
            impl MCPEPacketData for u8 {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Self::from_be_bytes(reader.next_array()?))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.to_be_bytes())
                }
            }
            impl MCPEPacketData for Le<u8> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Le(<u8>::from_le_bytes(reader.next_array()?)))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.0.to_le_bytes())
                }
            }
            impl Indexable for u8 {
                fn as_usize(&self) -> usize {
                    *self as usize
                }
                fn from_usize(u: usize) -> Self {
                    u as Self
                }
            }
            impl MCPEPacketData for i8 {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Self::from_be_bytes(reader.next_array()?))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.to_be_bytes())
                }
            }
            impl MCPEPacketData for Le<i8> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Le(<i8>::from_le_bytes(reader.next_array()?)))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.0.to_le_bytes())
                }
            }
            impl Indexable for i8 {
                fn as_usize(&self) -> usize {
                    *self as usize
                }
                fn from_usize(u: usize) -> Self {
                    u as Self
                }
            }
            impl MCPEPacketData for u16 {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Self::from_be_bytes(reader.next_array()?))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.to_be_bytes())
                }
            }
            impl MCPEPacketData for Le<u16> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Le(<u16>::from_le_bytes(reader.next_array()?)))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.0.to_le_bytes())
                }
            }
            impl Indexable for u16 {
                fn as_usize(&self) -> usize {
                    *self as usize
                }
                fn from_usize(u: usize) -> Self {
                    u as Self
                }
            }
            impl MCPEPacketData for i16 {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Self::from_be_bytes(reader.next_array()?))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.to_be_bytes())
                }
            }
            impl MCPEPacketData for Le<i16> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Le(<i16>::from_le_bytes(reader.next_array()?)))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.0.to_le_bytes())
                }
            }
            impl Indexable for i16 {
                fn as_usize(&self) -> usize {
                    *self as usize
                }
                fn from_usize(u: usize) -> Self {
                    u as Self
                }
            }
            impl MCPEPacketData for u32 {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Self::from_be_bytes(reader.next_array()?))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.to_be_bytes())
                }
            }
            impl MCPEPacketData for Le<u32> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Le(<u32>::from_le_bytes(reader.next_array()?)))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.0.to_le_bytes())
                }
            }
            impl Indexable for u32 {
                fn as_usize(&self) -> usize {
                    *self as usize
                }
                fn from_usize(u: usize) -> Self {
                    u as Self
                }
            }
            impl MCPEPacketData for i32 {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Self::from_be_bytes(reader.next_array()?))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.to_be_bytes())
                }
            }
            impl MCPEPacketData for Le<i32> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Le(<i32>::from_le_bytes(reader.next_array()?)))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.0.to_le_bytes())
                }
            }
            impl Indexable for i32 {
                fn as_usize(&self) -> usize {
                    *self as usize
                }
                fn from_usize(u: usize) -> Self {
                    u as Self
                }
            }
            impl MCPEPacketData for u64 {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Self::from_be_bytes(reader.next_array()?))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.to_be_bytes())
                }
            }
            impl MCPEPacketData for Le<u64> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Le(<u64>::from_le_bytes(reader.next_array()?)))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.0.to_le_bytes())
                }
            }
            impl Indexable for u64 {
                fn as_usize(&self) -> usize {
                    *self as usize
                }
                fn from_usize(u: usize) -> Self {
                    u as Self
                }
            }
            impl MCPEPacketData for u128 {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Self::from_be_bytes(reader.next_array()?))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.to_be_bytes())
                }
            }
            impl MCPEPacketData for Le<u128> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Le(<u128>::from_le_bytes(reader.next_array()?)))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.0.to_le_bytes())
                }
            }
            impl Indexable for u128 {
                fn as_usize(&self) -> usize {
                    *self as usize
                }
                fn from_usize(u: usize) -> Self {
                    u as Self
                }
            }
            impl MCPEPacketData for i64 {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Self::from_be_bytes(reader.next_array()?))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.to_be_bytes())
                }
            }
            impl MCPEPacketData for Le<i64> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Le(<i64>::from_le_bytes(reader.next_array()?)))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.0.to_le_bytes())
                }
            }
            impl Indexable for i64 {
                fn as_usize(&self) -> usize {
                    *self as usize
                }
                fn from_usize(u: usize) -> Self {
                    u as Self
                }
            }
            impl MCPEPacketData for f32 {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Self::from_be_bytes(reader.next_array()?))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.to_be_bytes())
                }
            }
            impl MCPEPacketData for Le<f32> {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(Le(<f32>::from_le_bytes(reader.next_array()?)))
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write_slice(&self.0.to_le_bytes())
                }
            }
            impl Indexable for f32 {
                fn as_usize(&self) -> usize {
                    *self as usize
                }
                fn from_usize(u: usize) -> Self {
                    u as Self
                }
            }
            impl MCPEPacketData for bool {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    Ok(reader.next()? == 1)
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    writer.write(if *self { 1 } else { 0 })
                }
            }
        }
        pub use std_types::*;
        mod string {
            use crate::prelude::{MCPEPacketData, MCPEPacketDataError, Reader, UnsignedVarInt, Writer};
            impl MCPEPacketData for String {
                fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    let length = u32::from_le_bytes(
                        <[u8; 4]>::decode(reader).map_err(|x| x.map("string_index"))?,
                    ) as usize;
                    let binary = reader.read(length).map_err(|x| x.map("string_value"))?;
                    String::from_utf8(binary).map_err(|_| {
                        MCPEPacketDataError::new("string_value", "Invalid UTF8 sequence")
                    })
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    UnsignedVarInt(self.len() as u32)
                        .encode(writer)
                        .map_err(|x| x.map("string_index"))?;
                    writer
                        .write_slice(self.as_bytes())
                        .map_err(|x| x.map("string_value"))
                }
            }
            impl MCPEPacketData for &'_ str {
                fn decode(_: &mut impl Reader) -> Result<Self, MCPEPacketDataError> {
                    ::core::panicking::panic("not yet implemented")
                }
                fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError> {
                    UnsignedVarInt(self.len() as u32).encode(writer)?;
                    writer.write_slice(self.as_bytes())
                }
            }
        }
        pub use string::*;
        mod maybe_owned {
            pub enum MaybeOwned<'a, T> {
                Owned(T),
                Borrowed(&'a T),
            }
            impl<T> AsRef<T> for MaybeOwned<'_, T> {
                fn as_ref(&self) -> &T {
                    match self {
                        MaybeOwned::Owned(e) => &e,
                        MaybeOwned::Borrowed(e) => e,
                    }
                }
            }
        }
        pub use maybe_owned::*;
        mod options {
            use crate::prelude::{MCPEPacketData, MCPEPacketDataError};
            impl<T: MCPEPacketData> MCPEPacketData for Option<T> {
                fn decode(
                    reader: &mut impl crate::prelude::Reader,
                ) -> Result<Self, MCPEPacketDataError> {
                    if reader.next().map_err(|x| x.map("option_discriminant"))? == 1 {
                        Ok(Some(T::decode(reader).map_err(|x| x.map("option_value"))?))
                    } else {
                        Ok(None)
                    }
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::prelude::Writer,
                ) -> Result<(), MCPEPacketDataError> {
                    match self {
                        Some(e) => {
                            writer.write(1).map_err(|x| x.map("option_discriminant"))?;
                            e.encode(writer).map_err(|x| x.map("option_value"))
                        }
                        None => writer.write(0).map_err(|x| x.map("option_discriminant")),
                    }
                }
            }
        }
        pub use options::*;
    }
    pub use traits::*;
}
pub mod packets {
    mod client {
        mod login {
            use packet_derive::packet;
            use crate::prelude::{ByteArrayEncapsulated, MCPEPacketData, MCPEPacketDataError};
            pub struct LoginPacket {
                pub protocol_version: i32,
                pub display_name: String,
                pub identity: String,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for LoginPacket {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        LoginPacket {
                            protocol_version: ref __self_0_0,
                            display_name: ref __self_0_1,
                            identity: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("LoginPacket");
                            let _ = debug_trait_builder.field("protocol_version", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("display_name", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("identity", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacket for LoginPacket {
                const PACKET_ID: u8 = 1u8;
            }
            struct TokenChain {
                chain: Vec<String>,
            }
            #[doc(hidden)]
            #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
            const _: () = {
                #[allow(rust_2018_idioms, clippy::useless_attribute)]
                extern crate serde as _serde;
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for TokenChain {
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __ignore,
                        }
                        struct __FieldVisitor;
                        impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                            type Value = __Field;
                            fn expecting(
                                &self,
                                __formatter: &mut _serde::__private::Formatter,
                            ) -> _serde::__private::fmt::Result {
                                _serde::__private::Formatter::write_str(
                                    __formatter,
                                    "field identifier",
                                )
                            }
                            fn visit_u64<__E>(
                                self,
                                __value: u64,
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    0u64 => _serde::__private::Ok(__Field::__field0),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                            fn visit_str<__E>(
                                self,
                                __value: &str,
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    "chain" => _serde::__private::Ok(__Field::__field0),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                            fn visit_bytes<__E>(
                                self,
                                __value: &[u8],
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    b"chain" => _serde::__private::Ok(__Field::__field0),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                        }
                        impl<'de> _serde::Deserialize<'de> for __Field {
                            #[inline]
                            fn deserialize<__D>(
                                __deserializer: __D,
                            ) -> _serde::__private::Result<Self, __D::Error>
                            where
                                __D: _serde::Deserializer<'de>,
                            {
                                _serde::Deserializer::deserialize_identifier(
                                    __deserializer,
                                    __FieldVisitor,
                                )
                            }
                        }
                        struct __Visitor<'de> {
                            marker: _serde::__private::PhantomData<TokenChain>,
                            lifetime: _serde::__private::PhantomData<&'de ()>,
                        }
                        impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                            type Value = TokenChain;
                            fn expecting(
                                &self,
                                __formatter: &mut _serde::__private::Formatter,
                            ) -> _serde::__private::fmt::Result {
                                _serde::__private::Formatter::write_str(
                                    __formatter,
                                    "struct TokenChain",
                                )
                            }
                            #[inline]
                            fn visit_seq<__A>(
                                self,
                                mut __seq: __A,
                            ) -> _serde::__private::Result<Self::Value, __A::Error>
                            where
                                __A: _serde::de::SeqAccess<'de>,
                            {
                                let __field0 =
                                    match match _serde::de::SeqAccess::next_element::<Vec<String>>(
                                        &mut __seq,
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    } {
                                        _serde::__private::Some(__value) => __value,
                                        _serde::__private::None => {
                                            return _serde::__private::Err(
                                                _serde::de::Error::invalid_length(
                                                    0usize,
                                                    &"struct TokenChain with 1 element",
                                                ),
                                            );
                                        }
                                    };
                                _serde::__private::Ok(TokenChain { chain: __field0 })
                            }
                            #[inline]
                            fn visit_map<__A>(
                                self,
                                mut __map: __A,
                            ) -> _serde::__private::Result<Self::Value, __A::Error>
                            where
                                __A: _serde::de::MapAccess<'de>,
                            {
                                let mut __field0: _serde::__private::Option<Vec<String>> =
                                    _serde::__private::None;
                                while let _serde::__private::Some(__key) =
                                    match _serde::de::MapAccess::next_key::<__Field>(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                {
                                    match __key {
                                        __Field::__field0 => {
                                            if _serde::__private::Option::is_some(&__field0) {
                                                return _serde :: __private :: Err (< __A :: Error as _serde :: de :: Error > :: duplicate_field ("chain")) ;
                                            }
                                            __field0 = _serde::__private::Some(
                                                match _serde::de::MapAccess::next_value::<Vec<String>>(
                                                    &mut __map,
                                                ) {
                                                    _serde::__private::Ok(__val) => __val,
                                                    _serde::__private::Err(__err) => {
                                                        return _serde::__private::Err(__err);
                                                    }
                                                },
                                            );
                                        }
                                        _ => {
                                            let _ = match _serde::de::MapAccess::next_value::<
                                                _serde::de::IgnoredAny,
                                            >(
                                                &mut __map
                                            ) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            };
                                        }
                                    }
                                }
                                let __field0 = match __field0 {
                                    _serde::__private::Some(__field0) => __field0,
                                    _serde::__private::None => {
                                        match _serde::__private::de::missing_field("chain") {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    }
                                };
                                _serde::__private::Ok(TokenChain { chain: __field0 })
                            }
                        }
                        const FIELDS: &'static [&'static str] = &["chain"];
                        _serde::Deserializer::deserialize_struct(
                            __deserializer,
                            "TokenChain",
                            FIELDS,
                            __Visitor {
                                marker: _serde::__private::PhantomData::<TokenChain>,
                                lifetime: _serde::__private::PhantomData,
                            },
                        )
                    }
                }
            };
            #[allow(non_snake_case)]
            struct Inside {
                extraData: Identity,
            }
            #[doc(hidden)]
            #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
            const _: () = {
                #[allow(rust_2018_idioms, clippy::useless_attribute)]
                extern crate serde as _serde;
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for Inside {
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __ignore,
                        }
                        struct __FieldVisitor;
                        impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                            type Value = __Field;
                            fn expecting(
                                &self,
                                __formatter: &mut _serde::__private::Formatter,
                            ) -> _serde::__private::fmt::Result {
                                _serde::__private::Formatter::write_str(
                                    __formatter,
                                    "field identifier",
                                )
                            }
                            fn visit_u64<__E>(
                                self,
                                __value: u64,
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    0u64 => _serde::__private::Ok(__Field::__field0),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                            fn visit_str<__E>(
                                self,
                                __value: &str,
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    "extraData" => _serde::__private::Ok(__Field::__field0),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                            fn visit_bytes<__E>(
                                self,
                                __value: &[u8],
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    b"extraData" => _serde::__private::Ok(__Field::__field0),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                        }
                        impl<'de> _serde::Deserialize<'de> for __Field {
                            #[inline]
                            fn deserialize<__D>(
                                __deserializer: __D,
                            ) -> _serde::__private::Result<Self, __D::Error>
                            where
                                __D: _serde::Deserializer<'de>,
                            {
                                _serde::Deserializer::deserialize_identifier(
                                    __deserializer,
                                    __FieldVisitor,
                                )
                            }
                        }
                        struct __Visitor<'de> {
                            marker: _serde::__private::PhantomData<Inside>,
                            lifetime: _serde::__private::PhantomData<&'de ()>,
                        }
                        impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                            type Value = Inside;
                            fn expecting(
                                &self,
                                __formatter: &mut _serde::__private::Formatter,
                            ) -> _serde::__private::fmt::Result {
                                _serde::__private::Formatter::write_str(
                                    __formatter,
                                    "struct Inside",
                                )
                            }
                            #[inline]
                            fn visit_seq<__A>(
                                self,
                                mut __seq: __A,
                            ) -> _serde::__private::Result<Self::Value, __A::Error>
                            where
                                __A: _serde::de::SeqAccess<'de>,
                            {
                                let __field0 =
                                    match match _serde::de::SeqAccess::next_element::<Identity>(
                                        &mut __seq,
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    } {
                                        _serde::__private::Some(__value) => __value,
                                        _serde::__private::None => {
                                            return _serde::__private::Err(
                                                _serde::de::Error::invalid_length(
                                                    0usize,
                                                    &"struct Inside with 1 element",
                                                ),
                                            );
                                        }
                                    };
                                _serde::__private::Ok(Inside {
                                    extraData: __field0,
                                })
                            }
                            #[inline]
                            fn visit_map<__A>(
                                self,
                                mut __map: __A,
                            ) -> _serde::__private::Result<Self::Value, __A::Error>
                            where
                                __A: _serde::de::MapAccess<'de>,
                            {
                                let mut __field0: _serde::__private::Option<Identity> =
                                    _serde::__private::None;
                                while let _serde::__private::Some(__key) =
                                    match _serde::de::MapAccess::next_key::<__Field>(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                {
                                    match __key {
                                        __Field::__field0 => {
                                            if _serde::__private::Option::is_some(&__field0) {
                                                return _serde :: __private :: Err (< __A :: Error as _serde :: de :: Error > :: duplicate_field ("extraData")) ;
                                            }
                                            __field0 = _serde::__private::Some(
                                                match _serde::de::MapAccess::next_value::<Identity>(
                                                    &mut __map,
                                                ) {
                                                    _serde::__private::Ok(__val) => __val,
                                                    _serde::__private::Err(__err) => {
                                                        return _serde::__private::Err(__err);
                                                    }
                                                },
                                            );
                                        }
                                        _ => {
                                            let _ = match _serde::de::MapAccess::next_value::<
                                                _serde::de::IgnoredAny,
                                            >(
                                                &mut __map
                                            ) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            };
                                        }
                                    }
                                }
                                let __field0 = match __field0 {
                                    _serde::__private::Some(__field0) => __field0,
                                    _serde::__private::None => {
                                        match _serde::__private::de::missing_field("extraData") {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    }
                                };
                                _serde::__private::Ok(Inside {
                                    extraData: __field0,
                                })
                            }
                        }
                        const FIELDS: &'static [&'static str] = &["extraData"];
                        _serde::Deserializer::deserialize_struct(
                            __deserializer,
                            "Inside",
                            FIELDS,
                            __Visitor {
                                marker: _serde::__private::PhantomData::<Inside>,
                                lifetime: _serde::__private::PhantomData,
                            },
                        )
                    }
                }
            };
            #[allow(non_snake_case)]
            struct Identity {
                displayName: String,
                identity: String,
            }
            #[doc(hidden)]
            #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
            const _: () = {
                #[allow(rust_2018_idioms, clippy::useless_attribute)]
                extern crate serde as _serde;
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for Identity {
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __field1,
                            __ignore,
                        }
                        struct __FieldVisitor;
                        impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                            type Value = __Field;
                            fn expecting(
                                &self,
                                __formatter: &mut _serde::__private::Formatter,
                            ) -> _serde::__private::fmt::Result {
                                _serde::__private::Formatter::write_str(
                                    __formatter,
                                    "field identifier",
                                )
                            }
                            fn visit_u64<__E>(
                                self,
                                __value: u64,
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    0u64 => _serde::__private::Ok(__Field::__field0),
                                    1u64 => _serde::__private::Ok(__Field::__field1),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                            fn visit_str<__E>(
                                self,
                                __value: &str,
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    "displayName" => _serde::__private::Ok(__Field::__field0),
                                    "identity" => _serde::__private::Ok(__Field::__field1),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                            fn visit_bytes<__E>(
                                self,
                                __value: &[u8],
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    b"displayName" => _serde::__private::Ok(__Field::__field0),
                                    b"identity" => _serde::__private::Ok(__Field::__field1),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                        }
                        impl<'de> _serde::Deserialize<'de> for __Field {
                            #[inline]
                            fn deserialize<__D>(
                                __deserializer: __D,
                            ) -> _serde::__private::Result<Self, __D::Error>
                            where
                                __D: _serde::Deserializer<'de>,
                            {
                                _serde::Deserializer::deserialize_identifier(
                                    __deserializer,
                                    __FieldVisitor,
                                )
                            }
                        }
                        struct __Visitor<'de> {
                            marker: _serde::__private::PhantomData<Identity>,
                            lifetime: _serde::__private::PhantomData<&'de ()>,
                        }
                        impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                            type Value = Identity;
                            fn expecting(
                                &self,
                                __formatter: &mut _serde::__private::Formatter,
                            ) -> _serde::__private::fmt::Result {
                                _serde::__private::Formatter::write_str(
                                    __formatter,
                                    "struct Identity",
                                )
                            }
                            #[inline]
                            fn visit_seq<__A>(
                                self,
                                mut __seq: __A,
                            ) -> _serde::__private::Result<Self::Value, __A::Error>
                            where
                                __A: _serde::de::SeqAccess<'de>,
                            {
                                let __field0 =
                                    match match _serde::de::SeqAccess::next_element::<String>(
                                        &mut __seq,
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    } {
                                        _serde::__private::Some(__value) => __value,
                                        _serde::__private::None => {
                                            return _serde::__private::Err(
                                                _serde::de::Error::invalid_length(
                                                    0usize,
                                                    &"struct Identity with 2 elements",
                                                ),
                                            );
                                        }
                                    };
                                let __field1 =
                                    match match _serde::de::SeqAccess::next_element::<String>(
                                        &mut __seq,
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    } {
                                        _serde::__private::Some(__value) => __value,
                                        _serde::__private::None => {
                                            return _serde::__private::Err(
                                                _serde::de::Error::invalid_length(
                                                    1usize,
                                                    &"struct Identity with 2 elements",
                                                ),
                                            );
                                        }
                                    };
                                _serde::__private::Ok(Identity {
                                    displayName: __field0,
                                    identity: __field1,
                                })
                            }
                            #[inline]
                            fn visit_map<__A>(
                                self,
                                mut __map: __A,
                            ) -> _serde::__private::Result<Self::Value, __A::Error>
                            where
                                __A: _serde::de::MapAccess<'de>,
                            {
                                let mut __field0: _serde::__private::Option<String> =
                                    _serde::__private::None;
                                let mut __field1: _serde::__private::Option<String> =
                                    _serde::__private::None;
                                while let _serde::__private::Some(__key) =
                                    match _serde::de::MapAccess::next_key::<__Field>(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                {
                                    match __key {
                                        __Field::__field0 => {
                                            if _serde::__private::Option::is_some(&__field0) {
                                                return _serde :: __private :: Err (< __A :: Error as _serde :: de :: Error > :: duplicate_field ("displayName")) ;
                                            }
                                            __field0 = _serde::__private::Some(
                                                match _serde::de::MapAccess::next_value::<String>(
                                                    &mut __map,
                                                ) {
                                                    _serde::__private::Ok(__val) => __val,
                                                    _serde::__private::Err(__err) => {
                                                        return _serde::__private::Err(__err);
                                                    }
                                                },
                                            );
                                        }
                                        __Field::__field1 => {
                                            if _serde::__private::Option::is_some(&__field1) {
                                                return _serde :: __private :: Err (< __A :: Error as _serde :: de :: Error > :: duplicate_field ("identity")) ;
                                            }
                                            __field1 = _serde::__private::Some(
                                                match _serde::de::MapAccess::next_value::<String>(
                                                    &mut __map,
                                                ) {
                                                    _serde::__private::Ok(__val) => __val,
                                                    _serde::__private::Err(__err) => {
                                                        return _serde::__private::Err(__err);
                                                    }
                                                },
                                            );
                                        }
                                        _ => {
                                            let _ = match _serde::de::MapAccess::next_value::<
                                                _serde::de::IgnoredAny,
                                            >(
                                                &mut __map
                                            ) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            };
                                        }
                                    }
                                }
                                let __field0 = match __field0 {
                                    _serde::__private::Some(__field0) => __field0,
                                    _serde::__private::None => {
                                        match _serde::__private::de::missing_field("displayName") {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    }
                                };
                                let __field1 = match __field1 {
                                    _serde::__private::Some(__field1) => __field1,
                                    _serde::__private::None => {
                                        match _serde::__private::de::missing_field("identity") {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    }
                                };
                                _serde::__private::Ok(Identity {
                                    displayName: __field0,
                                    identity: __field1,
                                })
                            }
                        }
                        const FIELDS: &'static [&'static str] = &["displayName", "identity"];
                        _serde::Deserializer::deserialize_struct(
                            __deserializer,
                            "Identity",
                            FIELDS,
                            __Visitor {
                                marker: _serde::__private::PhantomData::<Identity>,
                                lifetime: _serde::__private::PhantomData,
                            },
                        )
                    }
                }
            };
            impl MCPEPacketData for LoginPacket {
                fn decode(
                    reader: &mut impl crate::prelude::Reader,
                ) -> Result<Self, MCPEPacketDataError> {
                    let protocol_version = i32::decode(reader)?;
                    let chain_data = <ByteArrayEncapsulated<String>>::decode(reader)?;
                    let json = serde_json::from_str::<TokenChain>(&chain_data.0)
                        .map_err(|_| MCPEPacketDataError::new("json_string", "Invalid json"))?
                        .chain;
                    let data_inside: Identity = json
                        .iter()
                        .find_map(|x| {
                            if let Some(e) = x.find(".") {
                                let x = &x[e + 1..];
                                if let Some(e) = x.find(".") {
                                    let base64 = base64::decode(&x[..e]).ok()?;
                                    serde_json::from_slice::<Inside>(&base64).ok()
                                } else {
                                    None
                                }
                            } else {
                                None
                            }
                        })
                        .ok_or_else(|| MCPEPacketDataError::new("json_string", "No json"))?
                        .extraData;
                    Ok(Self {
                        protocol_version,
                        display_name: data_inside.displayName,
                        identity: data_inside.identity,
                    })
                }
                fn encode(
                    &self,
                    _writer: &mut impl crate::prelude::Writer,
                ) -> Result<(), MCPEPacketDataError> {
                    ::core::panicking::panic("not yet implemented")
                }
            }
        }
        pub use login::*;
        mod request_chunk_radius {
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::prelude::VarInt;
            pub struct RequestChunkRadiusPacket {
                pub radius: VarInt,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for RequestChunkRadiusPacket {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        RequestChunkRadiusPacket {
                            radius: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("RequestChunkRadiusPacket");
                            let _ = debug_trait_builder.field("radius", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for RequestChunkRadiusPacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        radius: reader.auto_decode().map_err(|x| x.map("radius"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.radius.encode(writer).map_err(|x| x.map("radius"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for RequestChunkRadiusPacket {
                const PACKET_ID: u8 = 69u8;
            }
        }
        pub use request_chunk_radius::*;
        mod resource_pack_client_response_packet {
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::prelude::{Le, VecIndexed};
            pub struct ResourcePackClientResponsePacket {
                pub status: u8,
                pub pack_ids: VecIndexed<String, Le<u16>>,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for ResourcePackClientResponsePacket {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        ResourcePackClientResponsePacket {
                            status: ref __self_0_0,
                            pack_ids: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("ResourcePackClientResponsePacket");
                            let _ = debug_trait_builder.field("status", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("pack_ids", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for ResourcePackClientResponsePacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        status: reader.auto_decode().map_err(|x| x.map("status"))?,
                        pack_ids: reader.auto_decode().map_err(|x| x.map("pack_ids"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.status.encode(writer).map_err(|x| x.map("status"))?;
                    self.pack_ids
                        .encode(writer)
                        .map_err(|x| x.map("pack_ids"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for ResourcePackClientResponsePacket {
                const PACKET_ID: u8 = 8u8;
            }
        }
        pub use resource_pack_client_response_packet::*;
        mod player_action {
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::prelude::{BlockVec3, UnsignedVarLong, VarInt};
            pub struct PlayerActionPacket {
                pub entity_runtime_id: UnsignedVarLong,
                pub action: VarInt,
                pub coordinates: BlockVec3,
                pub face: VarInt,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for PlayerActionPacket {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        PlayerActionPacket {
                            entity_runtime_id: ref __self_0_0,
                            action: ref __self_0_1,
                            coordinates: ref __self_0_2,
                            face: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("PlayerActionPacket");
                            let _ = debug_trait_builder.field("entity_runtime_id", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("action", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("coordinates", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("face", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for PlayerActionPacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        entity_runtime_id: reader
                            .auto_decode()
                            .map_err(|x| x.map("entity_runtime_id"))?,
                        action: reader.auto_decode().map_err(|x| x.map("action"))?,
                        coordinates: reader.auto_decode().map_err(|x| x.map("coordinates"))?,
                        face: reader.auto_decode().map_err(|x| x.map("face"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.entity_runtime_id
                        .encode(writer)
                        .map_err(|x| x.map("entity_runtime_id"))?;
                    self.action.encode(writer).map_err(|x| x.map("action"))?;
                    self.coordinates
                        .encode(writer)
                        .map_err(|x| x.map("coordinates"))?;
                    self.face.encode(writer).map_err(|x| x.map("face"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for PlayerActionPacket {
                const PACKET_ID: u8 = 36u8;
            }
        }
        pub use player_action::*;
    }
    mod common {
        mod tick_sync {
            use packet_derive::{packet, MCPEPacketDataAuto};
            pub struct TickSyncPacket {
                request_time: i64,
                response_time: i64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for TickSyncPacket {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        TickSyncPacket {
                            request_time: ref __self_0_0,
                            response_time: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("TickSyncPacket");
                            let _ = debug_trait_builder.field("request_time", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("response_time", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for TickSyncPacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        request_time: reader.auto_decode().map_err(|x| x.map("request_time"))?,
                        response_time: reader.auto_decode().map_err(|x| x.map("response_time"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.request_time
                        .encode(writer)
                        .map_err(|x| x.map("request_time"))?;
                    self.response_time
                        .encode(writer)
                        .map_err(|x| x.map("response_time"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for TickSyncPacket {
                const PACKET_ID: u8 = 23u8;
            }
        }
        pub use tick_sync::*;
        mod time_packet {
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::prelude::VarInt;
            pub struct SetTimePacket {
                pub time: VarInt,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for SetTimePacket {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        SetTimePacket {
                            time: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("SetTimePacket");
                            let _ = debug_trait_builder.field("time", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for SetTimePacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        time: reader.auto_decode().map_err(|x| x.map("time"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.time.encode(writer).map_err(|x| x.map("time"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for SetTimePacket {
                const PACKET_ID: u8 = 10u8;
            }
        }
        pub use time_packet::*;
        mod player_move {
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::{
                prelude::{Le, MCPEPacketDataError, UnsignedVarLong, Vec3f},
                traits::MCPEPacketData,
            };
            pub struct PlayerMovePacket {
                pub entity_runtime_id: UnsignedVarLong,
                pub position: Vec3f,
                pub pitch: Le<f32>,
                pub yaw: Le<f32>,
                pub head_yaw: Le<f32>,
                pub mode: PlayerMoveMode,
                pub on_ground: bool,
                pub riding_eid: UnsignedVarLong,
                pub teleport_cause: Option<TeleportationCause>,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for PlayerMovePacket {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        PlayerMovePacket {
                            entity_runtime_id: ref __self_0_0,
                            position: ref __self_0_1,
                            pitch: ref __self_0_2,
                            yaw: ref __self_0_3,
                            head_yaw: ref __self_0_4,
                            mode: ref __self_0_5,
                            on_ground: ref __self_0_6,
                            riding_eid: ref __self_0_7,
                            teleport_cause: ref __self_0_8,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("PlayerMovePacket");
                            let _ = debug_trait_builder.field("entity_runtime_id", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("position", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("pitch", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("yaw", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("head_yaw", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("mode", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("on_ground", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("riding_eid", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("teleport_cause", &&(*__self_0_8));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacket for PlayerMovePacket {
                const PACKET_ID: u8 = 19u8;
            }
            impl PlayerMovePacket {
                pub fn new(
                    mode: PlayerMoveMode,
                    position: Vec3f,
                    pitch: f32,
                    yaw: f32,
                    player: u64,
                ) -> Self {
                    Self {
                        entity_runtime_id: UnsignedVarLong(player),
                        position,
                        pitch: Le(pitch),
                        yaw: Le(yaw),
                        head_yaw: Le(yaw),
                        teleport_cause: if mode == PlayerMoveMode::Teleport {
                            Some(TeleportationCause {
                                cause: Le(0),
                                entity_type: Le(0),
                            })
                        } else {
                            None
                        },
                        mode,
                        on_ground: false,
                        riding_eid: UnsignedVarLong(0),
                    }
                }
            }
            impl crate::traits::MCPEPacketData for PlayerMovePacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    let mut has_cause = false;
                    Ok(Self {
                        entity_runtime_id: reader
                            .auto_decode()
                            .map_err(|x| x.map("entity_runtime_id"))?,
                        position: reader.auto_decode().map_err(|x| x.map("position"))?,
                        pitch: reader.auto_decode().map_err(|x| x.map("pitch"))?,
                        yaw: reader.auto_decode().map_err(|x| x.map("yaw"))?,
                        head_yaw: reader.auto_decode().map_err(|x| x.map("head_yaw"))?,
                        mode: {
                            let mode: PlayerMoveMode =
                                reader.auto_decode().map_err(|x| x.map("mode"))?;
                            if mode == PlayerMoveMode::Teleport {
                                has_cause = true;
                            }
                            mode
                        },
                        on_ground: reader.auto_decode().map_err(|x| x.map("on_ground"))?,
                        riding_eid: reader.auto_decode().map_err(|x| x.map("riding_eid"))?,
                        teleport_cause: if has_cause {
                            Some(reader.auto_decode().map_err(|x| x.map("teleport_cause"))?)
                        } else {
                            None
                        },
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.entity_runtime_id
                        .encode(writer)
                        .map_err(|x| x.map("entity_runtime_id"))?;
                    self.position
                        .encode(writer)
                        .map_err(|x| x.map("position"))?;
                    self.pitch.encode(writer).map_err(|x| x.map("pitch"))?;
                    self.yaw.encode(writer).map_err(|x| x.map("yaw"))?;
                    self.head_yaw
                        .encode(writer)
                        .map_err(|x| x.map("head_yaw"))?;
                    self.mode.encode(writer).map_err(|x| x.map("mode"))?;
                    self.on_ground
                        .encode(writer)
                        .map_err(|x| x.map("on_ground"))?;
                    self.riding_eid
                        .encode(writer)
                        .map_err(|x| x.map("riding_eid"))?;
                    self.teleport_cause
                        .encode(writer)
                        .map_err(|x| x.map("teleport_cause"))?;
                    Ok(())
                }
            }
            pub struct TeleportationCause {
                cause: Le<i32>,
                entity_type: Le<i32>,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for TeleportationCause {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        TeleportationCause {
                            cause: ref __self_0_0,
                            entity_type: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("TeleportationCause");
                            let _ = debug_trait_builder.field("cause", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("entity_type", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for TeleportationCause {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        cause: reader.auto_decode().map_err(|x| x.map("cause"))?,
                        entity_type: reader.auto_decode().map_err(|x| x.map("entity_type"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.cause.encode(writer).map_err(|x| x.map("cause"))?;
                    self.entity_type
                        .encode(writer)
                        .map_err(|x| x.map("entity_type"))?;
                    Ok(())
                }
            }
            #[repr(u8)]
            pub enum PlayerMoveMode {
                Normal = 0,
                Reset = 1,
                Teleport = 2,
                Rotation = 3,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for PlayerMoveMode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match (&*self,) {
                        (&PlayerMoveMode::Normal,) => {
                            let mut debug_trait_builder = f.debug_tuple("Normal");
                            debug_trait_builder.finish()
                        }
                        (&PlayerMoveMode::Reset,) => {
                            let mut debug_trait_builder = f.debug_tuple("Reset");
                            debug_trait_builder.finish()
                        }
                        (&PlayerMoveMode::Teleport,) => {
                            let mut debug_trait_builder = f.debug_tuple("Teleport");
                            debug_trait_builder.finish()
                        }
                        (&PlayerMoveMode::Rotation,) => {
                            let mut debug_trait_builder = f.debug_tuple("Rotation");
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for PlayerMoveMode {
                #[inline]
                fn clone(&self) -> PlayerMoveMode {
                    match (&*self,) {
                        (&PlayerMoveMode::Normal,) => PlayerMoveMode::Normal,
                        (&PlayerMoveMode::Reset,) => PlayerMoveMode::Reset,
                        (&PlayerMoveMode::Teleport,) => PlayerMoveMode::Teleport,
                        (&PlayerMoveMode::Rotation,) => PlayerMoveMode::Rotation,
                    }
                }
            }
            impl ::core::marker::StructuralPartialEq for PlayerMoveMode {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::cmp::PartialEq for PlayerMoveMode {
                #[inline]
                fn eq(&self, other: &PlayerMoveMode) -> bool {
                    {
                        let __self_vi = ::core::intrinsics::discriminant_value(&*self);
                        let __arg_1_vi = ::core::intrinsics::discriminant_value(&*other);
                        if true && __self_vi == __arg_1_vi {
                            match (&*self, &*other) {
                                _ => true,
                            }
                        } else {
                            false
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for PlayerMoveMode {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(match <u8>::decode(reader)? {
                        0 => Self::Normal,
                        1 => Self::Reset,
                        2 => Self::Teleport,
                        3 => Self::Rotation,
                        e => {
                            return Err(crate::prelude::MCPEPacketDataError::new("enum_ident", {
                                let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                                    &["Invalid enum identifier: "],
                                    &match (&e,) {
                                        (arg0,) => [::core::fmt::ArgumentV1::new(
                                            arg0,
                                            ::core::fmt::Display::fmt,
                                        )],
                                    },
                                ));
                                res
                            }))
                        }
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    let ty: u8 = match self {
                        Self::Normal => 0,
                        Self::Reset => 1,
                        Self::Teleport => 2,
                        Self::Rotation => 3,
                    };
                    ty.encode(writer)?;
                    Ok(())
                }
            }
        }
        pub use player_move::*;
    }
    mod server {
        mod resource_packs_info {
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::prelude::Le;
            pub struct ResourcePacksInfo {
                pub accept: bool,
                pub scripting: bool,
                pub behaviour_pack_size: Le<u16>,
                pub resource_pack_size: Le<u16>,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for ResourcePacksInfo {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        ResourcePacksInfo {
                            accept: ref __self_0_0,
                            scripting: ref __self_0_1,
                            behaviour_pack_size: ref __self_0_2,
                            resource_pack_size: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("ResourcePacksInfo");
                            let _ = debug_trait_builder.field("accept", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("scripting", &&(*__self_0_1));
                            let _ =
                                debug_trait_builder.field("behaviour_pack_size", &&(*__self_0_2));
                            let _ =
                                debug_trait_builder.field("resource_pack_size", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for ResourcePacksInfo {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        accept: reader.auto_decode().map_err(|x| x.map("accept"))?,
                        scripting: reader.auto_decode().map_err(|x| x.map("scripting"))?,
                        behaviour_pack_size: reader
                            .auto_decode()
                            .map_err(|x| x.map("behaviour_pack_size"))?,
                        resource_pack_size: reader
                            .auto_decode()
                            .map_err(|x| x.map("resource_pack_size"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.accept.encode(writer).map_err(|x| x.map("accept"))?;
                    self.scripting
                        .encode(writer)
                        .map_err(|x| x.map("scripting"))?;
                    self.behaviour_pack_size
                        .encode(writer)
                        .map_err(|x| x.map("behaviour_pack_size"))?;
                    self.resource_pack_size
                        .encode(writer)
                        .map_err(|x| x.map("resource_pack_size"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for ResourcePacksInfo {
                const PACKET_ID: u8 = 6u8;
            }
            impl Default for ResourcePacksInfo {
                fn default() -> Self {
                    Self {
                        accept: false,
                        scripting: false,
                        behaviour_pack_size: Le(0),
                        resource_pack_size: Le(0),
                    }
                }
            }
        }
        pub use resource_packs_info::*;
        mod play_status {
            use packet_derive::{packet, MCPEPacketDataAuto};
            pub const LOGIN_SUCCESS: PlayStatus = PlayStatus(0);
            pub const LOGIN_FAILED_CLIENT: PlayStatus = PlayStatus(1);
            pub const LOGIN_FAILED_SERVER: PlayStatus = PlayStatus(2);
            pub const PLAYER_SPAWN: PlayStatus = PlayStatus(3);
            pub const LOGIN_FAILED_INVALID_TENANT: PlayStatus = PlayStatus(4);
            pub const LOGIN_FAILED_VANILLA_EDU: PlayStatus = PlayStatus(5);
            pub const LOGIN_FAILED_EDU_VANILLA: PlayStatus = PlayStatus(6);
            pub const LOGIN_FAILED_SERVER_FULL: PlayStatus = PlayStatus(7);
            pub struct PlayStatus(u32);
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for PlayStatus {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        PlayStatus(ref __self_0_0) => {
                            let mut debug_trait_builder = f.debug_tuple("PlayStatus");
                            let _ = debug_trait_builder.field(&&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for PlayStatus {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self(reader.auto_decode().map_err(|x| x.map("0"))?))
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.0.encode(writer).map_err(|x| x.map("0"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for PlayStatus {
                const PACKET_ID: u8 = 2u8;
            }
        }
        pub use play_status::*;
        mod resource_pack_stack {
            use crate::prelude::{ByteArray, Le, UnsignedVarInt};
            use packet_derive::{packet, MCPEPacketDataAuto};
            pub struct ResourcePackStack {
                pub accept: bool,
                pub behaviour_pack_size: UnsignedVarInt,
                pub resource_pack_size: UnsignedVarInt,
                pub game_version: ByteArray,
                pub _exp: Le<i32>,
                pub _unknown: bool,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for ResourcePackStack {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        ResourcePackStack {
                            accept: ref __self_0_0,
                            behaviour_pack_size: ref __self_0_1,
                            resource_pack_size: ref __self_0_2,
                            game_version: ref __self_0_3,
                            _exp: ref __self_0_4,
                            _unknown: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("ResourcePackStack");
                            let _ = debug_trait_builder.field("accept", &&(*__self_0_0));
                            let _ =
                                debug_trait_builder.field("behaviour_pack_size", &&(*__self_0_1));
                            let _ =
                                debug_trait_builder.field("resource_pack_size", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("game_version", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("_exp", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("_unknown", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for ResourcePackStack {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        accept: reader.auto_decode().map_err(|x| x.map("accept"))?,
                        behaviour_pack_size: reader
                            .auto_decode()
                            .map_err(|x| x.map("behaviour_pack_size"))?,
                        resource_pack_size: reader
                            .auto_decode()
                            .map_err(|x| x.map("resource_pack_size"))?,
                        game_version: reader.auto_decode().map_err(|x| x.map("game_version"))?,
                        _exp: reader.auto_decode().map_err(|x| x.map("_exp"))?,
                        _unknown: reader.auto_decode().map_err(|x| x.map("_unknown"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.accept.encode(writer).map_err(|x| x.map("accept"))?;
                    self.behaviour_pack_size
                        .encode(writer)
                        .map_err(|x| x.map("behaviour_pack_size"))?;
                    self.resource_pack_size
                        .encode(writer)
                        .map_err(|x| x.map("resource_pack_size"))?;
                    self.game_version
                        .encode(writer)
                        .map_err(|x| x.map("game_version"))?;
                    self._exp.encode(writer).map_err(|x| x.map("_exp"))?;
                    self._unknown
                        .encode(writer)
                        .map_err(|x| x.map("_unknown"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for ResourcePackStack {
                const PACKET_ID: u8 = 7u8;
            }
            impl Default for ResourcePackStack {
                fn default() -> Self {
                    Self {
                        accept: false,
                        behaviour_pack_size: UnsignedVarInt(0),
                        resource_pack_size: UnsignedVarInt(0),
                        game_version: ByteArray::from("1.16.210".as_bytes().to_vec()),
                        _exp: Le(0),
                        _unknown: false,
                    }
                }
            }
        }
        pub use resource_pack_stack::*;
        mod start_game {
            use crate::prelude::{
                Le, MCPEPacketData, MCPEPacketDataError, UnsignedVarInt, UnsignedVarLong, VarInt,
                VarLong, VecIndexed,
            };
            use packet_derive::{packet, MCPEPacketDataAuto};
            pub struct Vec3f(pub Le<f32>, pub Le<f32>, pub Le<f32>);
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for Vec3f {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        Vec3f(ref __self_0_0, ref __self_0_1, ref __self_0_2) => {
                            let mut debug_trait_builder = f.debug_tuple("Vec3f");
                            let _ = debug_trait_builder.field(&&(*__self_0_0));
                            let _ = debug_trait_builder.field(&&(*__self_0_1));
                            let _ = debug_trait_builder.field(&&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for Vec3f {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self(
                        reader.auto_decode().map_err(|x| x.map("0"))?,
                        reader.auto_decode().map_err(|x| x.map("1"))?,
                        reader.auto_decode().map_err(|x| x.map("2"))?,
                    ))
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.0.encode(writer).map_err(|x| x.map("0"))?;
                    self.1.encode(writer).map_err(|x| x.map("1"))?;
                    self.2.encode(writer).map_err(|x| x.map("2"))?;
                    Ok(())
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for Vec3f {
                #[inline]
                fn clone(&self) -> Vec3f {
                    match *self {
                        Vec3f(ref __self_0_0, ref __self_0_1, ref __self_0_2) => Vec3f(
                            ::core::clone::Clone::clone(&(*__self_0_0)),
                            ::core::clone::Clone::clone(&(*__self_0_1)),
                            ::core::clone::Clone::clone(&(*__self_0_2)),
                        ),
                    }
                }
            }
            impl From<(f32, f32, f32)> for Vec3f {
                fn from(e: (f32, f32, f32)) -> Self {
                    Vec3f(Le(e.0), Le(e.1), Le(e.2))
                }
            }
            pub struct BlockVec3(VarInt, UnsignedVarInt, VarInt);
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for BlockVec3 {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        BlockVec3(ref __self_0_0, ref __self_0_1, ref __self_0_2) => {
                            let mut debug_trait_builder = f.debug_tuple("BlockVec3");
                            let _ = debug_trait_builder.field(&&(*__self_0_0));
                            let _ = debug_trait_builder.field(&&(*__self_0_1));
                            let _ = debug_trait_builder.field(&&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for BlockVec3 {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self(
                        reader.auto_decode().map_err(|x| x.map("0"))?,
                        reader.auto_decode().map_err(|x| x.map("1"))?,
                        reader.auto_decode().map_err(|x| x.map("2"))?,
                    ))
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.0.encode(writer).map_err(|x| x.map("0"))?;
                    self.1.encode(writer).map_err(|x| x.map("1"))?;
                    self.2.encode(writer).map_err(|x| x.map("2"))?;
                    Ok(())
                }
            }
            impl From<(i32, u32, i32)> for BlockVec3 {
                fn from(e: (i32, u32, i32)) -> Self {
                    BlockVec3(VarInt(e.0), UnsignedVarInt(e.1), VarInt(e.2))
                }
            }
            pub enum GameRule {
                CommandBlockOutput(bool),
                DoDaylightCycle(bool),
                DoEntityDrops(bool),
                DoFireTick(bool),
                DoImmediateRespawn(bool),
                DoMobLoot(bool),
                DoMobSpawning(bool),
                DoTileDrops(bool),
                DoWeatherCycle(bool),
                DrowningDamage(bool),
                FallDamage(bool),
                FireDamage(bool),
                KeepInventory(bool),
                MobGriefing(bool),
                NaturalRegeneration(bool),
                Pvp(bool),
                RandomTickSpeed(u32),
                SendCommandFeedback(bool),
                ShowCoordinates(bool),
                TntExplodes(bool),
                ShowDeathMessage(bool),
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for GameRule {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match (&*self,) {
                        (&GameRule::CommandBlockOutput(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("CommandBlockOutput");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::DoDaylightCycle(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("DoDaylightCycle");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::DoEntityDrops(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("DoEntityDrops");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::DoFireTick(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("DoFireTick");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::DoImmediateRespawn(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("DoImmediateRespawn");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::DoMobLoot(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("DoMobLoot");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::DoMobSpawning(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("DoMobSpawning");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::DoTileDrops(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("DoTileDrops");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::DoWeatherCycle(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("DoWeatherCycle");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::DrowningDamage(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("DrowningDamage");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::FallDamage(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("FallDamage");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::FireDamage(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("FireDamage");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::KeepInventory(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("KeepInventory");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::MobGriefing(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("MobGriefing");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::NaturalRegeneration(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("NaturalRegeneration");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::Pvp(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("Pvp");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::RandomTickSpeed(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("RandomTickSpeed");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::SendCommandFeedback(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("SendCommandFeedback");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::ShowCoordinates(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("ShowCoordinates");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::TntExplodes(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("TntExplodes");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                        (&GameRule::ShowDeathMessage(ref __self_0),) => {
                            let mut debug_trait_builder = f.debug_tuple("ShowDeathMessage");
                            let _ = debug_trait_builder.field(&&(*__self_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl GameRule {
                fn get_message(&self) -> &'static str {
                    match self {
                        GameRule::CommandBlockOutput(_) => "commandBlockOutput",
                        GameRule::DoDaylightCycle(_) => "doDaylightCycle",
                        GameRule::DoEntityDrops(_) => "doEntityDrops",
                        GameRule::DoFireTick(_) => "doFireTick",
                        GameRule::DoImmediateRespawn(_) => "doImmediateRespawn",
                        GameRule::DoMobLoot(_) => "doMobLoot",
                        GameRule::DoMobSpawning(_) => "doMobSpawning",
                        GameRule::DoTileDrops(_) => "doTileDrops",
                        GameRule::DoWeatherCycle(_) => "doWeatherCycle",
                        GameRule::DrowningDamage(_) => "drowningDamage",
                        GameRule::FallDamage(_) => "fallDamage",
                        GameRule::FireDamage(_) => "fireDamage",
                        GameRule::KeepInventory(_) => "keepInventory",
                        GameRule::MobGriefing(_) => "mobGriefing",
                        GameRule::NaturalRegeneration(_) => "naturalRegeneration",
                        GameRule::Pvp(_) => "pvp",
                        GameRule::RandomTickSpeed(_) => "randomTickSpeed",
                        GameRule::SendCommandFeedback(_) => "sendCommandFeedback",
                        GameRule::ShowCoordinates(_) => "showCoordinates",
                        GameRule::TntExplodes(_) => "tntExplodes",
                        GameRule::ShowDeathMessage(_) => "showDeathMessage",
                    }
                }
                fn from_message_bool(st: &str, b: bool) -> Result<Self, MCPEPacketDataError> {
                    Ok(match st.to_lowercase().as_str() {
                        "commandblockoutput" => Self::CommandBlockOutput(b),
                        "dodaylightcycle" => Self::DoDaylightCycle(b),
                        "doentitydrops" => Self::DoEntityDrops(b),
                        "dofiretick" => Self::DoFireTick(b),
                        "doimmediaterespawn" => Self::DoImmediateRespawn(b),
                        "domobloot" => Self::DoMobLoot(b),
                        "domobspawning" => Self::DoMobSpawning(b),
                        "dotiledrops" => Self::DoTileDrops(b),
                        "doweathercycle" => Self::DoWeatherCycle(b),
                        "drowningdamage" => Self::DrowningDamage(b),
                        "falldamage" => Self::FallDamage(b),
                        "firedamage" => Self::FireDamage(b),
                        "keepinventory" => Self::KeepInventory(b),
                        "mobgriefing" => Self::MobGriefing(b),
                        "naturalregeneration" => Self::NaturalRegeneration(b),
                        "pvp" => Self::Pvp(b),
                        "sendcommandfeedback" => Self::SendCommandFeedback(b),
                        "showcoordinates" => Self::ShowCoordinates(b),
                        "tntexplodes" => Self::TntExplodes(b),
                        "showdeathmessage" => Self::ShowDeathMessage(b),
                        e => {
                            return Err(MCPEPacketDataError::new("GameRule:from_message_bool", {
                                let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                                    &["Invalid gamerule "],
                                    &match (&e,) {
                                        (arg0,) => [::core::fmt::ArgumentV1::new(
                                            arg0,
                                            ::core::fmt::Display::fmt,
                                        )],
                                    },
                                ));
                                res
                            }))
                        }
                    })
                }
            }
            use crate::traits::PacketReader;
            impl MCPEPacketData for GameRule {
                fn decode(
                    e: &mut impl crate::prelude::Reader,
                ) -> Result<Self, MCPEPacketDataError> {
                    let message: String = e.auto_decode().map_err(|x| x.map("gamerule_message"))?;
                    e.skip(1);
                    if message.to_lowercase().as_str() == "randomtickspeed" {
                        let ui: UnsignedVarInt =
                            e.auto_decode().map_err(|x| x.map("uvint_value"))?;
                        Ok(Self::RandomTickSpeed(ui.0))
                    } else {
                        let ui: bool = e.auto_decode().map_err(|x| x.map("bool_value"))?;
                        Self::from_message_bool(&message, ui)
                    }
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::prelude::Writer,
                ) -> Result<(), MCPEPacketDataError> {
                    self.get_message().to_lowercase().encode(writer)?;
                    match self {
                        GameRule::CommandBlockOutput(e)
                        | GameRule::DoDaylightCycle(e)
                        | GameRule::DoEntityDrops(e)
                        | GameRule::DoFireTick(e)
                        | GameRule::DoImmediateRespawn(e)
                        | GameRule::DoMobLoot(e)
                        | GameRule::DoMobSpawning(e)
                        | GameRule::DoTileDrops(e)
                        | GameRule::DoWeatherCycle(e)
                        | GameRule::DrowningDamage(e)
                        | GameRule::FallDamage(e)
                        | GameRule::FireDamage(e)
                        | GameRule::KeepInventory(e)
                        | GameRule::MobGriefing(e)
                        | GameRule::NaturalRegeneration(e)
                        | GameRule::Pvp(e)
                        | GameRule::SendCommandFeedback(e)
                        | GameRule::ShowCoordinates(e)
                        | GameRule::TntExplodes(e)
                        | GameRule::ShowDeathMessage(e) => {
                            writer.write(1)?;
                            (*e).encode(writer)
                        }
                        GameRule::RandomTickSpeed(e) => {
                            writer.write(2)?;
                            UnsignedVarInt(*e).encode(writer)
                        }
                    }
                }
            }
            pub struct StartGamePacket {
                entity_unique_id: VarLong,
                entity_runtime_id: UnsignedVarLong,
                player_gamemode: VarInt,
                spawn: Vec3f,
                yaw: Le<f32>,
                pitch: Le<f32>,
                seed: VarInt,
                spawn_biome_type: Le<i16>,
                custom_biome_name: String,
                dimension: VarInt,
                generator: VarInt,
                world_game_mode: VarInt,
                difficulty: VarInt,
                world_spawn: BlockVec3,
                has_achievements_disabled: bool,
                day_cycle_stop_time: VarInt,
                edu_edition_offer: VarInt,
                has_edu_features_enabled: bool,
                edu_production_id: String,
                rain_level: Le<f32>,
                lightning_level: Le<f32>,
                has_confirmed_platform_locked_content: bool,
                multiplayer_game: bool,
                broadcast_to_lan: bool,
                xbl_broadcast_intent: VarInt,
                platform_broadcast_intent: VarInt,
                commands_enabled: bool,
                is_texture_packs_required: bool,
                game_rules: VecIndexed<GameRule, UnsignedVarInt>,
                _unknown1: Le<i32>,
                _unknown2: bool,
                bonus_chest: bool,
                has_start_with_map_enabled: bool,
                permission_level: VarInt,
                server_chunk_tick_range: Le<i32>,
                has_locked_behavior_pack: bool,
                has_locked_resource_pack: bool,
                is_from_locked_world_template: bool,
                is_using_msa_gamertags_only: bool,
                is_from_world_template: bool,
                is_world_template_option_locked: bool,
                is_only_spawning_v1_villagers: bool,
                vanilla_version: String,
                limited_world_width: i32,
                limited_world_height: i32,
                is_nether_type: bool,
                is_force_experimental_gameplay: bool,
                level_id: String,
                world_name: String,
                premium_world_template_id: String,
                is_trial: bool,
                is_movement_server_authoritative: bool,
                _unknown3: VarInt,
                _unknown4: bool,
                current_tick: Le<i64>,
                enchantment_seed: VarInt,
                _unknown5: UnsignedVarInt,
                item_data_palette: VecIndexed<ItemDef, UnsignedVarInt>,
                multiplayer_correlation_id: String,
                is_inventory_server_authoritative: bool,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for StartGamePacket {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        StartGamePacket {
                            entity_unique_id: ref __self_0_0,
                            entity_runtime_id: ref __self_0_1,
                            player_gamemode: ref __self_0_2,
                            spawn: ref __self_0_3,
                            yaw: ref __self_0_4,
                            pitch: ref __self_0_5,
                            seed: ref __self_0_6,
                            spawn_biome_type: ref __self_0_7,
                            custom_biome_name: ref __self_0_8,
                            dimension: ref __self_0_9,
                            generator: ref __self_0_10,
                            world_game_mode: ref __self_0_11,
                            difficulty: ref __self_0_12,
                            world_spawn: ref __self_0_13,
                            has_achievements_disabled: ref __self_0_14,
                            day_cycle_stop_time: ref __self_0_15,
                            edu_edition_offer: ref __self_0_16,
                            has_edu_features_enabled: ref __self_0_17,
                            edu_production_id: ref __self_0_18,
                            rain_level: ref __self_0_19,
                            lightning_level: ref __self_0_20,
                            has_confirmed_platform_locked_content: ref __self_0_21,
                            multiplayer_game: ref __self_0_22,
                            broadcast_to_lan: ref __self_0_23,
                            xbl_broadcast_intent: ref __self_0_24,
                            platform_broadcast_intent: ref __self_0_25,
                            commands_enabled: ref __self_0_26,
                            is_texture_packs_required: ref __self_0_27,
                            game_rules: ref __self_0_28,
                            _unknown1: ref __self_0_29,
                            _unknown2: ref __self_0_30,
                            bonus_chest: ref __self_0_31,
                            has_start_with_map_enabled: ref __self_0_32,
                            permission_level: ref __self_0_33,
                            server_chunk_tick_range: ref __self_0_34,
                            has_locked_behavior_pack: ref __self_0_35,
                            has_locked_resource_pack: ref __self_0_36,
                            is_from_locked_world_template: ref __self_0_37,
                            is_using_msa_gamertags_only: ref __self_0_38,
                            is_from_world_template: ref __self_0_39,
                            is_world_template_option_locked: ref __self_0_40,
                            is_only_spawning_v1_villagers: ref __self_0_41,
                            vanilla_version: ref __self_0_42,
                            limited_world_width: ref __self_0_43,
                            limited_world_height: ref __self_0_44,
                            is_nether_type: ref __self_0_45,
                            is_force_experimental_gameplay: ref __self_0_46,
                            level_id: ref __self_0_47,
                            world_name: ref __self_0_48,
                            premium_world_template_id: ref __self_0_49,
                            is_trial: ref __self_0_50,
                            is_movement_server_authoritative: ref __self_0_51,
                            _unknown3: ref __self_0_52,
                            _unknown4: ref __self_0_53,
                            current_tick: ref __self_0_54,
                            enchantment_seed: ref __self_0_55,
                            _unknown5: ref __self_0_56,
                            item_data_palette: ref __self_0_57,
                            multiplayer_correlation_id: ref __self_0_58,
                            is_inventory_server_authoritative: ref __self_0_59,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("StartGamePacket");
                            let _ = debug_trait_builder.field("entity_unique_id", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("entity_runtime_id", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("player_gamemode", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("spawn", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("yaw", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("pitch", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("seed", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("spawn_biome_type", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("custom_biome_name", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("dimension", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("generator", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("world_game_mode", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("difficulty", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("world_spawn", &&(*__self_0_13));
                            let _ = debug_trait_builder
                                .field("has_achievements_disabled", &&(*__self_0_14));
                            let _ =
                                debug_trait_builder.field("day_cycle_stop_time", &&(*__self_0_15));
                            let _ =
                                debug_trait_builder.field("edu_edition_offer", &&(*__self_0_16));
                            let _ = debug_trait_builder
                                .field("has_edu_features_enabled", &&(*__self_0_17));
                            let _ =
                                debug_trait_builder.field("edu_production_id", &&(*__self_0_18));
                            let _ = debug_trait_builder.field("rain_level", &&(*__self_0_19));
                            let _ = debug_trait_builder.field("lightning_level", &&(*__self_0_20));
                            let _ = debug_trait_builder
                                .field("has_confirmed_platform_locked_content", &&(*__self_0_21));
                            let _ = debug_trait_builder.field("multiplayer_game", &&(*__self_0_22));
                            let _ = debug_trait_builder.field("broadcast_to_lan", &&(*__self_0_23));
                            let _ =
                                debug_trait_builder.field("xbl_broadcast_intent", &&(*__self_0_24));
                            let _ = debug_trait_builder
                                .field("platform_broadcast_intent", &&(*__self_0_25));
                            let _ = debug_trait_builder.field("commands_enabled", &&(*__self_0_26));
                            let _ = debug_trait_builder
                                .field("is_texture_packs_required", &&(*__self_0_27));
                            let _ = debug_trait_builder.field("game_rules", &&(*__self_0_28));
                            let _ = debug_trait_builder.field("_unknown1", &&(*__self_0_29));
                            let _ = debug_trait_builder.field("_unknown2", &&(*__self_0_30));
                            let _ = debug_trait_builder.field("bonus_chest", &&(*__self_0_31));
                            let _ = debug_trait_builder
                                .field("has_start_with_map_enabled", &&(*__self_0_32));
                            let _ = debug_trait_builder.field("permission_level", &&(*__self_0_33));
                            let _ = debug_trait_builder
                                .field("server_chunk_tick_range", &&(*__self_0_34));
                            let _ = debug_trait_builder
                                .field("has_locked_behavior_pack", &&(*__self_0_35));
                            let _ = debug_trait_builder
                                .field("has_locked_resource_pack", &&(*__self_0_36));
                            let _ = debug_trait_builder
                                .field("is_from_locked_world_template", &&(*__self_0_37));
                            let _ = debug_trait_builder
                                .field("is_using_msa_gamertags_only", &&(*__self_0_38));
                            let _ = debug_trait_builder
                                .field("is_from_world_template", &&(*__self_0_39));
                            let _ = debug_trait_builder
                                .field("is_world_template_option_locked", &&(*__self_0_40));
                            let _ = debug_trait_builder
                                .field("is_only_spawning_v1_villagers", &&(*__self_0_41));
                            let _ = debug_trait_builder.field("vanilla_version", &&(*__self_0_42));
                            let _ =
                                debug_trait_builder.field("limited_world_width", &&(*__self_0_43));
                            let _ =
                                debug_trait_builder.field("limited_world_height", &&(*__self_0_44));
                            let _ = debug_trait_builder.field("is_nether_type", &&(*__self_0_45));
                            let _ = debug_trait_builder
                                .field("is_force_experimental_gameplay", &&(*__self_0_46));
                            let _ = debug_trait_builder.field("level_id", &&(*__self_0_47));
                            let _ = debug_trait_builder.field("world_name", &&(*__self_0_48));
                            let _ = debug_trait_builder
                                .field("premium_world_template_id", &&(*__self_0_49));
                            let _ = debug_trait_builder.field("is_trial", &&(*__self_0_50));
                            let _ = debug_trait_builder
                                .field("is_movement_server_authoritative", &&(*__self_0_51));
                            let _ = debug_trait_builder.field("_unknown3", &&(*__self_0_52));
                            let _ = debug_trait_builder.field("_unknown4", &&(*__self_0_53));
                            let _ = debug_trait_builder.field("current_tick", &&(*__self_0_54));
                            let _ = debug_trait_builder.field("enchantment_seed", &&(*__self_0_55));
                            let _ = debug_trait_builder.field("_unknown5", &&(*__self_0_56));
                            let _ =
                                debug_trait_builder.field("item_data_palette", &&(*__self_0_57));
                            let _ = debug_trait_builder
                                .field("multiplayer_correlation_id", &&(*__self_0_58));
                            let _ = debug_trait_builder
                                .field("is_inventory_server_authoritative", &&(*__self_0_59));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for StartGamePacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        entity_unique_id: reader
                            .auto_decode()
                            .map_err(|x| x.map("entity_unique_id"))?,
                        entity_runtime_id: reader
                            .auto_decode()
                            .map_err(|x| x.map("entity_runtime_id"))?,
                        player_gamemode: reader
                            .auto_decode()
                            .map_err(|x| x.map("player_gamemode"))?,
                        spawn: reader.auto_decode().map_err(|x| x.map("spawn"))?,
                        yaw: reader.auto_decode().map_err(|x| x.map("yaw"))?,
                        pitch: reader.auto_decode().map_err(|x| x.map("pitch"))?,
                        seed: reader.auto_decode().map_err(|x| x.map("seed"))?,
                        spawn_biome_type: reader
                            .auto_decode()
                            .map_err(|x| x.map("spawn_biome_type"))?,
                        custom_biome_name: reader
                            .auto_decode()
                            .map_err(|x| x.map("custom_biome_name"))?,
                        dimension: reader.auto_decode().map_err(|x| x.map("dimension"))?,
                        generator: reader.auto_decode().map_err(|x| x.map("generator"))?,
                        world_game_mode: reader
                            .auto_decode()
                            .map_err(|x| x.map("world_game_mode"))?,
                        difficulty: reader.auto_decode().map_err(|x| x.map("difficulty"))?,
                        world_spawn: reader.auto_decode().map_err(|x| x.map("world_spawn"))?,
                        has_achievements_disabled: reader
                            .auto_decode()
                            .map_err(|x| x.map("has_achievements_disabled"))?,
                        day_cycle_stop_time: reader
                            .auto_decode()
                            .map_err(|x| x.map("day_cycle_stop_time"))?,
                        edu_edition_offer: reader
                            .auto_decode()
                            .map_err(|x| x.map("edu_edition_offer"))?,
                        has_edu_features_enabled: reader
                            .auto_decode()
                            .map_err(|x| x.map("has_edu_features_enabled"))?,
                        edu_production_id: reader
                            .auto_decode()
                            .map_err(|x| x.map("edu_production_id"))?,
                        rain_level: reader.auto_decode().map_err(|x| x.map("rain_level"))?,
                        lightning_level: reader
                            .auto_decode()
                            .map_err(|x| x.map("lightning_level"))?,
                        has_confirmed_platform_locked_content: reader
                            .auto_decode()
                            .map_err(|x| x.map("has_confirmed_platform_locked_content"))?,
                        multiplayer_game: reader
                            .auto_decode()
                            .map_err(|x| x.map("multiplayer_game"))?,
                        broadcast_to_lan: reader
                            .auto_decode()
                            .map_err(|x| x.map("broadcast_to_lan"))?,
                        xbl_broadcast_intent: reader
                            .auto_decode()
                            .map_err(|x| x.map("xbl_broadcast_intent"))?,
                        platform_broadcast_intent: reader
                            .auto_decode()
                            .map_err(|x| x.map("platform_broadcast_intent"))?,
                        commands_enabled: reader
                            .auto_decode()
                            .map_err(|x| x.map("commands_enabled"))?,
                        is_texture_packs_required: reader
                            .auto_decode()
                            .map_err(|x| x.map("is_texture_packs_required"))?,
                        game_rules: reader.auto_decode().map_err(|x| x.map("game_rules"))?,
                        _unknown1: reader.auto_decode().map_err(|x| x.map("_unknown1"))?,
                        _unknown2: reader.auto_decode().map_err(|x| x.map("_unknown2"))?,
                        bonus_chest: reader.auto_decode().map_err(|x| x.map("bonus_chest"))?,
                        has_start_with_map_enabled: reader
                            .auto_decode()
                            .map_err(|x| x.map("has_start_with_map_enabled"))?,
                        permission_level: reader
                            .auto_decode()
                            .map_err(|x| x.map("permission_level"))?,
                        server_chunk_tick_range: reader
                            .auto_decode()
                            .map_err(|x| x.map("server_chunk_tick_range"))?,
                        has_locked_behavior_pack: reader
                            .auto_decode()
                            .map_err(|x| x.map("has_locked_behavior_pack"))?,
                        has_locked_resource_pack: reader
                            .auto_decode()
                            .map_err(|x| x.map("has_locked_resource_pack"))?,
                        is_from_locked_world_template: reader
                            .auto_decode()
                            .map_err(|x| x.map("is_from_locked_world_template"))?,
                        is_using_msa_gamertags_only: reader
                            .auto_decode()
                            .map_err(|x| x.map("is_using_msa_gamertags_only"))?,
                        is_from_world_template: reader
                            .auto_decode()
                            .map_err(|x| x.map("is_from_world_template"))?,
                        is_world_template_option_locked: reader
                            .auto_decode()
                            .map_err(|x| x.map("is_world_template_option_locked"))?,
                        is_only_spawning_v1_villagers: reader
                            .auto_decode()
                            .map_err(|x| x.map("is_only_spawning_v1_villagers"))?,
                        vanilla_version: reader
                            .auto_decode()
                            .map_err(|x| x.map("vanilla_version"))?,
                        limited_world_width: reader
                            .auto_decode()
                            .map_err(|x| x.map("limited_world_width"))?,
                        limited_world_height: reader
                            .auto_decode()
                            .map_err(|x| x.map("limited_world_height"))?,
                        is_nether_type: reader
                            .auto_decode()
                            .map_err(|x| x.map("is_nether_type"))?,
                        is_force_experimental_gameplay: reader
                            .auto_decode()
                            .map_err(|x| x.map("is_force_experimental_gameplay"))?,
                        level_id: reader.auto_decode().map_err(|x| x.map("level_id"))?,
                        world_name: reader.auto_decode().map_err(|x| x.map("world_name"))?,
                        premium_world_template_id: reader
                            .auto_decode()
                            .map_err(|x| x.map("premium_world_template_id"))?,
                        is_trial: reader.auto_decode().map_err(|x| x.map("is_trial"))?,
                        is_movement_server_authoritative: reader
                            .auto_decode()
                            .map_err(|x| x.map("is_movement_server_authoritative"))?,
                        _unknown3: reader.auto_decode().map_err(|x| x.map("_unknown3"))?,
                        _unknown4: reader.auto_decode().map_err(|x| x.map("_unknown4"))?,
                        current_tick: reader.auto_decode().map_err(|x| x.map("current_tick"))?,
                        enchantment_seed: reader
                            .auto_decode()
                            .map_err(|x| x.map("enchantment_seed"))?,
                        _unknown5: reader.auto_decode().map_err(|x| x.map("_unknown5"))?,
                        item_data_palette: reader
                            .auto_decode()
                            .map_err(|x| x.map("item_data_palette"))?,
                        multiplayer_correlation_id: reader
                            .auto_decode()
                            .map_err(|x| x.map("multiplayer_correlation_id"))?,
                        is_inventory_server_authoritative: reader
                            .auto_decode()
                            .map_err(|x| x.map("is_inventory_server_authoritative"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.entity_unique_id
                        .encode(writer)
                        .map_err(|x| x.map("entity_unique_id"))?;
                    self.entity_runtime_id
                        .encode(writer)
                        .map_err(|x| x.map("entity_runtime_id"))?;
                    self.player_gamemode
                        .encode(writer)
                        .map_err(|x| x.map("player_gamemode"))?;
                    self.spawn.encode(writer).map_err(|x| x.map("spawn"))?;
                    self.yaw.encode(writer).map_err(|x| x.map("yaw"))?;
                    self.pitch.encode(writer).map_err(|x| x.map("pitch"))?;
                    self.seed.encode(writer).map_err(|x| x.map("seed"))?;
                    self.spawn_biome_type
                        .encode(writer)
                        .map_err(|x| x.map("spawn_biome_type"))?;
                    self.custom_biome_name
                        .encode(writer)
                        .map_err(|x| x.map("custom_biome_name"))?;
                    self.dimension
                        .encode(writer)
                        .map_err(|x| x.map("dimension"))?;
                    self.generator
                        .encode(writer)
                        .map_err(|x| x.map("generator"))?;
                    self.world_game_mode
                        .encode(writer)
                        .map_err(|x| x.map("world_game_mode"))?;
                    self.difficulty
                        .encode(writer)
                        .map_err(|x| x.map("difficulty"))?;
                    self.world_spawn
                        .encode(writer)
                        .map_err(|x| x.map("world_spawn"))?;
                    self.has_achievements_disabled
                        .encode(writer)
                        .map_err(|x| x.map("has_achievements_disabled"))?;
                    self.day_cycle_stop_time
                        .encode(writer)
                        .map_err(|x| x.map("day_cycle_stop_time"))?;
                    self.edu_edition_offer
                        .encode(writer)
                        .map_err(|x| x.map("edu_edition_offer"))?;
                    self.has_edu_features_enabled
                        .encode(writer)
                        .map_err(|x| x.map("has_edu_features_enabled"))?;
                    self.edu_production_id
                        .encode(writer)
                        .map_err(|x| x.map("edu_production_id"))?;
                    self.rain_level
                        .encode(writer)
                        .map_err(|x| x.map("rain_level"))?;
                    self.lightning_level
                        .encode(writer)
                        .map_err(|x| x.map("lightning_level"))?;
                    self.has_confirmed_platform_locked_content
                        .encode(writer)
                        .map_err(|x| x.map("has_confirmed_platform_locked_content"))?;
                    self.multiplayer_game
                        .encode(writer)
                        .map_err(|x| x.map("multiplayer_game"))?;
                    self.broadcast_to_lan
                        .encode(writer)
                        .map_err(|x| x.map("broadcast_to_lan"))?;
                    self.xbl_broadcast_intent
                        .encode(writer)
                        .map_err(|x| x.map("xbl_broadcast_intent"))?;
                    self.platform_broadcast_intent
                        .encode(writer)
                        .map_err(|x| x.map("platform_broadcast_intent"))?;
                    self.commands_enabled
                        .encode(writer)
                        .map_err(|x| x.map("commands_enabled"))?;
                    self.is_texture_packs_required
                        .encode(writer)
                        .map_err(|x| x.map("is_texture_packs_required"))?;
                    self.game_rules
                        .encode(writer)
                        .map_err(|x| x.map("game_rules"))?;
                    self._unknown1
                        .encode(writer)
                        .map_err(|x| x.map("_unknown1"))?;
                    self._unknown2
                        .encode(writer)
                        .map_err(|x| x.map("_unknown2"))?;
                    self.bonus_chest
                        .encode(writer)
                        .map_err(|x| x.map("bonus_chest"))?;
                    self.has_start_with_map_enabled
                        .encode(writer)
                        .map_err(|x| x.map("has_start_with_map_enabled"))?;
                    self.permission_level
                        .encode(writer)
                        .map_err(|x| x.map("permission_level"))?;
                    self.server_chunk_tick_range
                        .encode(writer)
                        .map_err(|x| x.map("server_chunk_tick_range"))?;
                    self.has_locked_behavior_pack
                        .encode(writer)
                        .map_err(|x| x.map("has_locked_behavior_pack"))?;
                    self.has_locked_resource_pack
                        .encode(writer)
                        .map_err(|x| x.map("has_locked_resource_pack"))?;
                    self.is_from_locked_world_template
                        .encode(writer)
                        .map_err(|x| x.map("is_from_locked_world_template"))?;
                    self.is_using_msa_gamertags_only
                        .encode(writer)
                        .map_err(|x| x.map("is_using_msa_gamertags_only"))?;
                    self.is_from_world_template
                        .encode(writer)
                        .map_err(|x| x.map("is_from_world_template"))?;
                    self.is_world_template_option_locked
                        .encode(writer)
                        .map_err(|x| x.map("is_world_template_option_locked"))?;
                    self.is_only_spawning_v1_villagers
                        .encode(writer)
                        .map_err(|x| x.map("is_only_spawning_v1_villagers"))?;
                    self.vanilla_version
                        .encode(writer)
                        .map_err(|x| x.map("vanilla_version"))?;
                    self.limited_world_width
                        .encode(writer)
                        .map_err(|x| x.map("limited_world_width"))?;
                    self.limited_world_height
                        .encode(writer)
                        .map_err(|x| x.map("limited_world_height"))?;
                    self.is_nether_type
                        .encode(writer)
                        .map_err(|x| x.map("is_nether_type"))?;
                    self.is_force_experimental_gameplay
                        .encode(writer)
                        .map_err(|x| x.map("is_force_experimental_gameplay"))?;
                    self.level_id
                        .encode(writer)
                        .map_err(|x| x.map("level_id"))?;
                    self.world_name
                        .encode(writer)
                        .map_err(|x| x.map("world_name"))?;
                    self.premium_world_template_id
                        .encode(writer)
                        .map_err(|x| x.map("premium_world_template_id"))?;
                    self.is_trial
                        .encode(writer)
                        .map_err(|x| x.map("is_trial"))?;
                    self.is_movement_server_authoritative
                        .encode(writer)
                        .map_err(|x| x.map("is_movement_server_authoritative"))?;
                    self._unknown3
                        .encode(writer)
                        .map_err(|x| x.map("_unknown3"))?;
                    self._unknown4
                        .encode(writer)
                        .map_err(|x| x.map("_unknown4"))?;
                    self.current_tick
                        .encode(writer)
                        .map_err(|x| x.map("current_tick"))?;
                    self.enchantment_seed
                        .encode(writer)
                        .map_err(|x| x.map("enchantment_seed"))?;
                    self._unknown5
                        .encode(writer)
                        .map_err(|x| x.map("_unknown5"))?;
                    self.item_data_palette
                        .encode(writer)
                        .map_err(|x| x.map("item_data_palette"))?;
                    self.multiplayer_correlation_id
                        .encode(writer)
                        .map_err(|x| x.map("multiplayer_correlation_id"))?;
                    self.is_inventory_server_authoritative
                        .encode(writer)
                        .map_err(|x| x.map("is_inventory_server_authoritative"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for StartGamePacket {
                const PACKET_ID: u8 = 11u8;
            }
            impl StartGamePacket {
                pub fn new() -> Self {
                    Self {
                        entity_unique_id: VarLong(-1),
                        entity_runtime_id: UnsignedVarLong(1),
                        player_gamemode: VarInt(1),
                        spawn: (0., 0., 0.).into(),
                        yaw: Le(0.),
                        pitch: Le(0.),
                        seed: VarInt(150),
                        spawn_biome_type: Le(0),
                        custom_biome_name: "plains".to_owned(),
                        dimension: VarInt(0),
                        generator: VarInt(0),
                        world_game_mode: VarInt(1),
                        difficulty: VarInt(1),
                        world_spawn: (0, 1, 0).into(),
                        has_achievements_disabled: true,
                        day_cycle_stop_time: VarInt(0),
                        edu_edition_offer: VarInt(0),
                        has_edu_features_enabled: false,
                        edu_production_id: "".to_owned(),
                        rain_level: Le(0.0),
                        lightning_level: Le(0.0),
                        has_confirmed_platform_locked_content: false,
                        multiplayer_game: true,
                        broadcast_to_lan: false,
                        xbl_broadcast_intent: VarInt(0),
                        platform_broadcast_intent: VarInt(0),
                        commands_enabled: true,
                        is_texture_packs_required: false,
                        game_rules: VecIndexed::from(<[_]>::into_vec(box [
                            GameRule::ShowCoordinates(true),
                        ])),
                        _unknown1: Le(0),
                        _unknown2: false,
                        bonus_chest: false,
                        has_start_with_map_enabled: false,
                        permission_level: VarInt(1),
                        server_chunk_tick_range: Le(8),
                        has_locked_behavior_pack: false,
                        has_locked_resource_pack: false,
                        is_from_locked_world_template: false,
                        is_using_msa_gamertags_only: false,
                        is_from_world_template: false,
                        is_world_template_option_locked: false,
                        is_only_spawning_v1_villagers: false,
                        vanilla_version: crate::GAME_VERSION.to_owned(),
                        limited_world_width: 10000,
                        limited_world_height: 255,
                        is_nether_type: false,
                        is_force_experimental_gameplay: false,
                        level_id: "1".to_string(),
                        world_name: "Anvil_world".to_owned(),
                        premium_world_template_id: "".to_owned(),
                        is_trial: false,
                        is_movement_server_authoritative: false,
                        _unknown3: VarInt(0),
                        _unknown4: false,
                        current_tick: Le(120),
                        enchantment_seed: VarInt(548541185),
                        _unknown5: UnsignedVarInt(0),
                        item_data_palette: VecIndexed::from(::alloc::vec::Vec::new()),
                        multiplayer_correlation_id: "".to_owned(),
                        is_inventory_server_authoritative: false,
                    }
                }
            }
            #[allow(non_snake_case)]
            pub struct ItemDef {
                pub name: String,
                pub id: i16,
                pub oldData: Option<i16>,
                pub oldId: Option<i16>,
            }
            #[doc(hidden)]
            #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
            const _: () = {
                #[allow(rust_2018_idioms, clippy::useless_attribute)]
                extern crate serde as _serde;
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for ItemDef {
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __field1,
                            __field2,
                            __field3,
                            __ignore,
                        }
                        struct __FieldVisitor;
                        impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                            type Value = __Field;
                            fn expecting(
                                &self,
                                __formatter: &mut _serde::__private::Formatter,
                            ) -> _serde::__private::fmt::Result {
                                _serde::__private::Formatter::write_str(
                                    __formatter,
                                    "field identifier",
                                )
                            }
                            fn visit_u64<__E>(
                                self,
                                __value: u64,
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    0u64 => _serde::__private::Ok(__Field::__field0),
                                    1u64 => _serde::__private::Ok(__Field::__field1),
                                    2u64 => _serde::__private::Ok(__Field::__field2),
                                    3u64 => _serde::__private::Ok(__Field::__field3),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                            fn visit_str<__E>(
                                self,
                                __value: &str,
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    "name" => _serde::__private::Ok(__Field::__field0),
                                    "id" => _serde::__private::Ok(__Field::__field1),
                                    "oldData" => _serde::__private::Ok(__Field::__field2),
                                    "oldId" => _serde::__private::Ok(__Field::__field3),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                            fn visit_bytes<__E>(
                                self,
                                __value: &[u8],
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    b"name" => _serde::__private::Ok(__Field::__field0),
                                    b"id" => _serde::__private::Ok(__Field::__field1),
                                    b"oldData" => _serde::__private::Ok(__Field::__field2),
                                    b"oldId" => _serde::__private::Ok(__Field::__field3),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                        }
                        impl<'de> _serde::Deserialize<'de> for __Field {
                            #[inline]
                            fn deserialize<__D>(
                                __deserializer: __D,
                            ) -> _serde::__private::Result<Self, __D::Error>
                            where
                                __D: _serde::Deserializer<'de>,
                            {
                                _serde::Deserializer::deserialize_identifier(
                                    __deserializer,
                                    __FieldVisitor,
                                )
                            }
                        }
                        struct __Visitor<'de> {
                            marker: _serde::__private::PhantomData<ItemDef>,
                            lifetime: _serde::__private::PhantomData<&'de ()>,
                        }
                        impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                            type Value = ItemDef;
                            fn expecting(
                                &self,
                                __formatter: &mut _serde::__private::Formatter,
                            ) -> _serde::__private::fmt::Result {
                                _serde::__private::Formatter::write_str(
                                    __formatter,
                                    "struct ItemDef",
                                )
                            }
                            #[inline]
                            fn visit_seq<__A>(
                                self,
                                mut __seq: __A,
                            ) -> _serde::__private::Result<Self::Value, __A::Error>
                            where
                                __A: _serde::de::SeqAccess<'de>,
                            {
                                let __field0 =
                                    match match _serde::de::SeqAccess::next_element::<String>(
                                        &mut __seq,
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    } {
                                        _serde::__private::Some(__value) => __value,
                                        _serde::__private::None => {
                                            return _serde::__private::Err(
                                                _serde::de::Error::invalid_length(
                                                    0usize,
                                                    &"struct ItemDef with 4 elements",
                                                ),
                                            );
                                        }
                                    };
                                let __field1 = match match _serde::de::SeqAccess::next_element::<i16>(
                                    &mut __seq,
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                    _serde::__private::Some(__value) => __value,
                                    _serde::__private::None => {
                                        return _serde::__private::Err(
                                            _serde::de::Error::invalid_length(
                                                1usize,
                                                &"struct ItemDef with 4 elements",
                                            ),
                                        );
                                    }
                                };
                                let __field2 =
                                    match match _serde::de::SeqAccess::next_element::<Option<i16>>(
                                        &mut __seq,
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    } {
                                        _serde::__private::Some(__value) => __value,
                                        _serde::__private::None => {
                                            return _serde::__private::Err(
                                                _serde::de::Error::invalid_length(
                                                    2usize,
                                                    &"struct ItemDef with 4 elements",
                                                ),
                                            );
                                        }
                                    };
                                let __field3 =
                                    match match _serde::de::SeqAccess::next_element::<Option<i16>>(
                                        &mut __seq,
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    } {
                                        _serde::__private::Some(__value) => __value,
                                        _serde::__private::None => {
                                            return _serde::__private::Err(
                                                _serde::de::Error::invalid_length(
                                                    3usize,
                                                    &"struct ItemDef with 4 elements",
                                                ),
                                            );
                                        }
                                    };
                                _serde::__private::Ok(ItemDef {
                                    name: __field0,
                                    id: __field1,
                                    oldData: __field2,
                                    oldId: __field3,
                                })
                            }
                            #[inline]
                            fn visit_map<__A>(
                                self,
                                mut __map: __A,
                            ) -> _serde::__private::Result<Self::Value, __A::Error>
                            where
                                __A: _serde::de::MapAccess<'de>,
                            {
                                let mut __field0: _serde::__private::Option<String> =
                                    _serde::__private::None;
                                let mut __field1: _serde::__private::Option<i16> =
                                    _serde::__private::None;
                                let mut __field2: _serde::__private::Option<Option<i16>> =
                                    _serde::__private::None;
                                let mut __field3: _serde::__private::Option<Option<i16>> =
                                    _serde::__private::None;
                                while let _serde::__private::Some(__key) =
                                    match _serde::de::MapAccess::next_key::<__Field>(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                {
                                    match __key {
                                        __Field::__field0 => {
                                            if _serde::__private::Option::is_some(&__field0) {
                                                return _serde :: __private :: Err (< __A :: Error as _serde :: de :: Error > :: duplicate_field ("name")) ;
                                            }
                                            __field0 = _serde::__private::Some(
                                                match _serde::de::MapAccess::next_value::<String>(
                                                    &mut __map,
                                                ) {
                                                    _serde::__private::Ok(__val) => __val,
                                                    _serde::__private::Err(__err) => {
                                                        return _serde::__private::Err(__err);
                                                    }
                                                },
                                            );
                                        }
                                        __Field::__field1 => {
                                            if _serde::__private::Option::is_some(&__field1) {
                                                return _serde :: __private :: Err (< __A :: Error as _serde :: de :: Error > :: duplicate_field ("id")) ;
                                            }
                                            __field1 = _serde::__private::Some(
                                                match _serde::de::MapAccess::next_value::<i16>(
                                                    &mut __map,
                                                ) {
                                                    _serde::__private::Ok(__val) => __val,
                                                    _serde::__private::Err(__err) => {
                                                        return _serde::__private::Err(__err);
                                                    }
                                                },
                                            );
                                        }
                                        __Field::__field2 => {
                                            if _serde::__private::Option::is_some(&__field2) {
                                                return _serde :: __private :: Err (< __A :: Error as _serde :: de :: Error > :: duplicate_field ("oldData")) ;
                                            }
                                            __field2 = _serde::__private::Some(
                                                match _serde::de::MapAccess::next_value::<Option<i16>>(
                                                    &mut __map,
                                                ) {
                                                    _serde::__private::Ok(__val) => __val,
                                                    _serde::__private::Err(__err) => {
                                                        return _serde::__private::Err(__err);
                                                    }
                                                },
                                            );
                                        }
                                        __Field::__field3 => {
                                            if _serde::__private::Option::is_some(&__field3) {
                                                return _serde :: __private :: Err (< __A :: Error as _serde :: de :: Error > :: duplicate_field ("oldId")) ;
                                            }
                                            __field3 = _serde::__private::Some(
                                                match _serde::de::MapAccess::next_value::<Option<i16>>(
                                                    &mut __map,
                                                ) {
                                                    _serde::__private::Ok(__val) => __val,
                                                    _serde::__private::Err(__err) => {
                                                        return _serde::__private::Err(__err);
                                                    }
                                                },
                                            );
                                        }
                                        _ => {
                                            let _ = match _serde::de::MapAccess::next_value::<
                                                _serde::de::IgnoredAny,
                                            >(
                                                &mut __map
                                            ) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            };
                                        }
                                    }
                                }
                                let __field0 = match __field0 {
                                    _serde::__private::Some(__field0) => __field0,
                                    _serde::__private::None => {
                                        match _serde::__private::de::missing_field("name") {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    }
                                };
                                let __field1 = match __field1 {
                                    _serde::__private::Some(__field1) => __field1,
                                    _serde::__private::None => {
                                        match _serde::__private::de::missing_field("id") {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    }
                                };
                                let __field2 = match __field2 {
                                    _serde::__private::Some(__field2) => __field2,
                                    _serde::__private::None => {
                                        match _serde::__private::de::missing_field("oldData") {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    }
                                };
                                let __field3 = match __field3 {
                                    _serde::__private::Some(__field3) => __field3,
                                    _serde::__private::None => {
                                        match _serde::__private::de::missing_field("oldId") {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    }
                                };
                                _serde::__private::Ok(ItemDef {
                                    name: __field0,
                                    id: __field1,
                                    oldData: __field2,
                                    oldId: __field3,
                                })
                            }
                        }
                        const FIELDS: &'static [&'static str] = &["name", "id", "oldData", "oldId"];
                        _serde::Deserializer::deserialize_struct(
                            __deserializer,
                            "ItemDef",
                            FIELDS,
                            __Visitor {
                                marker: _serde::__private::PhantomData::<ItemDef>,
                                lifetime: _serde::__private::PhantomData,
                            },
                        )
                    }
                }
            };
            #[automatically_derived]
            #[allow(unused_qualifications)]
            #[allow(non_snake_case)]
            impl ::core::fmt::Debug for ItemDef {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        ItemDef {
                            name: ref __self_0_0,
                            id: ref __self_0_1,
                            oldData: ref __self_0_2,
                            oldId: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("ItemDef");
                            let _ = debug_trait_builder.field("name", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("id", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("oldData", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("oldId", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl MCPEPacketData for ItemDef {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, MCPEPacketDataError> {
                    Ok(Self {
                        name: reader.auto_decode().map_err(|x| x.map("name"))?,
                        id: reader.auto_decode().map_err(|x| x.map("id"))?,
                        oldData: None,
                        oldId: None,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), MCPEPacketDataError> {
                    self.name.encode(writer).map_err(|x| x.map("name"))?;
                    self.id.encode(writer).map_err(|x| x.map("id"))?;
                    writer.write(0).map_err(|x| x.map("empty_byte"))
                }
            }
        }
        pub use start_game::*;
        mod player_list {
            use crate::prelude::{
                ByteArray, Le, MCPEPacket, MCPEPacketData, MCPEPacketDataError, UnsignedVarInt,
                VarLong, VecIndexed,
            };
            use packet_derive::MCPEPacketDataAuto;
            pub struct PlayerListPlayer {
                uuid: Le<u128>,
                entity_id: VarLong,
                name: String,
                xbox_user_id: String,
                platform_chat_id: String,
                build_platform: Le<i32>,
                skin: Skin,
                is_teacher: bool,
                is_host: bool,
            }
            impl crate::traits::MCPEPacketData for PlayerListPlayer {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        uuid: reader.auto_decode().map_err(|x| x.map("uuid"))?,
                        entity_id: reader.auto_decode().map_err(|x| x.map("entity_id"))?,
                        name: reader.auto_decode().map_err(|x| x.map("name"))?,
                        xbox_user_id: reader.auto_decode().map_err(|x| x.map("xbox_user_id"))?,
                        platform_chat_id: reader
                            .auto_decode()
                            .map_err(|x| x.map("platform_chat_id"))?,
                        build_platform: reader
                            .auto_decode()
                            .map_err(|x| x.map("build_platform"))?,
                        skin: reader.auto_decode().map_err(|x| x.map("skin"))?,
                        is_teacher: reader.auto_decode().map_err(|x| x.map("is_teacher"))?,
                        is_host: reader.auto_decode().map_err(|x| x.map("is_host"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.uuid.encode(writer).map_err(|x| x.map("uuid"))?;
                    self.entity_id
                        .encode(writer)
                        .map_err(|x| x.map("entity_id"))?;
                    self.name.encode(writer).map_err(|x| x.map("name"))?;
                    self.xbox_user_id
                        .encode(writer)
                        .map_err(|x| x.map("xbox_user_id"))?;
                    self.platform_chat_id
                        .encode(writer)
                        .map_err(|x| x.map("platform_chat_id"))?;
                    self.build_platform
                        .encode(writer)
                        .map_err(|x| x.map("build_platform"))?;
                    self.skin.encode(writer).map_err(|x| x.map("skin"))?;
                    self.is_teacher
                        .encode(writer)
                        .map_err(|x| x.map("is_teacher"))?;
                    self.is_host.encode(writer).map_err(|x| x.map("is_host"))?;
                    Ok(())
                }
            }
            pub struct Skin {
                skin_id: String,
                play_fab_id: String,
                skin_resource_patch: String,
                skin_data: Image,
                skin_animations: VecIndexed<SkinAnimation, Le<i32>>,
                cape_data: Image,
                geometry_data: String,
                animation_data: String,
                premium: bool,
                persona: bool,
                is_cape_on_classic: bool,
                cape_id: String,
                full_skin_id: String,
                arm_size: String,
                skin_color: String,
                persona_pieces: VecIndexed<PersonaPiece, Le<i32>>,
                persona_piece_tints: VecIndexed<PersonaPieceTint, Le<i32>>,
            }
            impl crate::traits::MCPEPacketData for Skin {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        skin_id: reader.auto_decode().map_err(|x| x.map("skin_id"))?,
                        play_fab_id: reader.auto_decode().map_err(|x| x.map("play_fab_id"))?,
                        skin_resource_patch: reader
                            .auto_decode()
                            .map_err(|x| x.map("skin_resource_patch"))?,
                        skin_data: reader.auto_decode().map_err(|x| x.map("skin_data"))?,
                        skin_animations: reader
                            .auto_decode()
                            .map_err(|x| x.map("skin_animations"))?,
                        cape_data: reader.auto_decode().map_err(|x| x.map("cape_data"))?,
                        geometry_data: reader.auto_decode().map_err(|x| x.map("geometry_data"))?,
                        animation_data: reader
                            .auto_decode()
                            .map_err(|x| x.map("animation_data"))?,
                        premium: reader.auto_decode().map_err(|x| x.map("premium"))?,
                        persona: reader.auto_decode().map_err(|x| x.map("persona"))?,
                        is_cape_on_classic: reader
                            .auto_decode()
                            .map_err(|x| x.map("is_cape_on_classic"))?,
                        cape_id: reader.auto_decode().map_err(|x| x.map("cape_id"))?,
                        full_skin_id: reader.auto_decode().map_err(|x| x.map("full_skin_id"))?,
                        arm_size: reader.auto_decode().map_err(|x| x.map("arm_size"))?,
                        skin_color: reader.auto_decode().map_err(|x| x.map("skin_color"))?,
                        persona_pieces: reader
                            .auto_decode()
                            .map_err(|x| x.map("persona_pieces"))?,
                        persona_piece_tints: reader
                            .auto_decode()
                            .map_err(|x| x.map("persona_piece_tints"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.skin_id.encode(writer).map_err(|x| x.map("skin_id"))?;
                    self.play_fab_id
                        .encode(writer)
                        .map_err(|x| x.map("play_fab_id"))?;
                    self.skin_resource_patch
                        .encode(writer)
                        .map_err(|x| x.map("skin_resource_patch"))?;
                    self.skin_data
                        .encode(writer)
                        .map_err(|x| x.map("skin_data"))?;
                    self.skin_animations
                        .encode(writer)
                        .map_err(|x| x.map("skin_animations"))?;
                    self.cape_data
                        .encode(writer)
                        .map_err(|x| x.map("cape_data"))?;
                    self.geometry_data
                        .encode(writer)
                        .map_err(|x| x.map("geometry_data"))?;
                    self.animation_data
                        .encode(writer)
                        .map_err(|x| x.map("animation_data"))?;
                    self.premium.encode(writer).map_err(|x| x.map("premium"))?;
                    self.persona.encode(writer).map_err(|x| x.map("persona"))?;
                    self.is_cape_on_classic
                        .encode(writer)
                        .map_err(|x| x.map("is_cape_on_classic"))?;
                    self.cape_id.encode(writer).map_err(|x| x.map("cape_id"))?;
                    self.full_skin_id
                        .encode(writer)
                        .map_err(|x| x.map("full_skin_id"))?;
                    self.arm_size
                        .encode(writer)
                        .map_err(|x| x.map("arm_size"))?;
                    self.skin_color
                        .encode(writer)
                        .map_err(|x| x.map("skin_color"))?;
                    self.persona_pieces
                        .encode(writer)
                        .map_err(|x| x.map("persona_pieces"))?;
                    self.persona_piece_tints
                        .encode(writer)
                        .map_err(|x| x.map("persona_piece_tints"))?;
                    Ok(())
                }
            }
            struct PersonaPiece {
                id: String,
                piece_type: String,
                pack_id: String,
                is_default: bool,
                product_id: String,
            }
            impl crate::traits::MCPEPacketData for PersonaPiece {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        id: reader.auto_decode().map_err(|x| x.map("id"))?,
                        piece_type: reader.auto_decode().map_err(|x| x.map("piece_type"))?,
                        pack_id: reader.auto_decode().map_err(|x| x.map("pack_id"))?,
                        is_default: reader.auto_decode().map_err(|x| x.map("is_default"))?,
                        product_id: reader.auto_decode().map_err(|x| x.map("product_id"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.id.encode(writer).map_err(|x| x.map("id"))?;
                    self.piece_type
                        .encode(writer)
                        .map_err(|x| x.map("piece_type"))?;
                    self.pack_id.encode(writer).map_err(|x| x.map("pack_id"))?;
                    self.is_default
                        .encode(writer)
                        .map_err(|x| x.map("is_default"))?;
                    self.product_id
                        .encode(writer)
                        .map_err(|x| x.map("product_id"))?;
                    Ok(())
                }
            }
            struct PersonaPieceTint {
                piece_type: String,
                colors: VecIndexed<String, Le<i32>>,
            }
            impl crate::traits::MCPEPacketData for PersonaPieceTint {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        piece_type: reader.auto_decode().map_err(|x| x.map("piece_type"))?,
                        colors: reader.auto_decode().map_err(|x| x.map("colors"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.piece_type
                        .encode(writer)
                        .map_err(|x| x.map("piece_type"))?;
                    self.colors.encode(writer).map_err(|x| x.map("colors"))?;
                    Ok(())
                }
            }
            struct SkinAnimation {
                image: Image,
                anim_type: Le<i32>,
                frames: Le<f32>,
                expression: Le<i32>,
            }
            impl crate::traits::MCPEPacketData for SkinAnimation {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        image: reader.auto_decode().map_err(|x| x.map("image"))?,
                        anim_type: reader.auto_decode().map_err(|x| x.map("anim_type"))?,
                        frames: reader.auto_decode().map_err(|x| x.map("frames"))?,
                        expression: reader.auto_decode().map_err(|x| x.map("expression"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.image.encode(writer).map_err(|x| x.map("image"))?;
                    self.anim_type
                        .encode(writer)
                        .map_err(|x| x.map("anim_type"))?;
                    self.frames.encode(writer).map_err(|x| x.map("frames"))?;
                    self.expression
                        .encode(writer)
                        .map_err(|x| x.map("expression"))?;
                    Ok(())
                }
            }
            struct Image {
                width: Le<i32>,
                height: Le<i32>,
                data: ByteArray,
            }
            impl crate::traits::MCPEPacketData for Image {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        width: reader.auto_decode().map_err(|x| x.map("width"))?,
                        height: reader.auto_decode().map_err(|x| x.map("height"))?,
                        data: reader.auto_decode().map_err(|x| x.map("data"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.width.encode(writer).map_err(|x| x.map("width"))?;
                    self.height.encode(writer).map_err(|x| x.map("height"))?;
                    self.data.encode(writer).map_err(|x| x.map("data"))?;
                    Ok(())
                }
            }
            pub enum PlayerListPacket {
                Add(VecIndexed<PlayerListPlayer, UnsignedVarInt>),
                Remove(VecIndexed<Le<u128>, UnsignedVarInt>),
            }
            impl MCPEPacket for PlayerListPacket {
                const PACKET_ID: u8 = 63;
            }
            impl MCPEPacketData for PlayerListPacket {
                fn decode(
                    reader: &mut impl crate::prelude::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    let id = reader.next()?;
                    match id {
                        0 => Ok({
                            let i: VecIndexed<PlayerListPlayer, UnsignedVarInt> =
                                <_>::decode(reader)?;
                            reader.skip(i.0.len());
                            Self::Add(i)
                        }),
                        1 => Ok(<_>::decode(reader)?),
                        _ => Err(MCPEPacketDataError::new(
                            "id(PlayerListPacket)",
                            "Invalid PlayerList id",
                        )),
                    }
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::prelude::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    match self {
                        PlayerListPacket::Add(a) => {
                            writer.write(0)?;
                            a.encode(writer)?;
                            writer.write_slice(&(0..a.len()).map(|_| 1).collect::<Vec<u8>>())?;
                            Ok(())
                        }
                        PlayerListPacket::Remove(a) => {
                            writer.write(1)?;
                            a.encode(writer)
                        }
                    }
                }
            }
        }
        pub use player_list::*;
        mod creative_content {
            use std::collections::HashMap;
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::prelude::ItemDef;
            use crate::prelude::{Le, UnsignedVarInt, VarInt, VecIndexed};
            pub struct CreativeContentPacket {
                pub inventory: VecIndexed<Slot, UnsignedVarInt>,
            }
            impl crate::traits::MCPEPacketData for CreativeContentPacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        inventory: reader.auto_decode().map_err(|x| x.map("inventory"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.inventory
                        .encode(writer)
                        .map_err(|x| x.map("inventory"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for CreativeContentPacket {
                const PACKET_ID: u8 = 145u8;
            }
            struct JsonItem {
                id: i32,
                damage: Option<i32>,
                nbt: Option<i32>,
            }
            #[doc(hidden)]
            #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
            const _: () = {
                #[allow(rust_2018_idioms, clippy::useless_attribute)]
                extern crate serde as _serde;
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for JsonItem {
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __field1,
                            __field2,
                            __ignore,
                        }
                        struct __FieldVisitor;
                        impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                            type Value = __Field;
                            fn expecting(
                                &self,
                                __formatter: &mut _serde::__private::Formatter,
                            ) -> _serde::__private::fmt::Result {
                                _serde::__private::Formatter::write_str(
                                    __formatter,
                                    "field identifier",
                                )
                            }
                            fn visit_u64<__E>(
                                self,
                                __value: u64,
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    0u64 => _serde::__private::Ok(__Field::__field0),
                                    1u64 => _serde::__private::Ok(__Field::__field1),
                                    2u64 => _serde::__private::Ok(__Field::__field2),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                            fn visit_str<__E>(
                                self,
                                __value: &str,
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    "id" => _serde::__private::Ok(__Field::__field0),
                                    "damage" => _serde::__private::Ok(__Field::__field1),
                                    "nbt" => _serde::__private::Ok(__Field::__field2),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                            fn visit_bytes<__E>(
                                self,
                                __value: &[u8],
                            ) -> _serde::__private::Result<Self::Value, __E>
                            where
                                __E: _serde::de::Error,
                            {
                                match __value {
                                    b"id" => _serde::__private::Ok(__Field::__field0),
                                    b"damage" => _serde::__private::Ok(__Field::__field1),
                                    b"nbt" => _serde::__private::Ok(__Field::__field2),
                                    _ => _serde::__private::Ok(__Field::__ignore),
                                }
                            }
                        }
                        impl<'de> _serde::Deserialize<'de> for __Field {
                            #[inline]
                            fn deserialize<__D>(
                                __deserializer: __D,
                            ) -> _serde::__private::Result<Self, __D::Error>
                            where
                                __D: _serde::Deserializer<'de>,
                            {
                                _serde::Deserializer::deserialize_identifier(
                                    __deserializer,
                                    __FieldVisitor,
                                )
                            }
                        }
                        struct __Visitor<'de> {
                            marker: _serde::__private::PhantomData<JsonItem>,
                            lifetime: _serde::__private::PhantomData<&'de ()>,
                        }
                        impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                            type Value = JsonItem;
                            fn expecting(
                                &self,
                                __formatter: &mut _serde::__private::Formatter,
                            ) -> _serde::__private::fmt::Result {
                                _serde::__private::Formatter::write_str(
                                    __formatter,
                                    "struct JsonItem",
                                )
                            }
                            #[inline]
                            fn visit_seq<__A>(
                                self,
                                mut __seq: __A,
                            ) -> _serde::__private::Result<Self::Value, __A::Error>
                            where
                                __A: _serde::de::SeqAccess<'de>,
                            {
                                let __field0 = match match _serde::de::SeqAccess::next_element::<i32>(
                                    &mut __seq,
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                    _serde::__private::Some(__value) => __value,
                                    _serde::__private::None => {
                                        return _serde::__private::Err(
                                            _serde::de::Error::invalid_length(
                                                0usize,
                                                &"struct JsonItem with 3 elements",
                                            ),
                                        );
                                    }
                                };
                                let __field1 =
                                    match match _serde::de::SeqAccess::next_element::<Option<i32>>(
                                        &mut __seq,
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    } {
                                        _serde::__private::Some(__value) => __value,
                                        _serde::__private::None => {
                                            return _serde::__private::Err(
                                                _serde::de::Error::invalid_length(
                                                    1usize,
                                                    &"struct JsonItem with 3 elements",
                                                ),
                                            );
                                        }
                                    };
                                let __field2 =
                                    match match _serde::de::SeqAccess::next_element::<Option<i32>>(
                                        &mut __seq,
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    } {
                                        _serde::__private::Some(__value) => __value,
                                        _serde::__private::None => {
                                            return _serde::__private::Err(
                                                _serde::de::Error::invalid_length(
                                                    2usize,
                                                    &"struct JsonItem with 3 elements",
                                                ),
                                            );
                                        }
                                    };
                                _serde::__private::Ok(JsonItem {
                                    id: __field0,
                                    damage: __field1,
                                    nbt: __field2,
                                })
                            }
                            #[inline]
                            fn visit_map<__A>(
                                self,
                                mut __map: __A,
                            ) -> _serde::__private::Result<Self::Value, __A::Error>
                            where
                                __A: _serde::de::MapAccess<'de>,
                            {
                                let mut __field0: _serde::__private::Option<i32> =
                                    _serde::__private::None;
                                let mut __field1: _serde::__private::Option<Option<i32>> =
                                    _serde::__private::None;
                                let mut __field2: _serde::__private::Option<Option<i32>> =
                                    _serde::__private::None;
                                while let _serde::__private::Some(__key) =
                                    match _serde::de::MapAccess::next_key::<__Field>(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                {
                                    match __key {
                                        __Field::__field0 => {
                                            if _serde::__private::Option::is_some(&__field0) {
                                                return _serde :: __private :: Err (< __A :: Error as _serde :: de :: Error > :: duplicate_field ("id")) ;
                                            }
                                            __field0 = _serde::__private::Some(
                                                match _serde::de::MapAccess::next_value::<i32>(
                                                    &mut __map,
                                                ) {
                                                    _serde::__private::Ok(__val) => __val,
                                                    _serde::__private::Err(__err) => {
                                                        return _serde::__private::Err(__err);
                                                    }
                                                },
                                            );
                                        }
                                        __Field::__field1 => {
                                            if _serde::__private::Option::is_some(&__field1) {
                                                return _serde :: __private :: Err (< __A :: Error as _serde :: de :: Error > :: duplicate_field ("damage")) ;
                                            }
                                            __field1 = _serde::__private::Some(
                                                match _serde::de::MapAccess::next_value::<Option<i32>>(
                                                    &mut __map,
                                                ) {
                                                    _serde::__private::Ok(__val) => __val,
                                                    _serde::__private::Err(__err) => {
                                                        return _serde::__private::Err(__err);
                                                    }
                                                },
                                            );
                                        }
                                        __Field::__field2 => {
                                            if _serde::__private::Option::is_some(&__field2) {
                                                return _serde :: __private :: Err (< __A :: Error as _serde :: de :: Error > :: duplicate_field ("nbt")) ;
                                            }
                                            __field2 = _serde::__private::Some(
                                                match _serde::de::MapAccess::next_value::<Option<i32>>(
                                                    &mut __map,
                                                ) {
                                                    _serde::__private::Ok(__val) => __val,
                                                    _serde::__private::Err(__err) => {
                                                        return _serde::__private::Err(__err);
                                                    }
                                                },
                                            );
                                        }
                                        _ => {
                                            let _ = match _serde::de::MapAccess::next_value::<
                                                _serde::de::IgnoredAny,
                                            >(
                                                &mut __map
                                            ) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            };
                                        }
                                    }
                                }
                                let __field0 = match __field0 {
                                    _serde::__private::Some(__field0) => __field0,
                                    _serde::__private::None => {
                                        match _serde::__private::de::missing_field("id") {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    }
                                };
                                let __field1 = match __field1 {
                                    _serde::__private::Some(__field1) => __field1,
                                    _serde::__private::None => {
                                        match _serde::__private::de::missing_field("damage") {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    }
                                };
                                let __field2 = match __field2 {
                                    _serde::__private::Some(__field2) => __field2,
                                    _serde::__private::None => {
                                        match _serde::__private::de::missing_field("nbt") {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        }
                                    }
                                };
                                _serde::__private::Ok(JsonItem {
                                    id: __field0,
                                    damage: __field1,
                                    nbt: __field2,
                                })
                            }
                        }
                        const FIELDS: &'static [&'static str] = &["id", "damage", "nbt"];
                        _serde::Deserializer::deserialize_struct(
                            __deserializer,
                            "JsonItem",
                            FIELDS,
                            __Visitor {
                                marker: _serde::__private::PhantomData::<JsonItem>,
                                lifetime: _serde::__private::PhantomData,
                            },
                        )
                    }
                }
            };
            impl Default for CreativeContentPacket {
                fn default() -> Self {
                    Self {
                        inventory: {
                            let object : Vec < JsonItem > = serde_json :: from_str ("[\r\n    {\r\n        \"id\": 5\r\n    },\r\n    {\r\n        \"id\": 5,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 5,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 5,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 5,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 5,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": -242\r\n    },\r\n    {\r\n        \"id\": -243\r\n    },\r\n    {\r\n        \"id\": 139\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 139,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": -277\r\n    },\r\n    {\r\n        \"id\": -297\r\n    },\r\n    {\r\n        \"id\": -278\r\n    },\r\n    {\r\n        \"id\": 85\r\n    },\r\n    {\r\n        \"id\": 85,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 85,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 85,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 85,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 85,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 113\r\n    },\r\n    {\r\n        \"id\": -256\r\n    },\r\n    {\r\n        \"id\": -257\r\n    },\r\n    {\r\n        \"id\": 107\r\n    },\r\n    {\r\n        \"id\": 183\r\n    },\r\n    {\r\n        \"id\": 184\r\n    },\r\n    {\r\n        \"id\": 185\r\n    },\r\n    {\r\n        \"id\": 187\r\n    },\r\n    {\r\n        \"id\": 186\r\n    },\r\n    {\r\n        \"id\": -258\r\n    },\r\n    {\r\n        \"id\": -259\r\n    },\r\n    {\r\n        \"id\": -180\r\n    },\r\n    {\r\n        \"id\": 67\r\n    },\r\n    {\r\n        \"id\": -179\r\n    },\r\n    {\r\n        \"id\": 53\r\n    },\r\n    {\r\n        \"id\": 134\r\n    },\r\n    {\r\n        \"id\": 135\r\n    },\r\n    {\r\n        \"id\": 136\r\n    },\r\n    {\r\n        \"id\": 163\r\n    },\r\n    {\r\n        \"id\": 164\r\n    },\r\n    {\r\n        \"id\": 109\r\n    },\r\n    {\r\n        \"id\": -175\r\n    },\r\n    {\r\n        \"id\": 128\r\n    },\r\n    {\r\n        \"id\": -177\r\n    },\r\n    {\r\n        \"id\": 180\r\n    },\r\n    {\r\n        \"id\": -176\r\n    },\r\n    {\r\n        \"id\": -169\r\n    },\r\n    {\r\n        \"id\": -172\r\n    },\r\n    {\r\n        \"id\": -170\r\n    },\r\n    {\r\n        \"id\": -173\r\n    },\r\n    {\r\n        \"id\": -171\r\n    },\r\n    {\r\n        \"id\": -174\r\n    },\r\n    {\r\n        \"id\": 108\r\n    },\r\n    {\r\n        \"id\": 114\r\n    },\r\n    {\r\n        \"id\": -184\r\n    },\r\n    {\r\n        \"id\": -178\r\n    },\r\n    {\r\n        \"id\": 156\r\n    },\r\n    {\r\n        \"id\": -185\r\n    },\r\n    {\r\n        \"id\": 203\r\n    },\r\n    {\r\n        \"id\": -2\r\n    },\r\n    {\r\n        \"id\": -3\r\n    },\r\n    {\r\n        \"id\": -4\r\n    },\r\n    {\r\n        \"id\": -254\r\n    },\r\n    {\r\n        \"id\": -255\r\n    },\r\n    {\r\n        \"id\": -276\r\n    },\r\n    {\r\n        \"id\": -292\r\n    },\r\n    {\r\n        \"id\": -275\r\n    },\r\n    {\r\n        \"id\": 324\r\n    },\r\n    {\r\n        \"id\": 427\r\n    },\r\n    {\r\n        \"id\": 428\r\n    },\r\n    {\r\n        \"id\": 429\r\n    },\r\n    {\r\n        \"id\": 430\r\n    },\r\n    {\r\n        \"id\": 431\r\n    },\r\n    {\r\n        \"id\": 330\r\n    },\r\n    {\r\n        \"id\": 755\r\n    },\r\n    {\r\n        \"id\": 756\r\n    },\r\n    {\r\n        \"id\": 96\r\n    },\r\n    {\r\n        \"id\": -149\r\n    },\r\n    {\r\n        \"id\": -146\r\n    },\r\n    {\r\n        \"id\": -148\r\n    },\r\n    {\r\n        \"id\": -145\r\n    },\r\n    {\r\n        \"id\": -147\r\n    },\r\n    {\r\n        \"id\": 167\r\n    },\r\n    {\r\n        \"id\": -246\r\n    },\r\n    {\r\n        \"id\": -247\r\n    },\r\n    {\r\n        \"id\": 101\r\n    },\r\n    {\r\n        \"id\": 758\r\n    },\r\n    {\r\n        \"id\": 20\r\n    },\r\n    {\r\n        \"id\": 241\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 241,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 102\r\n    },\r\n    {\r\n        \"id\": 160\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 160,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 65\r\n    },\r\n    {\r\n        \"id\": -165\r\n    },\r\n    {\r\n        \"id\": 44\r\n    },\r\n    {\r\n        \"id\": -166,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 44,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 182,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 158\r\n    },\r\n    {\r\n        \"id\": 158,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 158,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 158,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 158,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 158,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 44,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": -166\r\n    },\r\n    {\r\n        \"id\": 44,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": -166,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 182,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 182\r\n    },\r\n    {\r\n        \"id\": -166,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": -162,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": -162,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": -162,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": -162,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": -162,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": -162,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": -162,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 44,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 44,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 182,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": -162\r\n    },\r\n    {\r\n        \"id\": 44,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": -166,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 182,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 182,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 182,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 182,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": -264\r\n    },\r\n    {\r\n        \"id\": -265\r\n    },\r\n    {\r\n        \"id\": -282\r\n    },\r\n    {\r\n        \"id\": -293\r\n    },\r\n    {\r\n        \"id\": -284\r\n    },\r\n    {\r\n        \"id\": 45\r\n    },\r\n    {\r\n        \"id\": -302\r\n    },\r\n    {\r\n        \"id\": -303\r\n    },\r\n    {\r\n        \"id\": -304\r\n    },\r\n    {\r\n        \"id\": 98\r\n    },\r\n    {\r\n        \"id\": 98,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 98,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 98,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 206\r\n    },\r\n    {\r\n        \"id\": 168,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": -274\r\n    },\r\n    {\r\n        \"id\": -280\r\n    },\r\n    {\r\n        \"id\": -281\r\n    },\r\n    {\r\n        \"id\": -279\r\n    },\r\n    {\r\n        \"id\": 4\r\n    },\r\n    {\r\n        \"id\": 48\r\n    },\r\n    {\r\n        \"id\": -183\r\n    },\r\n    {\r\n        \"id\": 24\r\n    },\r\n    {\r\n        \"id\": 24,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 24,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 24,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 179\r\n    },\r\n    {\r\n        \"id\": 179,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 179,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 179,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 173\r\n    },\r\n    {\r\n        \"id\": -139\r\n    },\r\n    {\r\n        \"id\": 41\r\n    },\r\n    {\r\n        \"id\": 42\r\n    },\r\n    {\r\n        \"id\": 133\r\n    },\r\n    {\r\n        \"id\": 57\r\n    },\r\n    {\r\n        \"id\": 22\r\n    },\r\n    {\r\n        \"id\": 155\r\n    },\r\n    {\r\n        \"id\": 155,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 155,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 155,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 168\r\n    },\r\n    {\r\n        \"id\": 168,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 165\r\n    },\r\n    {\r\n        \"id\": -220\r\n    },\r\n    {\r\n        \"id\": -221\r\n    },\r\n    {\r\n        \"id\": 170\r\n    },\r\n    {\r\n        \"id\": -239\r\n    },\r\n    {\r\n        \"id\": 216\r\n    },\r\n    {\r\n        \"id\": 214\r\n    },\r\n    {\r\n        \"id\": -227\r\n    },\r\n    {\r\n        \"id\": 112\r\n    },\r\n    {\r\n        \"id\": 215\r\n    },\r\n    {\r\n        \"id\": -225\r\n    },\r\n    {\r\n        \"id\": -226\r\n    },\r\n    {\r\n        \"id\": -240\r\n    },\r\n    {\r\n        \"id\": -241\r\n    },\r\n    {\r\n        \"id\": -299\r\n    },\r\n    {\r\n        \"id\": -298\r\n    },\r\n    {\r\n        \"id\": -300\r\n    },\r\n    {\r\n        \"id\": -301\r\n    },\r\n    {\r\n        \"id\": -230\r\n    },\r\n    {\r\n        \"id\": -232\r\n    },\r\n    {\r\n        \"id\": -233\r\n    },\r\n    {\r\n        \"id\": -234\r\n    },\r\n    {\r\n        \"id\": -235\r\n    },\r\n    {\r\n        \"id\": -236\r\n    },\r\n    {\r\n        \"id\": -270\r\n    },\r\n    {\r\n        \"id\": -222\r\n    },\r\n    {\r\n        \"id\": 35\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 171\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 171,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 237\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 237,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 236\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 236,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 82\r\n    },\r\n    {\r\n        \"id\": 172\r\n    },\r\n    {\r\n        \"id\": 159\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 159,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 220\r\n    },\r\n    {\r\n        \"id\": 228\r\n    },\r\n    {\r\n        \"id\": 227\r\n    },\r\n    {\r\n        \"id\": 235\r\n    },\r\n    {\r\n        \"id\": 232\r\n    },\r\n    {\r\n        \"id\": 234\r\n    },\r\n    {\r\n        \"id\": 221\r\n    },\r\n    {\r\n        \"id\": 224\r\n    },\r\n    {\r\n        \"id\": 225\r\n    },\r\n    {\r\n        \"id\": 233\r\n    },\r\n    {\r\n        \"id\": 229\r\n    },\r\n    {\r\n        \"id\": 223\r\n    },\r\n    {\r\n        \"id\": 231\r\n    },\r\n    {\r\n        \"id\": 219\r\n    },\r\n    {\r\n        \"id\": 222\r\n    },\r\n    {\r\n        \"id\": 226\r\n    },\r\n    {\r\n        \"id\": 201\r\n    },\r\n    {\r\n        \"id\": 201,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 3\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 2\r\n    },\r\n    {\r\n        \"id\": 198\r\n    },\r\n    {\r\n        \"id\": 243\r\n    },\r\n    {\r\n        \"id\": 110\r\n    },\r\n    {\r\n        \"id\": 1\r\n    },\r\n    {\r\n        \"id\": 15\r\n    },\r\n    {\r\n        \"id\": 14\r\n    },\r\n    {\r\n        \"id\": 56\r\n    },\r\n    {\r\n        \"id\": 21\r\n    },\r\n    {\r\n        \"id\": 73\r\n    },\r\n    {\r\n        \"id\": 16\r\n    },\r\n    {\r\n        \"id\": 129\r\n    },\r\n    {\r\n        \"id\": 153\r\n    },\r\n    {\r\n        \"id\": -288\r\n    },\r\n    {\r\n        \"id\": -271\r\n    },\r\n    {\r\n        \"id\": 13\r\n    },\r\n    {\r\n        \"id\": 1,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 1,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 1,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": -273\r\n    },\r\n    {\r\n        \"id\": 1,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 1,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 1,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": -291\r\n    },\r\n    {\r\n        \"id\": 12\r\n    },\r\n    {\r\n        \"id\": 12,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 81\r\n    },\r\n    {\r\n        \"id\": 17\r\n    },\r\n    {\r\n        \"id\": -10\r\n    },\r\n    {\r\n        \"id\": 17,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": -5\r\n    },\r\n    {\r\n        \"id\": 17,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": -6\r\n    },\r\n    {\r\n        \"id\": 17,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": -7\r\n    },\r\n    {\r\n        \"id\": 162\r\n    },\r\n    {\r\n        \"id\": -8\r\n    },\r\n    {\r\n        \"id\": 162,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": -9\r\n    },\r\n    {\r\n        \"id\": -212\r\n    },\r\n    {\r\n        \"id\": -212,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": -212,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": -212,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": -212,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": -212,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": -212,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": -212,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": -212,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": -212,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": -212,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": -212,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 18\r\n    },\r\n    {\r\n        \"id\": 18,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 18,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 18,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 161\r\n    },\r\n    {\r\n        \"id\": 161,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 6\r\n    },\r\n    {\r\n        \"id\": 6,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 6,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 6,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 6,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 6,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": -218\r\n    },\r\n    {\r\n        \"id\": 295\r\n    },\r\n    {\r\n        \"id\": 361\r\n    },\r\n    {\r\n        \"id\": 362\r\n    },\r\n    {\r\n        \"id\": 458\r\n    },\r\n    {\r\n        \"id\": 296\r\n    },\r\n    {\r\n        \"id\": 457\r\n    },\r\n    {\r\n        \"id\": 392\r\n    },\r\n    {\r\n        \"id\": 394\r\n    },\r\n    {\r\n        \"id\": 391\r\n    },\r\n    {\r\n        \"id\": 396\r\n    },\r\n    {\r\n        \"id\": 260\r\n    },\r\n    {\r\n        \"id\": 322\r\n    },\r\n    {\r\n        \"id\": 466\r\n    },\r\n    {\r\n        \"id\": 103\r\n    },\r\n    {\r\n        \"id\": 360\r\n    },\r\n    {\r\n        \"id\": 382\r\n    },\r\n    {\r\n        \"id\": 477\r\n    },\r\n    {\r\n        \"id\": 86\r\n    },\r\n    {\r\n        \"id\": -155\r\n    },\r\n    {\r\n        \"id\": 91\r\n    },\r\n    {\r\n        \"id\": 736\r\n    },\r\n    {\r\n        \"id\": 31,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 175,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 31,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 175,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 760\r\n    },\r\n    {\r\n        \"id\": -131,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": -131,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": -131,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": -131\r\n    },\r\n    {\r\n        \"id\": -131,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": -131,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": -131,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": -131,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": -131,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": -131,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": -133,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": -133,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": -133,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": -133\r\n    },\r\n    {\r\n        \"id\": -133,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": -134,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": -134,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": -134,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": -134\r\n    },\r\n    {\r\n        \"id\": -134,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 335\r\n    },\r\n    {\r\n        \"id\": -130\r\n    },\r\n    {\r\n        \"id\": -223\r\n    },\r\n    {\r\n        \"id\": -224\r\n    },\r\n    {\r\n        \"id\": 37\r\n    },\r\n    {\r\n        \"id\": 38\r\n    },\r\n    {\r\n        \"id\": 38,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 38,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 38,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 38,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 38,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 38,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 38,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 38,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 38,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 38,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 175\r\n    },\r\n    {\r\n        \"id\": 175,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 175,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 175,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": -216\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 19\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 16\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 17\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 18\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 351\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 351,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 106\r\n    },\r\n    {\r\n        \"id\": -231\r\n    },\r\n    {\r\n        \"id\": -287\r\n    },\r\n    {\r\n        \"id\": 111\r\n    },\r\n    {\r\n        \"id\": 32\r\n    },\r\n    {\r\n        \"id\": -163\r\n    },\r\n    {\r\n        \"id\": 80\r\n    },\r\n    {\r\n        \"id\": 79\r\n    },\r\n    {\r\n        \"id\": 174\r\n    },\r\n    {\r\n        \"id\": -11\r\n    },\r\n    {\r\n        \"id\": 78\r\n    },\r\n    {\r\n        \"id\": 365\r\n    },\r\n    {\r\n        \"id\": 319\r\n    },\r\n    {\r\n        \"id\": 363\r\n    },\r\n    {\r\n        \"id\": 423\r\n    },\r\n    {\r\n        \"id\": 411\r\n    },\r\n    {\r\n        \"id\": 349\r\n    },\r\n    {\r\n        \"id\": 460\r\n    },\r\n    {\r\n        \"id\": 461\r\n    },\r\n    {\r\n        \"id\": 462\r\n    },\r\n    {\r\n        \"id\": 39\r\n    },\r\n    {\r\n        \"id\": 40\r\n    },\r\n    {\r\n        \"id\": -228\r\n    },\r\n    {\r\n        \"id\": -229\r\n    },\r\n    {\r\n        \"id\": 99,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 100,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 99,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 99\r\n    },\r\n    {\r\n        \"id\": 344\r\n    },\r\n    {\r\n        \"id\": 338\r\n    },\r\n    {\r\n        \"id\": 353\r\n    },\r\n    {\r\n        \"id\": 367\r\n    },\r\n    {\r\n        \"id\": 352\r\n    },\r\n    {\r\n        \"id\": 30\r\n    },\r\n    {\r\n        \"id\": 375\r\n    },\r\n    {\r\n        \"id\": 52\r\n    },\r\n    {\r\n        \"id\": 97\r\n    },\r\n    {\r\n        \"id\": 97,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 97,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 97,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 97,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 97,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 122\r\n    },\r\n    {\r\n        \"id\": -159\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 122\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 28\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 22\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 75\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 16\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 19\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 30\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 18\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 29\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 23\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 24\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 25\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 26\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 27\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 111\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 112\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 108\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 109\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 31\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 74\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 113\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 121\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 33\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 38\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 39\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 34\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 48\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 46\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 37\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 35\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 32\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 36\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 47\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 110\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 17\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 40\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 45\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 49\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 50\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 55\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 42\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 125\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 124\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 123\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 126\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 127\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 41\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 43\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 54\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 57\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 104\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 105\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 115\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 118\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 116\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 58\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 114\r\n    },\r\n    {\r\n        \"id\": 383,\r\n        \"damage\": 59\r\n    },\r\n    {\r\n        \"id\": 49\r\n    },\r\n    {\r\n        \"id\": -289\r\n    },\r\n    {\r\n        \"id\": 7\r\n    },\r\n    {\r\n        \"id\": 88\r\n    },\r\n    {\r\n        \"id\": 87\r\n    },\r\n    {\r\n        \"id\": 213\r\n    },\r\n    {\r\n        \"id\": 372\r\n    },\r\n    {\r\n        \"id\": 121\r\n    },\r\n    {\r\n        \"id\": 200\r\n    },\r\n    {\r\n        \"id\": 240\r\n    },\r\n    {\r\n        \"id\": 432\r\n    },\r\n    {\r\n        \"id\": 433\r\n    },\r\n    {\r\n        \"id\": 19\r\n    },\r\n    {\r\n        \"id\": 19,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": -132\r\n    },\r\n    {\r\n        \"id\": -132,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": -132,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": -132,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": -132,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": -132,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": -132,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": -132,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": -132,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": -132,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 298\r\n    },\r\n    {\r\n        \"id\": 302\r\n    },\r\n    {\r\n        \"id\": 306\r\n    },\r\n    {\r\n        \"id\": 314\r\n    },\r\n    {\r\n        \"id\": 310\r\n    },\r\n    {\r\n        \"id\": 748\r\n    },\r\n    {\r\n        \"id\": 299\r\n    },\r\n    {\r\n        \"id\": 303\r\n    },\r\n    {\r\n        \"id\": 307\r\n    },\r\n    {\r\n        \"id\": 315\r\n    },\r\n    {\r\n        \"id\": 311\r\n    },\r\n    {\r\n        \"id\": 749\r\n    },\r\n    {\r\n        \"id\": 300\r\n    },\r\n    {\r\n        \"id\": 304\r\n    },\r\n    {\r\n        \"id\": 308\r\n    },\r\n    {\r\n        \"id\": 316\r\n    },\r\n    {\r\n        \"id\": 312\r\n    },\r\n    {\r\n        \"id\": 750\r\n    },\r\n    {\r\n        \"id\": 301\r\n    },\r\n    {\r\n        \"id\": 305\r\n    },\r\n    {\r\n        \"id\": 309\r\n    },\r\n    {\r\n        \"id\": 317\r\n    },\r\n    {\r\n        \"id\": 313\r\n    },\r\n    {\r\n        \"id\": 751\r\n    },\r\n    {\r\n        \"id\": 268\r\n    },\r\n    {\r\n        \"id\": 272\r\n    },\r\n    {\r\n        \"id\": 267\r\n    },\r\n    {\r\n        \"id\": 283\r\n    },\r\n    {\r\n        \"id\": 276\r\n    },\r\n    {\r\n        \"id\": 743\r\n    },\r\n    {\r\n        \"id\": 271\r\n    },\r\n    {\r\n        \"id\": 275\r\n    },\r\n    {\r\n        \"id\": 258\r\n    },\r\n    {\r\n        \"id\": 286\r\n    },\r\n    {\r\n        \"id\": 279\r\n    },\r\n    {\r\n        \"id\": 746\r\n    },\r\n    {\r\n        \"id\": 270\r\n    },\r\n    {\r\n        \"id\": 274\r\n    },\r\n    {\r\n        \"id\": 257\r\n    },\r\n    {\r\n        \"id\": 285\r\n    },\r\n    {\r\n        \"id\": 278\r\n    },\r\n    {\r\n        \"id\": 745\r\n    },\r\n    {\r\n        \"id\": 269\r\n    },\r\n    {\r\n        \"id\": 273\r\n    },\r\n    {\r\n        \"id\": 256\r\n    },\r\n    {\r\n        \"id\": 284\r\n    },\r\n    {\r\n        \"id\": 277\r\n    },\r\n    {\r\n        \"id\": 744\r\n    },\r\n    {\r\n        \"id\": 290\r\n    },\r\n    {\r\n        \"id\": 291\r\n    },\r\n    {\r\n        \"id\": 292\r\n    },\r\n    {\r\n        \"id\": 294\r\n    },\r\n    {\r\n        \"id\": 293\r\n    },\r\n    {\r\n        \"id\": 747\r\n    },\r\n    {\r\n        \"id\": 261\r\n    },\r\n    {\r\n        \"id\": 471\r\n    },\r\n    {\r\n        \"id\": 262\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 16\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 17\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 18\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 19\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 20\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 21\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 22\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 23\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 24\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 25\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 26\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 27\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 28\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 29\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 30\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 31\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 32\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 33\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 34\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 35\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 36\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 37\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 38\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 39\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 40\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 41\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 42\r\n    },\r\n    {\r\n        \"id\": 262,\r\n        \"damage\": 43\r\n    },\r\n    {\r\n        \"id\": 513\r\n    },\r\n    {\r\n        \"id\": 366\r\n    },\r\n    {\r\n        \"id\": 320\r\n    },\r\n    {\r\n        \"id\": 364\r\n    },\r\n    {\r\n        \"id\": 424\r\n    },\r\n    {\r\n        \"id\": 412\r\n    },\r\n    {\r\n        \"id\": 350\r\n    },\r\n    {\r\n        \"id\": 463\r\n    },\r\n    {\r\n        \"id\": 297\r\n    },\r\n    {\r\n        \"id\": 282\r\n    },\r\n    {\r\n        \"id\": 459\r\n    },\r\n    {\r\n        \"id\": 413\r\n    },\r\n    {\r\n        \"id\": 393\r\n    },\r\n    {\r\n        \"id\": 357\r\n    },\r\n    {\r\n        \"id\": 400\r\n    },\r\n    {\r\n        \"id\": 354\r\n    },\r\n    {\r\n        \"id\": 464\r\n    },\r\n    {\r\n        \"id\": 346\r\n    },\r\n    {\r\n        \"id\": 398\r\n    },\r\n    {\r\n        \"id\": 757\r\n    },\r\n    {\r\n        \"id\": 332\r\n    },\r\n    {\r\n        \"id\": 359\r\n    },\r\n    {\r\n        \"id\": 259\r\n    },\r\n    {\r\n        \"id\": 420\r\n    },\r\n    {\r\n        \"id\": 347\r\n    },\r\n    {\r\n        \"id\": 345\r\n    },\r\n    {\r\n        \"id\": 395\r\n    },\r\n    {\r\n        \"id\": 395,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 329\r\n    },\r\n    {\r\n        \"id\": 416\r\n    },\r\n    {\r\n        \"id\": 417\r\n    },\r\n    {\r\n        \"id\": 418\r\n    },\r\n    {\r\n        \"id\": 419\r\n    },\r\n    {\r\n        \"id\": 455\r\n    },\r\n    {\r\n        \"id\": 469\r\n    },\r\n    {\r\n        \"id\": 444\r\n    },\r\n    {\r\n        \"id\": 450\r\n    },\r\n    {\r\n        \"id\": 374\r\n    },\r\n    {\r\n        \"id\": 384\r\n    },\r\n    {\r\n        \"id\": 373\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 16\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 17\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 18\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 19\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 20\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 21\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 22\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 23\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 24\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 25\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 26\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 27\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 28\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 29\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 30\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 31\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 32\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 33\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 34\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 35\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 36\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 37\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 38\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 39\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 40\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 41\r\n    },\r\n    {\r\n        \"id\": 373,\r\n        \"damage\": 42\r\n    },\r\n    {\r\n        \"id\": 438\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 16\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 17\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 18\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 19\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 20\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 21\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 22\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 23\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 24\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 25\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 26\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 27\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 28\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 29\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 30\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 31\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 32\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 33\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 34\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 35\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 36\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 37\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 38\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 39\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 40\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 41\r\n    },\r\n    {\r\n        \"id\": 438,\r\n        \"damage\": 42\r\n    },\r\n    {\r\n        \"id\": 441\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 16\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 17\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 18\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 19\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 20\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 21\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 22\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 23\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 24\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 25\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 26\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 27\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 28\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 29\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 30\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 31\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 32\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 33\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 34\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 35\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 36\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 37\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 38\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 39\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 40\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 41\r\n    },\r\n    {\r\n        \"id\": 441,\r\n        \"damage\": 42\r\n    },\r\n    {\r\n        \"id\": 280\r\n    },\r\n    {\r\n        \"id\": 355\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 50\r\n    },\r\n    {\r\n        \"id\": -268\r\n    },\r\n    {\r\n        \"id\": -156\r\n    },\r\n    {\r\n        \"id\": -208\r\n    },\r\n    {\r\n        \"id\": -269\r\n    },\r\n    {\r\n        \"id\": 58\r\n    },\r\n    {\r\n        \"id\": -200\r\n    },\r\n    {\r\n        \"id\": -201\r\n    },\r\n    {\r\n        \"id\": -202\r\n    },\r\n    {\r\n        \"id\": -219\r\n    },\r\n    {\r\n        \"id\": 720\r\n    },\r\n    {\r\n        \"id\": 801\r\n    },\r\n    {\r\n        \"id\": 61\r\n    },\r\n    {\r\n        \"id\": -196\r\n    },\r\n    {\r\n        \"id\": -198\r\n    },\r\n    {\r\n        \"id\": -272\r\n    },\r\n    {\r\n        \"id\": 379\r\n    },\r\n    {\r\n        \"id\": 145\r\n    },\r\n    {\r\n        \"id\": 145,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 145,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": -195\r\n    },\r\n    {\r\n        \"id\": 116\r\n    },\r\n    {\r\n        \"id\": 47\r\n    },\r\n    {\r\n        \"id\": -194\r\n    },\r\n    {\r\n        \"id\": 380\r\n    },\r\n    {\r\n        \"id\": -213\r\n    },\r\n    {\r\n        \"id\": 54\r\n    },\r\n    {\r\n        \"id\": 146\r\n    },\r\n    {\r\n        \"id\": 130\r\n    },\r\n    {\r\n        \"id\": -203\r\n    },\r\n    {\r\n        \"id\": 205\r\n    },\r\n    {\r\n        \"id\": 218\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 218,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 425\r\n    },\r\n    {\r\n        \"id\": 25\r\n    },\r\n    {\r\n        \"id\": 84\r\n    },\r\n    {\r\n        \"id\": 500\r\n    },\r\n    {\r\n        \"id\": 501\r\n    },\r\n    {\r\n        \"id\": 502\r\n    },\r\n    {\r\n        \"id\": 503\r\n    },\r\n    {\r\n        \"id\": 504\r\n    },\r\n    {\r\n        \"id\": 505\r\n    },\r\n    {\r\n        \"id\": 506\r\n    },\r\n    {\r\n        \"id\": 507\r\n    },\r\n    {\r\n        \"id\": 508\r\n    },\r\n    {\r\n        \"id\": 509\r\n    },\r\n    {\r\n        \"id\": 510\r\n    },\r\n    {\r\n        \"id\": 511\r\n    },\r\n    {\r\n        \"id\": 759\r\n    },\r\n    {\r\n        \"id\": 348\r\n    },\r\n    {\r\n        \"id\": 89\r\n    },\r\n    {\r\n        \"id\": 123\r\n    },\r\n    {\r\n        \"id\": 169\r\n    },\r\n    {\r\n        \"id\": 323\r\n    },\r\n    {\r\n        \"id\": 472\r\n    },\r\n    {\r\n        \"id\": 473\r\n    },\r\n    {\r\n        \"id\": 474\r\n    },\r\n    {\r\n        \"id\": 475\r\n    },\r\n    {\r\n        \"id\": 476\r\n    },\r\n    {\r\n        \"id\": 753\r\n    },\r\n    {\r\n        \"id\": 754\r\n    },\r\n    {\r\n        \"id\": 321\r\n    },\r\n    {\r\n        \"id\": 389\r\n    },\r\n    {\r\n        \"id\": 737\r\n    },\r\n    {\r\n        \"id\": 390\r\n    },\r\n    {\r\n        \"id\": 281\r\n    },\r\n    {\r\n        \"id\": 325\r\n    },\r\n    {\r\n        \"id\": 325,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 325,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 325,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 325,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 325,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 325,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 325,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 397,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 397,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 397,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 397,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 397\r\n    },\r\n    {\r\n        \"id\": 397,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 138\r\n    },\r\n    {\r\n        \"id\": -206\r\n    },\r\n    {\r\n        \"id\": -157\r\n    },\r\n    {\r\n        \"id\": -197\r\n    },\r\n    {\r\n        \"id\": 120\r\n    },\r\n    {\r\n        \"id\": 263\r\n    },\r\n    {\r\n        \"id\": 263,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 264\r\n    },\r\n    {\r\n        \"id\": 452\r\n    },\r\n    {\r\n        \"id\": 265\r\n    },\r\n    {\r\n        \"id\": 752\r\n    },\r\n    {\r\n        \"id\": 742\r\n    },\r\n    {\r\n        \"id\": 371\r\n    },\r\n    {\r\n        \"id\": 266\r\n    },\r\n    {\r\n        \"id\": 388\r\n    },\r\n    {\r\n        \"id\": 406\r\n    },\r\n    {\r\n        \"id\": 337\r\n    },\r\n    {\r\n        \"id\": 336\r\n    },\r\n    {\r\n        \"id\": 405\r\n    },\r\n    {\r\n        \"id\": 409\r\n    },\r\n    {\r\n        \"id\": 422\r\n    },\r\n    {\r\n        \"id\": 465\r\n    },\r\n    {\r\n        \"id\": 467\r\n    },\r\n    {\r\n        \"id\": 468\r\n    },\r\n    {\r\n        \"id\": 470\r\n    },\r\n    {\r\n        \"id\": 287\r\n    },\r\n    {\r\n        \"id\": 288\r\n    },\r\n    {\r\n        \"id\": 318\r\n    },\r\n    {\r\n        \"id\": 289\r\n    },\r\n    {\r\n        \"id\": 334\r\n    },\r\n    {\r\n        \"id\": 415\r\n    },\r\n    {\r\n        \"id\": 414\r\n    },\r\n    {\r\n        \"id\": 385\r\n    },\r\n    {\r\n        \"id\": 369\r\n    },\r\n    {\r\n        \"id\": 377\r\n    },\r\n    {\r\n        \"id\": 378\r\n    },\r\n    {\r\n        \"id\": 376\r\n    },\r\n    {\r\n        \"id\": 437\r\n    },\r\n    {\r\n        \"id\": 445\r\n    },\r\n    {\r\n        \"id\": 370\r\n    },\r\n    {\r\n        \"id\": 341\r\n    },\r\n    {\r\n        \"id\": 368\r\n    },\r\n    {\r\n        \"id\": 381\r\n    },\r\n    {\r\n        \"id\": 399\r\n    },\r\n    {\r\n        \"id\": 208\r\n    },\r\n    {\r\n        \"id\": 426\r\n    },\r\n    {\r\n        \"id\": 339\r\n    },\r\n    {\r\n        \"id\": 340\r\n    },\r\n    {\r\n        \"id\": 386\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAAAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZAAAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZAAAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBAACAgBpZAAAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAEAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZAEAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZAEAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBAACAgBpZAEAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZAIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZAIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBAACAgBpZAIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAMAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZAMAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZAMAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBAACAgBpZAMAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAQAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZAQAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZAQAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBAACAgBpZAQAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAUAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZAUAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZAUAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAYAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZAYAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZAYAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAcAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZAcAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZAcAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAgAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAkAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZAkAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZAkAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBAACAgBpZAkAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBQACAgBpZAkAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAoAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZAoAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZAoAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBAACAgBpZAoAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBQACAgBpZAoAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAsAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZAsAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZAsAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBAACAgBpZAsAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBQACAgBpZAsAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZAwAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZAwAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZA0AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZA0AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZA4AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZA4AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZA4AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZA8AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZA8AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZA8AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBAACAgBpZA8AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBQACAgBpZA8AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBAAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBEAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZBEAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZBEAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZBIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZBIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBMAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZBMAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZBMAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBAACAgBpZBMAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBQACAgBpZBMAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBQAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZBQAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBUAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBYAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBcAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZBcAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZBcAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBgAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZBgAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZBgAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBkAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZBkAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBoAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBsAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZBwAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZB0AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZB0AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZB0AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBAACAgBpZB0AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBQACAgBpZB0AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZB4AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZB4AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZB4AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZB8AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZB8AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZB8AAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZCAAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZCEAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZCIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZCIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZCIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsBAACAgBpZCIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZCMAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZCMAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZCMAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAQACAgBpZCQAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAgACAgBpZCQAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 403,\r\n        \"nbt_b64\": \"CgAACQQAZW5jaAoBAAAAAgMAbHZsAwACAgBpZCQAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 333\r\n    },\r\n    {\r\n        \"id\": 333,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 333,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 333,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 333,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 333,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 66\r\n    },\r\n    {\r\n        \"id\": 27\r\n    },\r\n    {\r\n        \"id\": 28\r\n    },\r\n    {\r\n        \"id\": 126\r\n    },\r\n    {\r\n        \"id\": 328\r\n    },\r\n    {\r\n        \"id\": 342\r\n    },\r\n    {\r\n        \"id\": 408\r\n    },\r\n    {\r\n        \"id\": 407\r\n    },\r\n    {\r\n        \"id\": 331\r\n    },\r\n    {\r\n        \"id\": 152\r\n    },\r\n    {\r\n        \"id\": 76\r\n    },\r\n    {\r\n        \"id\": 69\r\n    },\r\n    {\r\n        \"id\": 143\r\n    },\r\n    {\r\n        \"id\": -144\r\n    },\r\n    {\r\n        \"id\": -141\r\n    },\r\n    {\r\n        \"id\": -143\r\n    },\r\n    {\r\n        \"id\": -140\r\n    },\r\n    {\r\n        \"id\": -142\r\n    },\r\n    {\r\n        \"id\": 77\r\n    },\r\n    {\r\n        \"id\": -260\r\n    },\r\n    {\r\n        \"id\": -261\r\n    },\r\n    {\r\n        \"id\": -296\r\n    },\r\n    {\r\n        \"id\": 131\r\n    },\r\n    {\r\n        \"id\": 72\r\n    },\r\n    {\r\n        \"id\": -154\r\n    },\r\n    {\r\n        \"id\": -151\r\n    },\r\n    {\r\n        \"id\": -153\r\n    },\r\n    {\r\n        \"id\": -150\r\n    },\r\n    {\r\n        \"id\": -152\r\n    },\r\n    {\r\n        \"id\": -262\r\n    },\r\n    {\r\n        \"id\": -263\r\n    },\r\n    {\r\n        \"id\": 70\r\n    },\r\n    {\r\n        \"id\": 147\r\n    },\r\n    {\r\n        \"id\": 148\r\n    },\r\n    {\r\n        \"id\": -295\r\n    },\r\n    {\r\n        \"id\": 251\r\n    },\r\n    {\r\n        \"id\": 151\r\n    },\r\n    {\r\n        \"id\": 356\r\n    },\r\n    {\r\n        \"id\": 404\r\n    },\r\n    {\r\n        \"id\": 410\r\n    },\r\n    {\r\n        \"id\": 125,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 23,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 33,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 29,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 46\r\n    },\r\n    {\r\n        \"id\": 421\r\n    },\r\n    {\r\n        \"id\": -204\r\n    },\r\n    {\r\n        \"id\": 446\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 8\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 7\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 15\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 12\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 14\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 13\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 9\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 11\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 10\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 446,\r\n        \"damage\": 15,\r\n        \"nbt_b64\": \"CgAAAwQAVHlwZQEAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 434\r\n    },\r\n    {\r\n        \"id\": 434,\r\n        \"damage\": 1\r\n    },\r\n    {\r\n        \"id\": 434,\r\n        \"damage\": 2\r\n    },\r\n    {\r\n        \"id\": 434,\r\n        \"damage\": 3\r\n    },\r\n    {\r\n        \"id\": 434,\r\n        \"damage\": 4\r\n    },\r\n    {\r\n        \"id\": 434,\r\n        \"damage\": 5\r\n    },\r\n    {\r\n        \"id\": 434,\r\n        \"damage\": 6\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMAAAAAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAAAAEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAACAEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAABwEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAADwEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAADAEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAADgEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAAAQEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAABAEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAABQEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAADQEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAACQEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAAAwEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAACwEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAACgEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAAAgEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 401,\r\n        \"nbt_b64\": \"CgAACgkARmlyZXdvcmtzAQYARmxpZ2h0AQkKAEV4cGxvc2lvbnMKAQAAAAcNAEZpcmV3b3JrQ29sb3IBAAAABgEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAAA\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3IhHR3/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAAAAEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 8,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3JST0f/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAACAEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 7,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3KXnZ3/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAABwEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 15,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3Lw8PD/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAADwEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 12,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3Laszr/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAADAEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 14,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3IdgPn/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAADgEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 1,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3ImLrD/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAAAQEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 4,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3KqRDz/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAABAEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 5,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3K4Mon/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAABQEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 13,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3K9Tsf/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAADQEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 9,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3Kqi/P/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAACQEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 3,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3IyVIP/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAAAwEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 11,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3I92P7/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAACwEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 10,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3Ifx4D/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAACgEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 2,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3IWfF7/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAAAgEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    },\r\n    {\r\n        \"id\": 402,\r\n        \"damage\": 6,\r\n        \"nbt_b64\": \"CgAAAwsAY3VzdG9tQ29sb3KcnBb/Cg0ARmlyZXdvcmtzSXRlbQcNAEZpcmV3b3JrQ29sb3IBAAAABgEMAEZpcmV3b3JrVHlwZQAHDABGaXJld29ya0ZhZGUAAAAAAQ0ARmlyZXdvcmtUcmFpbAABDwBGaXJld29ya0ZsaWNrZXIAAAA=\"\r\n    }\r\n]") . unwrap () ;
                            let palette : Vec < ItemDef > = serde_json :: from_str ("[\r\n    {\r\n        \"oldData\": 4,\r\n        \"name\": \"minecraft:acacia_boat\",\r\n        \"id\": 377,\r\n        \"oldId\": 333\r\n    },\r\n    {\r\n        \"name\": \"minecraft:acacia_button\",\r\n        \"id\": -140,\r\n        \"oldId\": -140\r\n    },\r\n    {\r\n        \"name\": \"minecraft:acacia_door\",\r\n        \"id\": 546,\r\n        \"oldId\": 430\r\n    },\r\n    {\r\n        \"name\": \"minecraft:acacia_fence_gate\",\r\n        \"id\": 187,\r\n        \"oldId\": 187\r\n    },\r\n    {\r\n        \"name\": \"minecraft:acacia_pressure_plate\",\r\n        \"id\": -150,\r\n        \"oldId\": -150\r\n    },\r\n    {\r\n        \"name\": \"minecraft:acacia_sign\",\r\n        \"id\": 569,\r\n        \"oldId\": 475\r\n    },\r\n    {\r\n        \"name\": \"minecraft:acacia_stairs\",\r\n        \"id\": 163,\r\n        \"oldId\": 163\r\n    },\r\n    {\r\n        \"name\": \"minecraft:acacia_standing_sign\",\r\n        \"id\": -190,\r\n        \"oldId\": -190\r\n    },\r\n    {\r\n        \"name\": \"minecraft:acacia_trapdoor\",\r\n        \"id\": -145,\r\n        \"oldId\": -145\r\n    },\r\n    {\r\n        \"name\": \"minecraft:acacia_wall_sign\",\r\n        \"id\": -191,\r\n        \"oldId\": -191\r\n    },\r\n    {\r\n        \"name\": \"minecraft:activator_rail\",\r\n        \"id\": 126,\r\n        \"oldId\": 126\r\n    },\r\n    {\r\n        \"name\": \"minecraft:agent_spawn_egg\",\r\n        \"id\": 485,\r\n        \"oldId\": 383,\r\n        \"oldData\": 56\r\n    },\r\n    {\r\n        \"name\": \"minecraft:air\",\r\n        \"id\": -158,\r\n        \"oldId\": -158\r\n    },\r\n    {\r\n        \"name\": \"minecraft:allow\",\r\n        \"id\": 210,\r\n        \"oldId\": 210\r\n    },\r\n    {\r\n        \"name\": \"minecraft:ancient_debris\",\r\n        \"id\": -271,\r\n        \"oldId\": -271\r\n    },\r\n    {\r\n        \"name\": \"minecraft:andesite_stairs\",\r\n        \"id\": -171,\r\n        \"oldId\": -171\r\n    },\r\n    {\r\n        \"name\": \"minecraft:anvil\",\r\n        \"id\": 145,\r\n        \"oldId\": 145\r\n    },\r\n    {\r\n        \"name\": \"minecraft:apple\",\r\n        \"id\": 257,\r\n        \"oldId\": 260\r\n    },\r\n    {\r\n        \"name\": \"minecraft:armor_stand\",\r\n        \"id\": 542,\r\n        \"oldId\": 425\r\n    },\r\n    {\r\n        \"name\": \"minecraft:arrow\",\r\n        \"id\": 301,\r\n        \"oldId\": 262\r\n    },\r\n    {\r\n        \"name\": \"minecraft:baked_potato\",\r\n        \"id\": 281,\r\n        \"oldId\": 393\r\n    },\r\n    {\r\n        \"name\": \"minecraft:balloon\",\r\n        \"id\": 588,\r\n        \"oldId\": 448\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bamboo\",\r\n        \"id\": -163,\r\n        \"oldId\": -163\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bamboo_sapling\",\r\n        \"id\": -164,\r\n        \"oldId\": -164\r\n    },\r\n    {\r\n        \"name\": \"minecraft:banner\",\r\n        \"id\": 557,\r\n        \"oldId\": 446\r\n    },\r\n    {\r\n        \"name\": \"minecraft:banner_pattern\",\r\n        \"id\": 614,\r\n        \"oldId\": 434\r\n    },\r\n    {\r\n        \"name\": \"minecraft:barrel\",\r\n        \"id\": -203,\r\n        \"oldId\": -203\r\n    },\r\n    {\r\n        \"name\": \"minecraft:barrier\",\r\n        \"id\": -161,\r\n        \"oldId\": -161\r\n    },\r\n    {\r\n        \"name\": \"minecraft:basalt\",\r\n        \"id\": -234,\r\n        \"oldId\": -234\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bat_spawn_egg\",\r\n        \"id\": 451,\r\n        \"oldId\": 383,\r\n        \"oldData\": 19\r\n    },\r\n    {\r\n        \"name\": \"minecraft:beacon\",\r\n        \"id\": 138,\r\n        \"oldId\": 138\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bed\",\r\n        \"id\": 416,\r\n        \"oldId\": 355\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bedrock\",\r\n        \"id\": 7,\r\n        \"oldId\": 7\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bee_nest\",\r\n        \"id\": -218,\r\n        \"oldId\": -218\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bee_spawn_egg\",\r\n        \"id\": 492,\r\n        \"oldId\": 383,\r\n        \"oldData\": 122\r\n    },\r\n    {\r\n        \"name\": \"minecraft:beef\",\r\n        \"id\": 273,\r\n        \"oldId\": 363\r\n    },\r\n    {\r\n        \"name\": \"minecraft:beehive\",\r\n        \"id\": -219,\r\n        \"oldId\": -219\r\n    },\r\n    {\r\n        \"name\": \"minecraft:beetroot\",\r\n        \"id\": 285,\r\n        \"oldId\": 457\r\n    },\r\n    {\r\n        \"name\": \"minecraft:beetroot_seeds\",\r\n        \"id\": 295,\r\n        \"oldId\": 458\r\n    },\r\n    {\r\n        \"name\": \"minecraft:beetroot_soup\",\r\n        \"id\": 286,\r\n        \"oldId\": 459\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bell\",\r\n        \"id\": -206,\r\n        \"oldId\": -206\r\n    },\r\n    {\r\n        \"oldData\": 2,\r\n        \"name\": \"minecraft:birch_boat\",\r\n        \"id\": 374,\r\n        \"oldId\": 333\r\n    },\r\n    {\r\n        \"name\": \"minecraft:birch_button\",\r\n        \"id\": -141,\r\n        \"oldId\": -141\r\n    },\r\n    {\r\n        \"name\": \"minecraft:birch_door\",\r\n        \"id\": 544,\r\n        \"oldId\": 428\r\n    },\r\n    {\r\n        \"name\": \"minecraft:birch_fence_gate\",\r\n        \"id\": 184,\r\n        \"oldId\": 184\r\n    },\r\n    {\r\n        \"name\": \"minecraft:birch_pressure_plate\",\r\n        \"id\": -151,\r\n        \"oldId\": -151\r\n    },\r\n    {\r\n        \"name\": \"minecraft:birch_sign\",\r\n        \"id\": 567,\r\n        \"oldId\": 473\r\n    },\r\n    {\r\n        \"name\": \"minecraft:birch_stairs\",\r\n        \"id\": 135,\r\n        \"oldId\": 135\r\n    },\r\n    {\r\n        \"name\": \"minecraft:birch_standing_sign\",\r\n        \"id\": -186,\r\n        \"oldId\": -186\r\n    },\r\n    {\r\n        \"name\": \"minecraft:birch_trapdoor\",\r\n        \"id\": -146,\r\n        \"oldId\": -146\r\n    },\r\n    {\r\n        \"name\": \"minecraft:birch_wall_sign\",\r\n        \"id\": -187,\r\n        \"oldId\": -187\r\n    },\r\n    {\r\n        \"oldData\": 16,\r\n        \"name\": \"minecraft:black_dye\",\r\n        \"id\": 393,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:black_glazed_terracotta\",\r\n        \"id\": 235,\r\n        \"oldId\": 235\r\n    },\r\n    {\r\n        \"name\": \"minecraft:blackstone\",\r\n        \"id\": -273,\r\n        \"oldId\": -273\r\n    },\r\n    {\r\n        \"name\": \"minecraft:blackstone_double_slab\",\r\n        \"id\": -283,\r\n        \"oldId\": -283\r\n    },\r\n    {\r\n        \"name\": \"minecraft:blackstone_slab\",\r\n        \"id\": -282,\r\n        \"oldId\": -282\r\n    },\r\n    {\r\n        \"name\": \"minecraft:blackstone_stairs\",\r\n        \"id\": -276,\r\n        \"oldId\": -276\r\n    },\r\n    {\r\n        \"name\": \"minecraft:blackstone_wall\",\r\n        \"id\": -277,\r\n        \"oldId\": -277\r\n    },\r\n    {\r\n        \"name\": \"minecraft:blast_furnace\",\r\n        \"id\": -196,\r\n        \"oldId\": -196\r\n    },\r\n    {\r\n        \"name\": \"minecraft:blaze_powder\",\r\n        \"id\": 427,\r\n        \"oldId\": 377\r\n    },\r\n    {\r\n        \"name\": \"minecraft:blaze_rod\",\r\n        \"id\": 421,\r\n        \"oldId\": 369\r\n    },\r\n    {\r\n        \"name\": \"minecraft:blaze_spawn_egg\",\r\n        \"id\": 454,\r\n        \"oldId\": 383,\r\n        \"oldData\": 43\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bleach\",\r\n        \"id\": 586,\r\n        \"oldId\": 451\r\n    },\r\n    {\r\n        \"oldData\": 18,\r\n        \"name\": \"minecraft:blue_dye\",\r\n        \"id\": 397,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:blue_glazed_terracotta\",\r\n        \"id\": 231,\r\n        \"oldId\": 231\r\n    },\r\n    {\r\n        \"name\": \"minecraft:blue_ice\",\r\n        \"id\": -11,\r\n        \"oldId\": -11\r\n    },\r\n    {\r\n        \"name\": \"minecraft:boat\",\r\n        \"id\": 612,\r\n        \"oldId\": 333\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bone\",\r\n        \"id\": 413,\r\n        \"oldId\": 352\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bone_block\",\r\n        \"id\": 216,\r\n        \"oldId\": 216\r\n    },\r\n    {\r\n        \"oldData\": 15,\r\n        \"name\": \"minecraft:bone_meal\",\r\n        \"id\": 409,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:book\",\r\n        \"id\": 385,\r\n        \"oldId\": 340\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bookshelf\",\r\n        \"id\": 47,\r\n        \"oldId\": 47\r\n    },\r\n    {\r\n        \"name\": \"minecraft:border_block\",\r\n        \"id\": 212,\r\n        \"oldId\": 212\r\n    },\r\n    {\r\n        \"oldData\": 5,\r\n        \"name\": \"minecraft:bordure_indented_banner_pattern\",\r\n        \"id\": 576,\r\n        \"oldId\": 434\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bow\",\r\n        \"id\": 300,\r\n        \"oldId\": 261\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bowl\",\r\n        \"id\": 321,\r\n        \"oldId\": 281\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bread\",\r\n        \"id\": 261,\r\n        \"oldId\": 297\r\n    },\r\n    {\r\n        \"name\": \"minecraft:brewing_stand\",\r\n        \"id\": 429,\r\n        \"oldId\": 379\r\n    },\r\n    {\r\n        \"name\": \"minecraft:brewingstandblock\",\r\n        \"id\": 117,\r\n        \"oldId\": 117\r\n    },\r\n    {\r\n        \"name\": \"minecraft:brick\",\r\n        \"id\": 381,\r\n        \"oldId\": 336\r\n    },\r\n    {\r\n        \"name\": \"minecraft:brick_block\",\r\n        \"id\": 45,\r\n        \"oldId\": 45\r\n    },\r\n    {\r\n        \"name\": \"minecraft:brick_stairs\",\r\n        \"id\": 108,\r\n        \"oldId\": 108\r\n    },\r\n    {\r\n        \"oldData\": 17,\r\n        \"name\": \"minecraft:brown_dye\",\r\n        \"id\": 396,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:brown_glazed_terracotta\",\r\n        \"id\": 232,\r\n        \"oldId\": 232\r\n    },\r\n    {\r\n        \"name\": \"minecraft:brown_mushroom\",\r\n        \"id\": 39,\r\n        \"oldId\": 39\r\n    },\r\n    {\r\n        \"name\": \"minecraft:brown_mushroom_block\",\r\n        \"id\": 99,\r\n        \"oldId\": 99\r\n    },\r\n    {\r\n        \"name\": \"minecraft:bubble_column\",\r\n        \"id\": -160,\r\n        \"oldId\": -160\r\n    },\r\n    {\r\n        \"oldData\": 0,\r\n        \"name\": \"minecraft:bucket\",\r\n        \"id\": 360,\r\n        \"oldId\": 325\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cactus\",\r\n        \"id\": 81,\r\n        \"oldId\": 81\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cake\",\r\n        \"id\": 415,\r\n        \"oldId\": 354\r\n    },\r\n    {\r\n        \"name\": \"minecraft:camera\",\r\n        \"id\": 583,\r\n        \"oldId\": 498\r\n    },\r\n    {\r\n        \"name\": \"minecraft:campfire\",\r\n        \"id\": 578,\r\n        \"oldId\": 720\r\n    },\r\n    {\r\n        \"name\": \"minecraft:carpet\",\r\n        \"id\": 171,\r\n        \"oldId\": 171\r\n    },\r\n    {\r\n        \"name\": \"minecraft:carrot\",\r\n        \"id\": 279,\r\n        \"oldId\": 391\r\n    },\r\n    {\r\n        \"name\": \"minecraft:carrot_on_a_stick\",\r\n        \"id\": 507,\r\n        \"oldId\": 398\r\n    },\r\n    {\r\n        \"name\": \"minecraft:carrots\",\r\n        \"id\": 141,\r\n        \"oldId\": 141\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cartography_table\",\r\n        \"id\": -200,\r\n        \"oldId\": -200\r\n    },\r\n    {\r\n        \"name\": \"minecraft:carved_pumpkin\",\r\n        \"id\": -155,\r\n        \"oldId\": -155\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cat_spawn_egg\",\r\n        \"id\": 486,\r\n        \"oldId\": 383,\r\n        \"oldData\": 75\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cauldron\",\r\n        \"id\": 430,\r\n        \"oldId\": 380\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cave_spider_spawn_egg\",\r\n        \"id\": 455,\r\n        \"oldId\": 383,\r\n        \"oldData\": 40\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chain\",\r\n        \"id\": 608,\r\n        \"oldId\": 758\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chain_command_block\",\r\n        \"id\": 189,\r\n        \"oldId\": 189\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chainmail_boots\",\r\n        \"id\": 342,\r\n        \"oldId\": 305\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chainmail_chestplate\",\r\n        \"id\": 340,\r\n        \"oldId\": 303\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chainmail_helmet\",\r\n        \"id\": 339,\r\n        \"oldId\": 302\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chainmail_leggings\",\r\n        \"id\": 341,\r\n        \"oldId\": 304\r\n    },\r\n    {\r\n        \"oldData\": 1,\r\n        \"name\": \"minecraft:charcoal\",\r\n        \"id\": 303,\r\n        \"oldId\": 263\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chemical_heat\",\r\n        \"id\": 192,\r\n        \"oldId\": 192\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chemistry_table\",\r\n        \"id\": 238,\r\n        \"oldId\": 238\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chest\",\r\n        \"id\": 54,\r\n        \"oldId\": 54\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chest_minecart\",\r\n        \"id\": 387,\r\n        \"oldId\": 342\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chicken\",\r\n        \"id\": 275,\r\n        \"oldId\": 365\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chicken_spawn_egg\",\r\n        \"id\": 433,\r\n        \"oldId\": 383,\r\n        \"oldData\": 10\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chiseled_nether_bricks\",\r\n        \"id\": -302,\r\n        \"oldId\": -302\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chiseled_polished_blackstone\",\r\n        \"id\": -279,\r\n        \"oldId\": -279\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chorus_flower\",\r\n        \"id\": 200,\r\n        \"oldId\": 200\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chorus_fruit\",\r\n        \"id\": 548,\r\n        \"oldId\": 432\r\n    },\r\n    {\r\n        \"name\": \"minecraft:chorus_plant\",\r\n        \"id\": 240,\r\n        \"oldId\": 240\r\n    },\r\n    {\r\n        \"name\": \"minecraft:clay\",\r\n        \"id\": 82,\r\n        \"oldId\": 82\r\n    },\r\n    {\r\n        \"name\": \"minecraft:clay_ball\",\r\n        \"id\": 382,\r\n        \"oldId\": 337\r\n    },\r\n    {\r\n        \"name\": \"minecraft:clock\",\r\n        \"id\": 391,\r\n        \"oldId\": 347\r\n    },\r\n    {\r\n        \"oldData\": 0,\r\n        \"name\": \"minecraft:coal\",\r\n        \"id\": 302,\r\n        \"oldId\": 263\r\n    },\r\n    {\r\n        \"name\": \"minecraft:coal_block\",\r\n        \"id\": 173,\r\n        \"oldId\": 173\r\n    },\r\n    {\r\n        \"name\": \"minecraft:coal_ore\",\r\n        \"id\": 16,\r\n        \"oldId\": 16\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cobblestone\",\r\n        \"id\": 4,\r\n        \"oldId\": 4\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cobblestone_wall\",\r\n        \"id\": 139,\r\n        \"oldId\": 139\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cocoa\",\r\n        \"id\": 127,\r\n        \"oldId\": 127\r\n    },\r\n    {\r\n        \"oldData\": 3,\r\n        \"name\": \"minecraft:cocoa_beans\",\r\n        \"id\": 410,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cod\",\r\n        \"id\": 264,\r\n        \"oldId\": 349\r\n    },\r\n    {\r\n        \"oldData\": 2,\r\n        \"name\": \"minecraft:cod_bucket\",\r\n        \"id\": 364,\r\n        \"oldId\": 325\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cod_spawn_egg\",\r\n        \"id\": 478,\r\n        \"oldId\": 383,\r\n        \"oldData\": 112\r\n    },\r\n    {\r\n        \"name\": \"minecraft:colored_torch_bp\",\r\n        \"id\": 204,\r\n        \"oldId\": 204\r\n    },\r\n    {\r\n        \"name\": \"minecraft:colored_torch_rg\",\r\n        \"id\": 202,\r\n        \"oldId\": 202\r\n    },\r\n    {\r\n        \"name\": \"minecraft:command_block\",\r\n        \"id\": 137,\r\n        \"oldId\": 137\r\n    },\r\n    {\r\n        \"name\": \"minecraft:command_block_minecart\",\r\n        \"id\": 553,\r\n        \"oldId\": 443\r\n    },\r\n    {\r\n        \"name\": \"minecraft:comparator\",\r\n        \"id\": 512,\r\n        \"oldId\": 404\r\n    },\r\n    {\r\n        \"name\": \"minecraft:compass\",\r\n        \"id\": 389,\r\n        \"oldId\": 345\r\n    },\r\n    {\r\n        \"name\": \"minecraft:composter\",\r\n        \"id\": -213,\r\n        \"oldId\": -213\r\n    },\r\n    {\r\n        \"name\": \"minecraft:compound\",\r\n        \"id\": 584,\r\n        \"oldId\": 499\r\n    },\r\n    {\r\n        \"name\": \"minecraft:concrete\",\r\n        \"id\": 236,\r\n        \"oldId\": 236\r\n    },\r\n    {\r\n        \"name\": \"minecraft:concrete_powder\",\r\n        \"id\": 237,\r\n        \"oldId\": 237\r\n    },\r\n    {\r\n        \"name\": \"minecraft:conduit\",\r\n        \"id\": -157,\r\n        \"oldId\": -157\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cooked_beef\",\r\n        \"id\": 274,\r\n        \"oldId\": 364\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cooked_chicken\",\r\n        \"id\": 276,\r\n        \"oldId\": 366\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cooked_cod\",\r\n        \"id\": 268,\r\n        \"oldId\": 350\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cooked_mutton\",\r\n        \"id\": 541,\r\n        \"oldId\": 424\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cooked_porkchop\",\r\n        \"id\": 263,\r\n        \"oldId\": 320\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cooked_rabbit\",\r\n        \"id\": 289,\r\n        \"oldId\": 412\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cooked_salmon\",\r\n        \"id\": 269,\r\n        \"oldId\": 463\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cookie\",\r\n        \"id\": 271,\r\n        \"oldId\": 357\r\n    },\r\n    {\r\n        \"name\": \"minecraft:coral\",\r\n        \"id\": -131,\r\n        \"oldId\": -131\r\n    },\r\n    {\r\n        \"name\": \"minecraft:coral_block\",\r\n        \"id\": -132,\r\n        \"oldId\": -132\r\n    },\r\n    {\r\n        \"name\": \"minecraft:coral_fan\",\r\n        \"id\": -133,\r\n        \"oldId\": -133\r\n    },\r\n    {\r\n        \"name\": \"minecraft:coral_fan_dead\",\r\n        \"id\": -134,\r\n        \"oldId\": -134\r\n    },\r\n    {\r\n        \"name\": \"minecraft:coral_fan_hang\",\r\n        \"id\": -135,\r\n        \"oldId\": -135\r\n    },\r\n    {\r\n        \"name\": \"minecraft:coral_fan_hang2\",\r\n        \"id\": -136,\r\n        \"oldId\": -136\r\n    },\r\n    {\r\n        \"name\": \"minecraft:coral_fan_hang3\",\r\n        \"id\": -137,\r\n        \"oldId\": -137\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cow_spawn_egg\",\r\n        \"id\": 434,\r\n        \"oldId\": 383,\r\n        \"oldData\": 11\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cracked_nether_bricks\",\r\n        \"id\": -303,\r\n        \"oldId\": -303\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cracked_polished_blackstone_bricks\",\r\n        \"id\": -280,\r\n        \"oldId\": -280\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crafting_table\",\r\n        \"id\": 58,\r\n        \"oldId\": 58\r\n    },\r\n    {\r\n        \"oldData\": 0,\r\n        \"name\": \"minecraft:creeper_banner_pattern\",\r\n        \"id\": 572,\r\n        \"oldId\": 434\r\n    },\r\n    {\r\n        \"name\": \"minecraft:creeper_spawn_egg\",\r\n        \"id\": 439,\r\n        \"oldId\": 383,\r\n        \"oldData\": 33\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_button\",\r\n        \"id\": -260,\r\n        \"oldId\": -260\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_door\",\r\n        \"id\": 605,\r\n        \"oldId\": 755\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_double_slab\",\r\n        \"id\": -266,\r\n        \"oldId\": -266\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_fence\",\r\n        \"id\": -256,\r\n        \"oldId\": -256\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_fence_gate\",\r\n        \"id\": -258,\r\n        \"oldId\": -258\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_fungus\",\r\n        \"id\": -228,\r\n        \"oldId\": -228\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_hyphae\",\r\n        \"id\": -299,\r\n        \"oldId\": -299\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_nylium\",\r\n        \"id\": -232,\r\n        \"oldId\": -232\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_planks\",\r\n        \"id\": -242,\r\n        \"oldId\": -242\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_pressure_plate\",\r\n        \"id\": -262,\r\n        \"oldId\": -262\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_roots\",\r\n        \"id\": -223,\r\n        \"oldId\": -223\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_sign\",\r\n        \"id\": 603,\r\n        \"oldId\": 753\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_slab\",\r\n        \"id\": -264,\r\n        \"oldId\": -264\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_stairs\",\r\n        \"id\": -254,\r\n        \"oldId\": -254\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_standing_sign\",\r\n        \"id\": -250,\r\n        \"oldId\": -250\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_stem\",\r\n        \"id\": -225,\r\n        \"oldId\": -225\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_trapdoor\",\r\n        \"id\": -246,\r\n        \"oldId\": -246\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crimson_wall_sign\",\r\n        \"id\": -252,\r\n        \"oldId\": -252\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crossbow\",\r\n        \"id\": 565,\r\n        \"oldId\": 471\r\n    },\r\n    {\r\n        \"name\": \"minecraft:crying_obsidian\",\r\n        \"id\": -289,\r\n        \"oldId\": -289\r\n    },\r\n    {\r\n        \"oldData\": 6,\r\n        \"name\": \"minecraft:cyan_dye\",\r\n        \"id\": 399,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:cyan_glazed_terracotta\",\r\n        \"id\": 229,\r\n        \"oldId\": 229\r\n    },\r\n    {\r\n        \"oldData\": 5,\r\n        \"name\": \"minecraft:dark_oak_boat\",\r\n        \"id\": 378,\r\n        \"oldId\": 333\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dark_oak_button\",\r\n        \"id\": -142,\r\n        \"oldId\": -142\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dark_oak_door\",\r\n        \"id\": 547,\r\n        \"oldId\": 431\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dark_oak_fence_gate\",\r\n        \"id\": 186,\r\n        \"oldId\": 186\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dark_oak_pressure_plate\",\r\n        \"id\": -152,\r\n        \"oldId\": -152\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dark_oak_sign\",\r\n        \"id\": 570,\r\n        \"oldId\": 476\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dark_oak_stairs\",\r\n        \"id\": 164,\r\n        \"oldId\": 164\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dark_oak_trapdoor\",\r\n        \"id\": -147,\r\n        \"oldId\": -147\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dark_prismarine_stairs\",\r\n        \"id\": -3,\r\n        \"oldId\": -3\r\n    },\r\n    {\r\n        \"name\": \"minecraft:darkoak_standing_sign\",\r\n        \"id\": -192,\r\n        \"oldId\": -192\r\n    },\r\n    {\r\n        \"name\": \"minecraft:darkoak_wall_sign\",\r\n        \"id\": -193,\r\n        \"oldId\": -193\r\n    },\r\n    {\r\n        \"name\": \"minecraft:daylight_detector\",\r\n        \"id\": 151,\r\n        \"oldId\": 151\r\n    },\r\n    {\r\n        \"name\": \"minecraft:daylight_detector_inverted\",\r\n        \"id\": 178,\r\n        \"oldId\": 178\r\n    },\r\n    {\r\n        \"name\": \"minecraft:deadbush\",\r\n        \"id\": 32,\r\n        \"oldId\": 32\r\n    },\r\n    {\r\n        \"name\": \"minecraft:debug_stick\",\r\n        \"id\": 580\r\n    },\r\n    {\r\n        \"name\": \"minecraft:deny\",\r\n        \"id\": 211,\r\n        \"oldId\": 211\r\n    },\r\n    {\r\n        \"name\": \"minecraft:detector_rail\",\r\n        \"id\": 28,\r\n        \"oldId\": 28\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond\",\r\n        \"id\": 304,\r\n        \"oldId\": 264\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond_axe\",\r\n        \"id\": 319,\r\n        \"oldId\": 279\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond_block\",\r\n        \"id\": 57,\r\n        \"oldId\": 57\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond_boots\",\r\n        \"id\": 350,\r\n        \"oldId\": 313\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond_chestplate\",\r\n        \"id\": 348,\r\n        \"oldId\": 311\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond_helmet\",\r\n        \"id\": 347,\r\n        \"oldId\": 310\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond_hoe\",\r\n        \"id\": 332,\r\n        \"oldId\": 293\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond_horse_armor\",\r\n        \"id\": 523,\r\n        \"oldId\": 419\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond_leggings\",\r\n        \"id\": 349,\r\n        \"oldId\": 312\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond_ore\",\r\n        \"id\": 56,\r\n        \"oldId\": 56\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond_pickaxe\",\r\n        \"id\": 318,\r\n        \"oldId\": 278\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond_shovel\",\r\n        \"id\": 317,\r\n        \"oldId\": 277\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diamond_sword\",\r\n        \"id\": 316,\r\n        \"oldId\": 276\r\n    },\r\n    {\r\n        \"name\": \"minecraft:diorite_stairs\",\r\n        \"id\": -170,\r\n        \"oldId\": -170\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dirt\",\r\n        \"id\": 3,\r\n        \"oldId\": 3\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dispenser\",\r\n        \"id\": 23,\r\n        \"oldId\": 23\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dolphin_spawn_egg\",\r\n        \"id\": 482,\r\n        \"oldId\": 383,\r\n        \"oldData\": 31\r\n    },\r\n    {\r\n        \"name\": \"minecraft:donkey_spawn_egg\",\r\n        \"id\": 463,\r\n        \"oldId\": 383,\r\n        \"oldData\": 24\r\n    },\r\n    {\r\n        \"name\": \"minecraft:double_plant\",\r\n        \"id\": 175,\r\n        \"oldId\": 175\r\n    },\r\n    {\r\n        \"name\": \"minecraft:double_stone_slab\",\r\n        \"id\": 44,\r\n        \"oldId\": 44\r\n    },\r\n    {\r\n        \"name\": \"minecraft:double_stone_slab2\",\r\n        \"id\": 182,\r\n        \"oldId\": 182\r\n    },\r\n    {\r\n        \"name\": \"minecraft:double_stone_slab3\",\r\n        \"id\": -162,\r\n        \"oldId\": -162\r\n    },\r\n    {\r\n        \"name\": \"minecraft:double_stone_slab4\",\r\n        \"id\": -166,\r\n        \"oldId\": -166\r\n    },\r\n    {\r\n        \"name\": \"minecraft:double_wooden_slab\",\r\n        \"id\": 157,\r\n        \"oldId\": 157\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dragon_breath\",\r\n        \"id\": 550,\r\n        \"oldId\": 437\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dragon_egg\",\r\n        \"id\": 122,\r\n        \"oldId\": 122\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dried_kelp\",\r\n        \"id\": 270,\r\n        \"oldId\": 464\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dried_kelp_block\",\r\n        \"id\": -139,\r\n        \"oldId\": -139\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dropper\",\r\n        \"id\": 125,\r\n        \"oldId\": 125\r\n    },\r\n    {\r\n        \"name\": \"minecraft:drowned_spawn_egg\",\r\n        \"id\": 481,\r\n        \"oldId\": 383,\r\n        \"oldData\": 110\r\n    },\r\n    {\r\n        \"name\": \"minecraft:dye\",\r\n        \"id\": 613,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:egg\",\r\n        \"id\": 388,\r\n        \"oldId\": 344\r\n    },\r\n    {\r\n        \"name\": \"minecraft:elder_guardian_spawn_egg\",\r\n        \"id\": 469,\r\n        \"oldId\": 383,\r\n        \"oldData\": 50\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_0\",\r\n        \"id\": 36,\r\n        \"oldId\": 36\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_1\",\r\n        \"id\": -12,\r\n        \"oldId\": -12\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_10\",\r\n        \"id\": -21,\r\n        \"oldId\": -21\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_100\",\r\n        \"id\": -111,\r\n        \"oldId\": -111\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_101\",\r\n        \"id\": -112,\r\n        \"oldId\": -112\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_102\",\r\n        \"id\": -113,\r\n        \"oldId\": -113\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_103\",\r\n        \"id\": -114,\r\n        \"oldId\": -114\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_104\",\r\n        \"id\": -115,\r\n        \"oldId\": -115\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_105\",\r\n        \"id\": -116,\r\n        \"oldId\": -116\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_106\",\r\n        \"id\": -117,\r\n        \"oldId\": -117\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_107\",\r\n        \"id\": -118,\r\n        \"oldId\": -118\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_108\",\r\n        \"id\": -119,\r\n        \"oldId\": -119\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_109\",\r\n        \"id\": -120,\r\n        \"oldId\": -120\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_11\",\r\n        \"id\": -22,\r\n        \"oldId\": -22\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_110\",\r\n        \"id\": -121,\r\n        \"oldId\": -121\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_111\",\r\n        \"id\": -122,\r\n        \"oldId\": -122\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_112\",\r\n        \"id\": -123,\r\n        \"oldId\": -123\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_113\",\r\n        \"id\": -124,\r\n        \"oldId\": -124\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_114\",\r\n        \"id\": -125,\r\n        \"oldId\": -125\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_115\",\r\n        \"id\": -126,\r\n        \"oldId\": -126\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_116\",\r\n        \"id\": -127,\r\n        \"oldId\": -127\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_117\",\r\n        \"id\": -128,\r\n        \"oldId\": -128\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_118\",\r\n        \"id\": -129,\r\n        \"oldId\": -129\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_12\",\r\n        \"id\": -23,\r\n        \"oldId\": -23\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_13\",\r\n        \"id\": -24,\r\n        \"oldId\": -24\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_14\",\r\n        \"id\": -25,\r\n        \"oldId\": -25\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_15\",\r\n        \"id\": -26,\r\n        \"oldId\": -26\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_16\",\r\n        \"id\": -27,\r\n        \"oldId\": -27\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_17\",\r\n        \"id\": -28,\r\n        \"oldId\": -28\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_18\",\r\n        \"id\": -29,\r\n        \"oldId\": -29\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_19\",\r\n        \"id\": -30,\r\n        \"oldId\": -30\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_2\",\r\n        \"id\": -13,\r\n        \"oldId\": -13\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_20\",\r\n        \"id\": -31,\r\n        \"oldId\": -31\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_21\",\r\n        \"id\": -32,\r\n        \"oldId\": -32\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_22\",\r\n        \"id\": -33,\r\n        \"oldId\": -33\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_23\",\r\n        \"id\": -34,\r\n        \"oldId\": -34\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_24\",\r\n        \"id\": -35,\r\n        \"oldId\": -35\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_25\",\r\n        \"id\": -36,\r\n        \"oldId\": -36\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_26\",\r\n        \"id\": -37,\r\n        \"oldId\": -37\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_27\",\r\n        \"id\": -38,\r\n        \"oldId\": -38\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_28\",\r\n        \"id\": -39,\r\n        \"oldId\": -39\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_29\",\r\n        \"id\": -40,\r\n        \"oldId\": -40\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_3\",\r\n        \"id\": -14,\r\n        \"oldId\": -14\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_30\",\r\n        \"id\": -41,\r\n        \"oldId\": -41\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_31\",\r\n        \"id\": -42,\r\n        \"oldId\": -42\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_32\",\r\n        \"id\": -43,\r\n        \"oldId\": -43\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_33\",\r\n        \"id\": -44,\r\n        \"oldId\": -44\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_34\",\r\n        \"id\": -45,\r\n        \"oldId\": -45\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_35\",\r\n        \"id\": -46,\r\n        \"oldId\": -46\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_36\",\r\n        \"id\": -47,\r\n        \"oldId\": -47\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_37\",\r\n        \"id\": -48,\r\n        \"oldId\": -48\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_38\",\r\n        \"id\": -49,\r\n        \"oldId\": -49\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_39\",\r\n        \"id\": -50,\r\n        \"oldId\": -50\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_4\",\r\n        \"id\": -15,\r\n        \"oldId\": -15\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_40\",\r\n        \"id\": -51,\r\n        \"oldId\": -51\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_41\",\r\n        \"id\": -52,\r\n        \"oldId\": -52\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_42\",\r\n        \"id\": -53,\r\n        \"oldId\": -53\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_43\",\r\n        \"id\": -54,\r\n        \"oldId\": -54\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_44\",\r\n        \"id\": -55,\r\n        \"oldId\": -55\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_45\",\r\n        \"id\": -56,\r\n        \"oldId\": -56\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_46\",\r\n        \"id\": -57,\r\n        \"oldId\": -57\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_47\",\r\n        \"id\": -58,\r\n        \"oldId\": -58\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_48\",\r\n        \"id\": -59,\r\n        \"oldId\": -59\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_49\",\r\n        \"id\": -60,\r\n        \"oldId\": -60\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_5\",\r\n        \"id\": -16,\r\n        \"oldId\": -16\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_50\",\r\n        \"id\": -61,\r\n        \"oldId\": -61\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_51\",\r\n        \"id\": -62,\r\n        \"oldId\": -62\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_52\",\r\n        \"id\": -63,\r\n        \"oldId\": -63\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_53\",\r\n        \"id\": -64,\r\n        \"oldId\": -64\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_54\",\r\n        \"id\": -65,\r\n        \"oldId\": -65\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_55\",\r\n        \"id\": -66,\r\n        \"oldId\": -66\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_56\",\r\n        \"id\": -67,\r\n        \"oldId\": -67\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_57\",\r\n        \"id\": -68,\r\n        \"oldId\": -68\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_58\",\r\n        \"id\": -69,\r\n        \"oldId\": -69\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_59\",\r\n        \"id\": -70,\r\n        \"oldId\": -70\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_6\",\r\n        \"id\": -17,\r\n        \"oldId\": -17\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_60\",\r\n        \"id\": -71,\r\n        \"oldId\": -71\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_61\",\r\n        \"id\": -72,\r\n        \"oldId\": -72\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_62\",\r\n        \"id\": -73,\r\n        \"oldId\": -73\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_63\",\r\n        \"id\": -74,\r\n        \"oldId\": -74\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_64\",\r\n        \"id\": -75,\r\n        \"oldId\": -75\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_65\",\r\n        \"id\": -76,\r\n        \"oldId\": -76\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_66\",\r\n        \"id\": -77,\r\n        \"oldId\": -77\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_67\",\r\n        \"id\": -78,\r\n        \"oldId\": -78\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_68\",\r\n        \"id\": -79,\r\n        \"oldId\": -79\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_69\",\r\n        \"id\": -80,\r\n        \"oldId\": -80\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_7\",\r\n        \"id\": -18,\r\n        \"oldId\": -18\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_70\",\r\n        \"id\": -81,\r\n        \"oldId\": -81\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_71\",\r\n        \"id\": -82,\r\n        \"oldId\": -82\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_72\",\r\n        \"id\": -83,\r\n        \"oldId\": -83\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_73\",\r\n        \"id\": -84,\r\n        \"oldId\": -84\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_74\",\r\n        \"id\": -85,\r\n        \"oldId\": -85\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_75\",\r\n        \"id\": -86,\r\n        \"oldId\": -86\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_76\",\r\n        \"id\": -87,\r\n        \"oldId\": -87\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_77\",\r\n        \"id\": -88,\r\n        \"oldId\": -88\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_78\",\r\n        \"id\": -89,\r\n        \"oldId\": -89\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_79\",\r\n        \"id\": -90,\r\n        \"oldId\": -90\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_8\",\r\n        \"id\": -19,\r\n        \"oldId\": -19\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_80\",\r\n        \"id\": -91,\r\n        \"oldId\": -91\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_81\",\r\n        \"id\": -92,\r\n        \"oldId\": -92\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_82\",\r\n        \"id\": -93,\r\n        \"oldId\": -93\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_83\",\r\n        \"id\": -94,\r\n        \"oldId\": -94\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_84\",\r\n        \"id\": -95,\r\n        \"oldId\": -95\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_85\",\r\n        \"id\": -96,\r\n        \"oldId\": -96\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_86\",\r\n        \"id\": -97,\r\n        \"oldId\": -97\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_87\",\r\n        \"id\": -98,\r\n        \"oldId\": -98\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_88\",\r\n        \"id\": -99,\r\n        \"oldId\": -99\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_89\",\r\n        \"id\": -100,\r\n        \"oldId\": -100\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_9\",\r\n        \"id\": -20,\r\n        \"oldId\": -20\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_90\",\r\n        \"id\": -101,\r\n        \"oldId\": -101\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_91\",\r\n        \"id\": -102,\r\n        \"oldId\": -102\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_92\",\r\n        \"id\": -103,\r\n        \"oldId\": -103\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_93\",\r\n        \"id\": -104,\r\n        \"oldId\": -104\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_94\",\r\n        \"id\": -105,\r\n        \"oldId\": -105\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_95\",\r\n        \"id\": -106,\r\n        \"oldId\": -106\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_96\",\r\n        \"id\": -107,\r\n        \"oldId\": -107\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_97\",\r\n        \"id\": -108,\r\n        \"oldId\": -108\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_98\",\r\n        \"id\": -109,\r\n        \"oldId\": -109\r\n    },\r\n    {\r\n        \"name\": \"minecraft:element_99\",\r\n        \"id\": -110,\r\n        \"oldId\": -110\r\n    },\r\n    {\r\n        \"name\": \"minecraft:elytra\",\r\n        \"id\": 554,\r\n        \"oldId\": 444\r\n    },\r\n    {\r\n        \"name\": \"minecraft:emerald\",\r\n        \"id\": 502,\r\n        \"oldId\": 388\r\n    },\r\n    {\r\n        \"name\": \"minecraft:emerald_block\",\r\n        \"id\": 133,\r\n        \"oldId\": 133\r\n    },\r\n    {\r\n        \"name\": \"minecraft:emerald_ore\",\r\n        \"id\": 129,\r\n        \"oldId\": 129\r\n    },\r\n    {\r\n        \"name\": \"minecraft:empty_map\",\r\n        \"id\": 505,\r\n        \"oldId\": 395\r\n    },\r\n    {\r\n        \"name\": \"minecraft:enchanted_book\",\r\n        \"id\": 511,\r\n        \"oldId\": 403\r\n    },\r\n    {\r\n        \"name\": \"minecraft:enchanted_golden_apple\",\r\n        \"id\": 259,\r\n        \"oldId\": 466\r\n    },\r\n    {\r\n        \"name\": \"minecraft:enchanting_table\",\r\n        \"id\": 116,\r\n        \"oldId\": 116\r\n    },\r\n    {\r\n        \"name\": \"minecraft:end_brick_stairs\",\r\n        \"id\": -178,\r\n        \"oldId\": -178\r\n    },\r\n    {\r\n        \"name\": \"minecraft:end_bricks\",\r\n        \"id\": 206,\r\n        \"oldId\": 206\r\n    },\r\n    {\r\n        \"name\": \"minecraft:end_crystal\",\r\n        \"id\": 616,\r\n        \"oldId\": 426\r\n    },\r\n    {\r\n        \"name\": \"minecraft:end_gateway\",\r\n        \"id\": 209,\r\n        \"oldId\": 209\r\n    },\r\n    {\r\n        \"name\": \"minecraft:end_portal\",\r\n        \"id\": 119,\r\n        \"oldId\": 119\r\n    },\r\n    {\r\n        \"name\": \"minecraft:end_portal_frame\",\r\n        \"id\": 120,\r\n        \"oldId\": 120\r\n    },\r\n    {\r\n        \"name\": \"minecraft:end_rod\",\r\n        \"id\": 208,\r\n        \"oldId\": 208\r\n    },\r\n    {\r\n        \"name\": \"minecraft:end_stone\",\r\n        \"id\": 121,\r\n        \"oldId\": 121\r\n    },\r\n    {\r\n        \"name\": \"minecraft:ender_chest\",\r\n        \"id\": 130,\r\n        \"oldId\": 130\r\n    },\r\n    {\r\n        \"name\": \"minecraft:ender_eye\",\r\n        \"id\": 431,\r\n        \"oldId\": 381\r\n    },\r\n    {\r\n        \"name\": \"minecraft:ender_pearl\",\r\n        \"id\": 420,\r\n        \"oldId\": 368\r\n    },\r\n    {\r\n        \"name\": \"minecraft:enderman_spawn_egg\",\r\n        \"id\": 440,\r\n        \"oldId\": 383,\r\n        \"oldData\": 38\r\n    },\r\n    {\r\n        \"name\": \"minecraft:endermite_spawn_egg\",\r\n        \"id\": 458,\r\n        \"oldId\": 383,\r\n        \"oldData\": 55\r\n    },\r\n    {\r\n        \"name\": \"minecraft:evoker_spawn_egg\",\r\n        \"id\": 473,\r\n        \"oldId\": 383,\r\n        \"oldData\": 104\r\n    },\r\n    {\r\n        \"name\": \"minecraft:experience_bottle\",\r\n        \"id\": 498,\r\n        \"oldId\": 384\r\n    },\r\n    {\r\n        \"name\": \"minecraft:farmland\",\r\n        \"id\": 60,\r\n        \"oldId\": 60\r\n    },\r\n    {\r\n        \"name\": \"minecraft:feather\",\r\n        \"id\": 327,\r\n        \"oldId\": 288\r\n    },\r\n    {\r\n        \"name\": \"minecraft:fence\",\r\n        \"id\": 85,\r\n        \"oldId\": 85\r\n    },\r\n    {\r\n        \"name\": \"minecraft:fence_gate\",\r\n        \"id\": 107,\r\n        \"oldId\": 107\r\n    },\r\n    {\r\n        \"name\": \"minecraft:fermented_spider_eye\",\r\n        \"id\": 426,\r\n        \"oldId\": 376\r\n    },\r\n    {\r\n        \"oldData\": 4,\r\n        \"name\": \"minecraft:field_masoned_banner_pattern\",\r\n        \"id\": 575,\r\n        \"oldId\": 434\r\n    },\r\n    {\r\n        \"name\": \"minecraft:filled_map\",\r\n        \"id\": 418,\r\n        \"oldId\": 358\r\n    },\r\n    {\r\n        \"name\": \"minecraft:fire\",\r\n        \"id\": 51,\r\n        \"oldId\": 51\r\n    },\r\n    {\r\n        \"name\": \"minecraft:fire_charge\",\r\n        \"id\": 499,\r\n        \"oldId\": 385\r\n    },\r\n    {\r\n        \"name\": \"minecraft:firework_rocket\",\r\n        \"id\": 509,\r\n        \"oldId\": 401\r\n    },\r\n    {\r\n        \"name\": \"minecraft:firework_star\",\r\n        \"id\": 510,\r\n        \"oldId\": 402\r\n    },\r\n    {\r\n        \"name\": \"minecraft:fishing_rod\",\r\n        \"id\": 390,\r\n        \"oldId\": 346\r\n    },\r\n    {\r\n        \"name\": \"minecraft:fletching_table\",\r\n        \"id\": -201,\r\n        \"oldId\": -201\r\n    },\r\n    {\r\n        \"name\": \"minecraft:flint\",\r\n        \"id\": 356,\r\n        \"oldId\": 318\r\n    },\r\n    {\r\n        \"name\": \"minecraft:flint_and_steel\",\r\n        \"id\": 299,\r\n        \"oldId\": 259\r\n    },\r\n    {\r\n        \"oldData\": 2,\r\n        \"name\": \"minecraft:flower_banner_pattern\",\r\n        \"id\": 571,\r\n        \"oldId\": 434\r\n    },\r\n    {\r\n        \"name\": \"minecraft:flower_pot\",\r\n        \"id\": 504,\r\n        \"oldId\": 390\r\n    },\r\n    {\r\n        \"name\": \"minecraft:flowing_lava\",\r\n        \"id\": 10,\r\n        \"oldId\": 10\r\n    },\r\n    {\r\n        \"name\": \"minecraft:flowing_water\",\r\n        \"id\": 8,\r\n        \"oldId\": 8\r\n    },\r\n    {\r\n        \"name\": \"minecraft:fox_spawn_egg\",\r\n        \"id\": 488,\r\n        \"oldId\": 383,\r\n        \"oldData\": 121\r\n    },\r\n    {\r\n        \"name\": \"minecraft:frame\",\r\n        \"id\": 503,\r\n        \"oldId\": 389\r\n    },\r\n    {\r\n        \"name\": \"minecraft:frosted_ice\",\r\n        \"id\": 207,\r\n        \"oldId\": 207\r\n    },\r\n    {\r\n        \"name\": \"minecraft:furnace\",\r\n        \"id\": 61,\r\n        \"oldId\": 61\r\n    },\r\n    {\r\n        \"name\": \"minecraft:ghast_spawn_egg\",\r\n        \"id\": 452,\r\n        \"oldId\": 383,\r\n        \"oldData\": 41\r\n    },\r\n    {\r\n        \"name\": \"minecraft:ghast_tear\",\r\n        \"id\": 422,\r\n        \"oldId\": 370\r\n    },\r\n    {\r\n        \"name\": \"minecraft:gilded_blackstone\",\r\n        \"id\": -281,\r\n        \"oldId\": -281\r\n    },\r\n    {\r\n        \"name\": \"minecraft:glass\",\r\n        \"id\": 20,\r\n        \"oldId\": 20\r\n    },\r\n    {\r\n        \"name\": \"minecraft:glass_bottle\",\r\n        \"id\": 425,\r\n        \"oldId\": 374\r\n    },\r\n    {\r\n        \"name\": \"minecraft:glass_pane\",\r\n        \"id\": 102,\r\n        \"oldId\": 102\r\n    },\r\n    {\r\n        \"name\": \"minecraft:glistering_melon_slice\",\r\n        \"id\": 432,\r\n        \"oldId\": 382\r\n    },\r\n    {\r\n        \"name\": \"minecraft:glow_stick\",\r\n        \"id\": 166,\r\n        \"oldId\": 166\r\n    },\r\n    {\r\n        \"name\": \"minecraft:glowingobsidian\",\r\n        \"id\": 246,\r\n        \"oldId\": 246\r\n    },\r\n    {\r\n        \"name\": \"minecraft:glowstone\",\r\n        \"id\": 89,\r\n        \"oldId\": 89\r\n    },\r\n    {\r\n        \"name\": \"minecraft:glowstone_dust\",\r\n        \"id\": 392,\r\n        \"oldId\": 348\r\n    },\r\n    {\r\n        \"name\": \"minecraft:gold_block\",\r\n        \"id\": 41,\r\n        \"oldId\": 41\r\n    },\r\n    {\r\n        \"name\": \"minecraft:gold_ingot\",\r\n        \"id\": 306,\r\n        \"oldId\": 266\r\n    },\r\n    {\r\n        \"name\": \"minecraft:gold_nugget\",\r\n        \"id\": 423,\r\n        \"oldId\": 371\r\n    },\r\n    {\r\n        \"name\": \"minecraft:gold_ore\",\r\n        \"id\": 14,\r\n        \"oldId\": 14\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_apple\",\r\n        \"id\": 258,\r\n        \"oldId\": 322\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_axe\",\r\n        \"id\": 325,\r\n        \"oldId\": 286\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_boots\",\r\n        \"id\": 354,\r\n        \"oldId\": 317\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_carrot\",\r\n        \"id\": 283,\r\n        \"oldId\": 396\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_chestplate\",\r\n        \"id\": 352,\r\n        \"oldId\": 315\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_helmet\",\r\n        \"id\": 351,\r\n        \"oldId\": 314\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_hoe\",\r\n        \"id\": 333,\r\n        \"oldId\": 294\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_horse_armor\",\r\n        \"id\": 522,\r\n        \"oldId\": 418\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_leggings\",\r\n        \"id\": 353,\r\n        \"oldId\": 316\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_pickaxe\",\r\n        \"id\": 324,\r\n        \"oldId\": 285\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_rail\",\r\n        \"id\": 27,\r\n        \"oldId\": 27\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_shovel\",\r\n        \"id\": 323,\r\n        \"oldId\": 284\r\n    },\r\n    {\r\n        \"name\": \"minecraft:golden_sword\",\r\n        \"id\": 322,\r\n        \"oldId\": 283\r\n    },\r\n    {\r\n        \"name\": \"minecraft:granite_stairs\",\r\n        \"id\": -169,\r\n        \"oldId\": -169\r\n    },\r\n    {\r\n        \"name\": \"minecraft:grass\",\r\n        \"id\": 2,\r\n        \"oldId\": 2\r\n    },\r\n    {\r\n        \"name\": \"minecraft:grass_path\",\r\n        \"id\": 198,\r\n        \"oldId\": 198\r\n    },\r\n    {\r\n        \"name\": \"minecraft:gravel\",\r\n        \"id\": 13,\r\n        \"oldId\": 13\r\n    },\r\n    {\r\n        \"oldData\": 8,\r\n        \"name\": \"minecraft:gray_dye\",\r\n        \"id\": 401,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:gray_glazed_terracotta\",\r\n        \"id\": 227,\r\n        \"oldId\": 227\r\n    },\r\n    {\r\n        \"oldData\": 2,\r\n        \"name\": \"minecraft:green_dye\",\r\n        \"id\": 395,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:green_glazed_terracotta\",\r\n        \"id\": 233,\r\n        \"oldId\": 233\r\n    },\r\n    {\r\n        \"name\": \"minecraft:grindstone\",\r\n        \"id\": -195,\r\n        \"oldId\": -195\r\n    },\r\n    {\r\n        \"name\": \"minecraft:guardian_spawn_egg\",\r\n        \"id\": 459,\r\n        \"oldId\": 383,\r\n        \"oldData\": 49\r\n    },\r\n    {\r\n        \"name\": \"minecraft:gunpowder\",\r\n        \"id\": 328,\r\n        \"oldId\": 289\r\n    },\r\n    {\r\n        \"name\": \"minecraft:hard_glass\",\r\n        \"id\": 253,\r\n        \"oldId\": 253\r\n    },\r\n    {\r\n        \"name\": \"minecraft:hard_glass_pane\",\r\n        \"id\": 190,\r\n        \"oldId\": 190\r\n    },\r\n    {\r\n        \"name\": \"minecraft:hard_stained_glass\",\r\n        \"id\": 254,\r\n        \"oldId\": 254\r\n    },\r\n    {\r\n        \"name\": \"minecraft:hard_stained_glass_pane\",\r\n        \"id\": 191,\r\n        \"oldId\": 191\r\n    },\r\n    {\r\n        \"name\": \"minecraft:hardened_clay\",\r\n        \"id\": 172,\r\n        \"oldId\": 172\r\n    },\r\n    {\r\n        \"name\": \"minecraft:hay_block\",\r\n        \"id\": 170,\r\n        \"oldId\": 170\r\n    },\r\n    {\r\n        \"name\": \"minecraft:heart_of_the_sea\",\r\n        \"id\": 561,\r\n        \"oldId\": 467\r\n    },\r\n    {\r\n        \"name\": \"minecraft:heavy_weighted_pressure_plate\",\r\n        \"id\": 148,\r\n        \"oldId\": 148\r\n    },\r\n    {\r\n        \"name\": \"minecraft:hoglin_spawn_egg\",\r\n        \"id\": 494,\r\n        \"oldId\": 383,\r\n        \"oldData\": 124\r\n    },\r\n    {\r\n        \"name\": \"minecraft:honey_block\",\r\n        \"id\": -220,\r\n        \"oldId\": -220\r\n    },\r\n    {\r\n        \"name\": \"minecraft:honey_bottle\",\r\n        \"id\": 582,\r\n        \"oldId\": 737\r\n    },\r\n    {\r\n        \"name\": \"minecraft:honeycomb\",\r\n        \"id\": 581,\r\n        \"oldId\": 736\r\n    },\r\n    {\r\n        \"name\": \"minecraft:honeycomb_block\",\r\n        \"id\": -221,\r\n        \"oldId\": -221\r\n    },\r\n    {\r\n        \"name\": \"minecraft:hopper\",\r\n        \"id\": 517,\r\n        \"oldId\": 410\r\n    },\r\n    {\r\n        \"name\": \"minecraft:hopper_minecart\",\r\n        \"id\": 516,\r\n        \"oldId\": 408\r\n    },\r\n    {\r\n        \"name\": \"minecraft:horse_spawn_egg\",\r\n        \"id\": 456,\r\n        \"oldId\": 383,\r\n        \"oldData\": 23\r\n    },\r\n    {\r\n        \"name\": \"minecraft:husk_spawn_egg\",\r\n        \"id\": 461,\r\n        \"oldId\": 383,\r\n        \"oldData\": 47\r\n    },\r\n    {\r\n        \"name\": \"minecraft:ice\",\r\n        \"id\": 79,\r\n        \"oldId\": 79\r\n    },\r\n    {\r\n        \"name\": \"minecraft:ice_bomb\",\r\n        \"id\": 585,\r\n        \"oldId\": 453\r\n    },\r\n    {\r\n        \"name\": \"minecraft:info_update\",\r\n        \"id\": 248,\r\n        \"oldId\": 248\r\n    },\r\n    {\r\n        \"name\": \"minecraft:info_update2\",\r\n        \"id\": 249,\r\n        \"oldId\": 249\r\n    },\r\n    {\r\n        \"oldData\": 0,\r\n        \"name\": \"minecraft:ink_sac\",\r\n        \"id\": 411,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:invisiblebedrock\",\r\n        \"id\": 95,\r\n        \"oldId\": 95\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_axe\",\r\n        \"id\": 298,\r\n        \"oldId\": 258\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_bars\",\r\n        \"id\": 101,\r\n        \"oldId\": 101\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_block\",\r\n        \"id\": 42,\r\n        \"oldId\": 42\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_boots\",\r\n        \"id\": 346,\r\n        \"oldId\": 309\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_chestplate\",\r\n        \"id\": 344,\r\n        \"oldId\": 307\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_door\",\r\n        \"id\": 370,\r\n        \"oldId\": 330\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_helmet\",\r\n        \"id\": 343,\r\n        \"oldId\": 306\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_hoe\",\r\n        \"id\": 331,\r\n        \"oldId\": 292\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_horse_armor\",\r\n        \"id\": 521,\r\n        \"oldId\": 417\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_ingot\",\r\n        \"id\": 305,\r\n        \"oldId\": 265\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_leggings\",\r\n        \"id\": 345,\r\n        \"oldId\": 308\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_nugget\",\r\n        \"id\": 559,\r\n        \"oldId\": 452\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_ore\",\r\n        \"id\": 15,\r\n        \"oldId\": 15\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_pickaxe\",\r\n        \"id\": 297,\r\n        \"oldId\": 257\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_shovel\",\r\n        \"id\": 296,\r\n        \"oldId\": 256\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_sword\",\r\n        \"id\": 307,\r\n        \"oldId\": 267\r\n    },\r\n    {\r\n        \"name\": \"minecraft:iron_trapdoor\",\r\n        \"id\": 167,\r\n        \"oldId\": 167\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.acacia_door\",\r\n        \"id\": 196,\r\n        \"oldId\": 196\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.bed\",\r\n        \"id\": 26,\r\n        \"oldId\": 26\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.beetroot\",\r\n        \"id\": 244,\r\n        \"oldId\": 244\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.birch_door\",\r\n        \"id\": 194,\r\n        \"oldId\": 194\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.cake\",\r\n        \"id\": 92,\r\n        \"oldId\": 92\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.camera\",\r\n        \"id\": 242,\r\n        \"oldId\": 242\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.campfire\",\r\n        \"id\": -209,\r\n        \"oldId\": -209\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.cauldron\",\r\n        \"id\": 118,\r\n        \"oldId\": 118\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.chain\",\r\n        \"id\": -286,\r\n        \"oldId\": -286\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.crimson_door\",\r\n        \"id\": -244,\r\n        \"oldId\": -244\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.dark_oak_door\",\r\n        \"id\": 197,\r\n        \"oldId\": 197\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.flower_pot\",\r\n        \"id\": 140,\r\n        \"oldId\": 140\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.frame\",\r\n        \"id\": 199,\r\n        \"oldId\": 199\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.hopper\",\r\n        \"id\": 154,\r\n        \"oldId\": 154\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.iron_door\",\r\n        \"id\": 71,\r\n        \"oldId\": 71\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.jungle_door\",\r\n        \"id\": 195,\r\n        \"oldId\": 195\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.kelp\",\r\n        \"id\": -138,\r\n        \"oldId\": -138\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.nether_sprouts\",\r\n        \"id\": -238,\r\n        \"oldId\": -238\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.nether_wart\",\r\n        \"id\": 115,\r\n        \"oldId\": 115\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.reeds\",\r\n        \"id\": 83,\r\n        \"oldId\": 83\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.skull\",\r\n        \"id\": 144,\r\n        \"oldId\": 144\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.soul_campfire\",\r\n        \"id\": -290,\r\n        \"oldId\": -290\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.spruce_door\",\r\n        \"id\": 193,\r\n        \"oldId\": 193\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.warped_door\",\r\n        \"id\": -245,\r\n        \"oldId\": -245\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.wheat\",\r\n        \"id\": 59,\r\n        \"oldId\": 59\r\n    },\r\n    {\r\n        \"name\": \"minecraft:item.wooden_door\",\r\n        \"id\": 64,\r\n        \"oldId\": 64\r\n    },\r\n    {\r\n        \"name\": \"minecraft:jigsaw\",\r\n        \"id\": -211,\r\n        \"oldId\": -211\r\n    },\r\n    {\r\n        \"name\": \"minecraft:jukebox\",\r\n        \"id\": 84,\r\n        \"oldId\": 84\r\n    },\r\n    {\r\n        \"oldData\": 3,\r\n        \"name\": \"minecraft:jungle_boat\",\r\n        \"id\": 375,\r\n        \"oldId\": 333\r\n    },\r\n    {\r\n        \"name\": \"minecraft:jungle_button\",\r\n        \"id\": -143,\r\n        \"oldId\": -143\r\n    },\r\n    {\r\n        \"name\": \"minecraft:jungle_door\",\r\n        \"id\": 545,\r\n        \"oldId\": 429\r\n    },\r\n    {\r\n        \"name\": \"minecraft:jungle_fence_gate\",\r\n        \"id\": 185,\r\n        \"oldId\": 185\r\n    },\r\n    {\r\n        \"name\": \"minecraft:jungle_pressure_plate\",\r\n        \"id\": -153,\r\n        \"oldId\": -153\r\n    },\r\n    {\r\n        \"name\": \"minecraft:jungle_sign\",\r\n        \"id\": 568,\r\n        \"oldId\": 474\r\n    },\r\n    {\r\n        \"name\": \"minecraft:jungle_stairs\",\r\n        \"id\": 136,\r\n        \"oldId\": 136\r\n    },\r\n    {\r\n        \"name\": \"minecraft:jungle_standing_sign\",\r\n        \"id\": -188,\r\n        \"oldId\": -188\r\n    },\r\n    {\r\n        \"name\": \"minecraft:jungle_trapdoor\",\r\n        \"id\": -148,\r\n        \"oldId\": -148\r\n    },\r\n    {\r\n        \"name\": \"minecraft:jungle_wall_sign\",\r\n        \"id\": -189,\r\n        \"oldId\": -189\r\n    },\r\n    {\r\n        \"name\": \"minecraft:kelp\",\r\n        \"id\": 380,\r\n        \"oldId\": 335\r\n    },\r\n    {\r\n        \"name\": \"minecraft:ladder\",\r\n        \"id\": 65,\r\n        \"oldId\": 65\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lantern\",\r\n        \"id\": -208,\r\n        \"oldId\": -208\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lapis_block\",\r\n        \"id\": 22,\r\n        \"oldId\": 22\r\n    },\r\n    {\r\n        \"oldData\": 4,\r\n        \"name\": \"minecraft:lapis_lazuli\",\r\n        \"id\": 412,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lapis_ore\",\r\n        \"id\": 21,\r\n        \"oldId\": 21\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lava\",\r\n        \"id\": 11,\r\n        \"oldId\": 11\r\n    },\r\n    {\r\n        \"oldData\": 10,\r\n        \"name\": \"minecraft:lava_bucket\",\r\n        \"id\": 363,\r\n        \"oldId\": 325\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lava_cauldron\",\r\n        \"id\": -210,\r\n        \"oldId\": -210\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lead\",\r\n        \"id\": 537,\r\n        \"oldId\": 420\r\n    },\r\n    {\r\n        \"name\": \"minecraft:leather\",\r\n        \"id\": 379,\r\n        \"oldId\": 334\r\n    },\r\n    {\r\n        \"name\": \"minecraft:leather_boots\",\r\n        \"id\": 338,\r\n        \"oldId\": 301\r\n    },\r\n    {\r\n        \"name\": \"minecraft:leather_chestplate\",\r\n        \"id\": 336,\r\n        \"oldId\": 299\r\n    },\r\n    {\r\n        \"name\": \"minecraft:leather_helmet\",\r\n        \"id\": 335,\r\n        \"oldId\": 298\r\n    },\r\n    {\r\n        \"name\": \"minecraft:leather_horse_armor\",\r\n        \"id\": 520,\r\n        \"oldId\": 416\r\n    },\r\n    {\r\n        \"name\": \"minecraft:leather_leggings\",\r\n        \"id\": 337,\r\n        \"oldId\": 300\r\n    },\r\n    {\r\n        \"name\": \"minecraft:leaves\",\r\n        \"id\": 18,\r\n        \"oldId\": 18\r\n    },\r\n    {\r\n        \"name\": \"minecraft:leaves2\",\r\n        \"id\": 161,\r\n        \"oldId\": 161\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lectern\",\r\n        \"id\": -194,\r\n        \"oldId\": -194\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lever\",\r\n        \"id\": 69,\r\n        \"oldId\": 69\r\n    },\r\n    {\r\n        \"name\": \"minecraft:light_block\",\r\n        \"id\": -215,\r\n        \"oldId\": -215\r\n    },\r\n    {\r\n        \"oldData\": 12,\r\n        \"name\": \"minecraft:light_blue_dye\",\r\n        \"id\": 405,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:light_blue_glazed_terracotta\",\r\n        \"id\": 223,\r\n        \"oldId\": 223\r\n    },\r\n    {\r\n        \"oldData\": 7,\r\n        \"name\": \"minecraft:light_gray_dye\",\r\n        \"id\": 400,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:light_weighted_pressure_plate\",\r\n        \"id\": 147,\r\n        \"oldId\": 147\r\n    },\r\n    {\r\n        \"oldData\": 10,\r\n        \"name\": \"minecraft:lime_dye\",\r\n        \"id\": 403,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lime_glazed_terracotta\",\r\n        \"id\": 225,\r\n        \"oldId\": 225\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lingering_potion\",\r\n        \"id\": 552,\r\n        \"oldId\": 441\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lit_blast_furnace\",\r\n        \"id\": -214,\r\n        \"oldId\": -214\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lit_furnace\",\r\n        \"id\": 62,\r\n        \"oldId\": 62\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lit_pumpkin\",\r\n        \"id\": 91,\r\n        \"oldId\": 91\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lit_redstone_lamp\",\r\n        \"id\": 124,\r\n        \"oldId\": 124\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lit_redstone_ore\",\r\n        \"id\": 74,\r\n        \"oldId\": 74\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lit_smoker\",\r\n        \"id\": -199,\r\n        \"oldId\": -199\r\n    },\r\n    {\r\n        \"name\": \"minecraft:llama_spawn_egg\",\r\n        \"id\": 471,\r\n        \"oldId\": 383,\r\n        \"oldData\": 29\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lodestone\",\r\n        \"id\": -222,\r\n        \"oldId\": -222\r\n    },\r\n    {\r\n        \"name\": \"minecraft:lodestone_compass\",\r\n        \"id\": 591,\r\n        \"oldId\": 741\r\n    },\r\n    {\r\n        \"name\": \"minecraft:log\",\r\n        \"id\": 17,\r\n        \"oldId\": 17\r\n    },\r\n    {\r\n        \"name\": \"minecraft:log2\",\r\n        \"id\": 162,\r\n        \"oldId\": 162\r\n    },\r\n    {\r\n        \"name\": \"minecraft:loom\",\r\n        \"id\": -204,\r\n        \"oldId\": -204\r\n    },\r\n    {\r\n        \"oldData\": 13,\r\n        \"name\": \"minecraft:magenta_dye\",\r\n        \"id\": 406,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:magenta_glazed_terracotta\",\r\n        \"id\": 222,\r\n        \"oldId\": 222\r\n    },\r\n    {\r\n        \"name\": \"minecraft:magma\",\r\n        \"id\": 213,\r\n        \"oldId\": 213\r\n    },\r\n    {\r\n        \"name\": \"minecraft:magma_cream\",\r\n        \"id\": 428,\r\n        \"oldId\": 378\r\n    },\r\n    {\r\n        \"name\": \"minecraft:magma_cube_spawn_egg\",\r\n        \"id\": 453,\r\n        \"oldId\": 383,\r\n        \"oldData\": 42\r\n    },\r\n    {\r\n        \"name\": \"minecraft:medicine\",\r\n        \"id\": 589,\r\n        \"oldId\": 447\r\n    },\r\n    {\r\n        \"name\": \"minecraft:melon_block\",\r\n        \"id\": 103,\r\n        \"oldId\": 103\r\n    },\r\n    {\r\n        \"name\": \"minecraft:melon_seeds\",\r\n        \"id\": 293,\r\n        \"oldId\": 362\r\n    },\r\n    {\r\n        \"name\": \"minecraft:melon_slice\",\r\n        \"id\": 272,\r\n        \"oldId\": 360\r\n    },\r\n    {\r\n        \"name\": \"minecraft:melon_stem\",\r\n        \"id\": 105,\r\n        \"oldId\": 105\r\n    },\r\n    {\r\n        \"oldData\": 1,\r\n        \"name\": \"minecraft:milk_bucket\",\r\n        \"id\": 361,\r\n        \"oldId\": 325\r\n    },\r\n    {\r\n        \"name\": \"minecraft:minecart\",\r\n        \"id\": 368,\r\n        \"oldId\": 328\r\n    },\r\n    {\r\n        \"name\": \"minecraft:mob_spawner\",\r\n        \"id\": 52,\r\n        \"oldId\": 52\r\n    },\r\n    {\r\n        \"oldData\": 3,\r\n        \"name\": \"minecraft:mojang_banner_pattern\",\r\n        \"id\": 574,\r\n        \"oldId\": 434\r\n    },\r\n    {\r\n        \"name\": \"minecraft:monster_egg\",\r\n        \"id\": 97,\r\n        \"oldId\": 97\r\n    },\r\n    {\r\n        \"name\": \"minecraft:mooshroom_spawn_egg\",\r\n        \"id\": 438,\r\n        \"oldId\": 383,\r\n        \"oldData\": 16\r\n    },\r\n    {\r\n        \"name\": \"minecraft:mossy_cobblestone\",\r\n        \"id\": 48,\r\n        \"oldId\": 48\r\n    },\r\n    {\r\n        \"name\": \"minecraft:mossy_cobblestone_stairs\",\r\n        \"id\": -179,\r\n        \"oldId\": -179\r\n    },\r\n    {\r\n        \"name\": \"minecraft:mossy_stone_brick_stairs\",\r\n        \"id\": -175,\r\n        \"oldId\": -175\r\n    },\r\n    {\r\n        \"name\": \"minecraft:movingblock\",\r\n        \"id\": 250,\r\n        \"oldId\": 250\r\n    },\r\n    {\r\n        \"name\": \"minecraft:mule_spawn_egg\",\r\n        \"id\": 464,\r\n        \"oldId\": 383,\r\n        \"oldData\": 25\r\n    },\r\n    {\r\n        \"name\": \"minecraft:mushroom_stew\",\r\n        \"id\": 260,\r\n        \"oldId\": 282\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_11\",\r\n        \"id\": 534,\r\n        \"oldId\": 510\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_13\",\r\n        \"id\": 524,\r\n        \"oldId\": 500\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_blocks\",\r\n        \"id\": 526,\r\n        \"oldId\": 502\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_cat\",\r\n        \"id\": 525,\r\n        \"oldId\": 501\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_chirp\",\r\n        \"id\": 527,\r\n        \"oldId\": 503\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_far\",\r\n        \"id\": 528,\r\n        \"oldId\": 504\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_mall\",\r\n        \"id\": 529,\r\n        \"oldId\": 505\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_mellohi\",\r\n        \"id\": 530,\r\n        \"oldId\": 506\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_pigstep\",\r\n        \"id\": 609,\r\n        \"oldId\": 759\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_stal\",\r\n        \"id\": 531,\r\n        \"oldId\": 507\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_strad\",\r\n        \"id\": 532,\r\n        \"oldId\": 508\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_wait\",\r\n        \"id\": 535,\r\n        \"oldId\": 511\r\n    },\r\n    {\r\n        \"name\": \"minecraft:music_disc_ward\",\r\n        \"id\": 533,\r\n        \"oldId\": 509\r\n    },\r\n    {\r\n        \"name\": \"minecraft:mutton\",\r\n        \"id\": 540,\r\n        \"oldId\": 423\r\n    },\r\n    {\r\n        \"name\": \"minecraft:mycelium\",\r\n        \"id\": 110,\r\n        \"oldId\": 110\r\n    },\r\n    {\r\n        \"name\": \"minecraft:name_tag\",\r\n        \"id\": 538,\r\n        \"oldId\": 421\r\n    },\r\n    {\r\n        \"name\": \"minecraft:nautilus_shell\",\r\n        \"id\": 560,\r\n        \"oldId\": 465\r\n    },\r\n    {\r\n        \"name\": \"minecraft:nether_brick\",\r\n        \"id\": 112,\r\n        \"oldId\": 112\r\n    },\r\n    {\r\n        \"name\": \"minecraft:nether_brick_fence\",\r\n        \"id\": 113,\r\n        \"oldId\": 113\r\n    },\r\n    {\r\n        \"name\": \"minecraft:nether_brick_stairs\",\r\n        \"id\": 114,\r\n        \"oldId\": 114\r\n    },\r\n    {\r\n        \"name\": \"minecraft:nether_gold_ore\",\r\n        \"id\": -288,\r\n        \"oldId\": -288\r\n    },\r\n    {\r\n        \"name\": \"minecraft:nether_sprouts\",\r\n        \"id\": 610,\r\n        \"oldId\": 760\r\n    },\r\n    {\r\n        \"name\": \"minecraft:nether_star\",\r\n        \"id\": 508,\r\n        \"oldId\": 399\r\n    },\r\n    {\r\n        \"name\": \"minecraft:nether_wart\",\r\n        \"id\": 294,\r\n        \"oldId\": 372\r\n    },\r\n    {\r\n        \"name\": \"minecraft:nether_wart_block\",\r\n        \"id\": 214,\r\n        \"oldId\": 214\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherbrick\",\r\n        \"id\": 513,\r\n        \"oldId\": 405\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherite_axe\",\r\n        \"id\": 596,\r\n        \"oldId\": 746\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherite_block\",\r\n        \"id\": -270,\r\n        \"oldId\": -270\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherite_boots\",\r\n        \"id\": 601,\r\n        \"oldId\": 751\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherite_chestplate\",\r\n        \"id\": 599,\r\n        \"oldId\": 749\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherite_helmet\",\r\n        \"id\": 598,\r\n        \"oldId\": 748\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherite_hoe\",\r\n        \"id\": 597,\r\n        \"oldId\": 747\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherite_ingot\",\r\n        \"id\": 592,\r\n        \"oldId\": 742\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherite_leggings\",\r\n        \"id\": 600,\r\n        \"oldId\": 750\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherite_pickaxe\",\r\n        \"id\": 595,\r\n        \"oldId\": 745\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherite_scrap\",\r\n        \"id\": 602,\r\n        \"oldId\": 752\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherite_shovel\",\r\n        \"id\": 594,\r\n        \"oldId\": 744\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherite_sword\",\r\n        \"id\": 593,\r\n        \"oldId\": 743\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherrack\",\r\n        \"id\": 87,\r\n        \"oldId\": 87\r\n    },\r\n    {\r\n        \"name\": \"minecraft:netherreactor\",\r\n        \"id\": 247,\r\n        \"oldId\": 247\r\n    },\r\n    {\r\n        \"name\": \"minecraft:normal_stone_stairs\",\r\n        \"id\": -180,\r\n        \"oldId\": -180\r\n    },\r\n    {\r\n        \"name\": \"minecraft:noteblock\",\r\n        \"id\": 25,\r\n        \"oldId\": 25\r\n    },\r\n    {\r\n        \"name\": \"minecraft:npc_spawn_egg\",\r\n        \"id\": 468,\r\n        \"oldId\": 383,\r\n        \"oldData\": 51\r\n    },\r\n    {\r\n        \"oldData\": 0,\r\n        \"name\": \"minecraft:oak_boat\",\r\n        \"id\": 373,\r\n        \"oldId\": 333\r\n    },\r\n    {\r\n        \"name\": \"minecraft:oak_sign\",\r\n        \"id\": 358,\r\n        \"oldId\": 323\r\n    },\r\n    {\r\n        \"name\": \"minecraft:oak_stairs\",\r\n        \"id\": 53,\r\n        \"oldId\": 53\r\n    },\r\n    {\r\n        \"name\": \"minecraft:observer\",\r\n        \"id\": 251,\r\n        \"oldId\": 251\r\n    },\r\n    {\r\n        \"name\": \"minecraft:obsidian\",\r\n        \"id\": 49,\r\n        \"oldId\": 49\r\n    },\r\n    {\r\n        \"name\": \"minecraft:ocelot_spawn_egg\",\r\n        \"id\": 449,\r\n        \"oldId\": 383,\r\n        \"oldData\": 22\r\n    },\r\n    {\r\n        \"oldData\": 14,\r\n        \"name\": \"minecraft:orange_dye\",\r\n        \"id\": 407,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:orange_glazed_terracotta\",\r\n        \"id\": 221,\r\n        \"oldId\": 221\r\n    },\r\n    {\r\n        \"name\": \"minecraft:packed_ice\",\r\n        \"id\": 174,\r\n        \"oldId\": 174\r\n    },\r\n    {\r\n        \"name\": \"minecraft:painting\",\r\n        \"id\": 357,\r\n        \"oldId\": 321\r\n    },\r\n    {\r\n        \"name\": \"minecraft:panda_spawn_egg\",\r\n        \"id\": 487,\r\n        \"oldId\": 383,\r\n        \"oldData\": 113\r\n    },\r\n    {\r\n        \"name\": \"minecraft:paper\",\r\n        \"id\": 384,\r\n        \"oldId\": 339\r\n    },\r\n    {\r\n        \"name\": \"minecraft:parrot_spawn_egg\",\r\n        \"id\": 476,\r\n        \"oldId\": 383,\r\n        \"oldData\": 30\r\n    },\r\n    {\r\n        \"name\": \"minecraft:phantom_membrane\",\r\n        \"id\": 564,\r\n        \"oldId\": 470\r\n    },\r\n    {\r\n        \"name\": \"minecraft:phantom_spawn_egg\",\r\n        \"id\": 484,\r\n        \"oldId\": 383,\r\n        \"oldData\": 58\r\n    },\r\n    {\r\n        \"name\": \"minecraft:pig_spawn_egg\",\r\n        \"id\": 435,\r\n        \"oldId\": 383,\r\n        \"oldData\": 12\r\n    },\r\n    {\r\n        \"oldData\": 6,\r\n        \"name\": \"minecraft:piglin_banner_pattern\",\r\n        \"id\": 577,\r\n        \"oldId\": 434\r\n    },\r\n    {\r\n        \"name\": \"minecraft:piglin_brute_spawn_egg\",\r\n        \"id\": 497,\r\n        \"oldId\": 383,\r\n        \"oldData\": 127\r\n    },\r\n    {\r\n        \"name\": \"minecraft:piglin_spawn_egg\",\r\n        \"id\": 495,\r\n        \"oldId\": 383,\r\n        \"oldData\": 123\r\n    },\r\n    {\r\n        \"name\": \"minecraft:pillager_spawn_egg\",\r\n        \"id\": 489,\r\n        \"oldId\": 383,\r\n        \"oldData\": 114\r\n    },\r\n    {\r\n        \"oldData\": 9,\r\n        \"name\": \"minecraft:pink_dye\",\r\n        \"id\": 402,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:pink_glazed_terracotta\",\r\n        \"id\": 226,\r\n        \"oldId\": 226\r\n    },\r\n    {\r\n        \"name\": \"minecraft:piston\",\r\n        \"id\": 33,\r\n        \"oldId\": 33\r\n    },\r\n    {\r\n        \"name\": \"minecraft:pistonarmcollision\",\r\n        \"id\": 34,\r\n        \"oldId\": 34\r\n    },\r\n    {\r\n        \"name\": \"minecraft:planks\",\r\n        \"id\": 5,\r\n        \"oldId\": 5\r\n    },\r\n    {\r\n        \"name\": \"minecraft:podzol\",\r\n        \"id\": 243,\r\n        \"oldId\": 243\r\n    },\r\n    {\r\n        \"name\": \"minecraft:poisonous_potato\",\r\n        \"id\": 282,\r\n        \"oldId\": 394\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polar_bear_spawn_egg\",\r\n        \"id\": 470,\r\n        \"oldId\": 383,\r\n        \"oldData\": 28\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_andesite_stairs\",\r\n        \"id\": -174,\r\n        \"oldId\": -174\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_basalt\",\r\n        \"id\": -235,\r\n        \"oldId\": -235\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_blackstone\",\r\n        \"id\": -291,\r\n        \"oldId\": -291\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_blackstone_brick_double_slab\",\r\n        \"id\": -285,\r\n        \"oldId\": -285\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_blackstone_brick_slab\",\r\n        \"id\": -284,\r\n        \"oldId\": -284\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_blackstone_brick_stairs\",\r\n        \"id\": -275,\r\n        \"oldId\": -275\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_blackstone_brick_wall\",\r\n        \"id\": -278,\r\n        \"oldId\": -278\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_blackstone_bricks\",\r\n        \"id\": -274,\r\n        \"oldId\": -274\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_blackstone_button\",\r\n        \"id\": -296,\r\n        \"oldId\": -296\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_blackstone_double_slab\",\r\n        \"id\": -294,\r\n        \"oldId\": -294\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_blackstone_pressure_plate\",\r\n        \"id\": -295,\r\n        \"oldId\": -295\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_blackstone_slab\",\r\n        \"id\": -293,\r\n        \"oldId\": -293\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_blackstone_stairs\",\r\n        \"id\": -292,\r\n        \"oldId\": -292\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_blackstone_wall\",\r\n        \"id\": -297,\r\n        \"oldId\": -297\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_diorite_stairs\",\r\n        \"id\": -173,\r\n        \"oldId\": -173\r\n    },\r\n    {\r\n        \"name\": \"minecraft:polished_granite_stairs\",\r\n        \"id\": -172,\r\n        \"oldId\": -172\r\n    },\r\n    {\r\n        \"name\": \"minecraft:popped_chorus_fruit\",\r\n        \"id\": 549,\r\n        \"oldId\": 433\r\n    },\r\n    {\r\n        \"name\": \"minecraft:porkchop\",\r\n        \"id\": 262,\r\n        \"oldId\": 319\r\n    },\r\n    {\r\n        \"name\": \"minecraft:portal\",\r\n        \"id\": 90,\r\n        \"oldId\": 90\r\n    },\r\n    {\r\n        \"name\": \"minecraft:potato\",\r\n        \"id\": 280,\r\n        \"oldId\": 392\r\n    },\r\n    {\r\n        \"name\": \"minecraft:potatoes\",\r\n        \"id\": 142,\r\n        \"oldId\": 142\r\n    },\r\n    {\r\n        \"name\": \"minecraft:potion\",\r\n        \"id\": 424,\r\n        \"oldId\": 373\r\n    },\r\n    {\r\n        \"name\": \"minecraft:powered_comparator\",\r\n        \"id\": 150,\r\n        \"oldId\": 150\r\n    },\r\n    {\r\n        \"name\": \"minecraft:powered_repeater\",\r\n        \"id\": 94,\r\n        \"oldId\": 94\r\n    },\r\n    {\r\n        \"name\": \"minecraft:prismarine\",\r\n        \"id\": 168,\r\n        \"oldId\": 168\r\n    },\r\n    {\r\n        \"name\": \"minecraft:prismarine_bricks_stairs\",\r\n        \"id\": -4,\r\n        \"oldId\": -4\r\n    },\r\n    {\r\n        \"name\": \"minecraft:prismarine_crystals\",\r\n        \"id\": 539,\r\n        \"oldId\": 422\r\n    },\r\n    {\r\n        \"name\": \"minecraft:prismarine_shard\",\r\n        \"id\": 555,\r\n        \"oldId\": 409\r\n    },\r\n    {\r\n        \"name\": \"minecraft:prismarine_stairs\",\r\n        \"id\": -2,\r\n        \"oldId\": -2\r\n    },\r\n    {\r\n        \"name\": \"minecraft:pufferfish\",\r\n        \"id\": 267,\r\n        \"oldId\": 462\r\n    },\r\n    {\r\n        \"oldData\": 5,\r\n        \"name\": \"minecraft:pufferfish_bucket\",\r\n        \"id\": 367,\r\n        \"oldId\": 325\r\n    },\r\n    {\r\n        \"name\": \"minecraft:pufferfish_spawn_egg\",\r\n        \"id\": 479,\r\n        \"oldId\": 383,\r\n        \"oldData\": 108\r\n    },\r\n    {\r\n        \"name\": \"minecraft:pumpkin\",\r\n        \"id\": 86,\r\n        \"oldId\": 86\r\n    },\r\n    {\r\n        \"name\": \"minecraft:pumpkin_pie\",\r\n        \"id\": 284,\r\n        \"oldId\": 400\r\n    },\r\n    {\r\n        \"name\": \"minecraft:pumpkin_seeds\",\r\n        \"id\": 292,\r\n        \"oldId\": 361\r\n    },\r\n    {\r\n        \"name\": \"minecraft:pumpkin_stem\",\r\n        \"id\": 104,\r\n        \"oldId\": 104\r\n    },\r\n    {\r\n        \"oldData\": 5,\r\n        \"name\": \"minecraft:purple_dye\",\r\n        \"id\": 398,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:purple_glazed_terracotta\",\r\n        \"id\": 219,\r\n        \"oldId\": 219\r\n    },\r\n    {\r\n        \"name\": \"minecraft:purpur_block\",\r\n        \"id\": 201,\r\n        \"oldId\": 201\r\n    },\r\n    {\r\n        \"name\": \"minecraft:purpur_stairs\",\r\n        \"id\": 203,\r\n        \"oldId\": 203\r\n    },\r\n    {\r\n        \"name\": \"minecraft:quartz\",\r\n        \"id\": 514,\r\n        \"oldId\": 406\r\n    },\r\n    {\r\n        \"name\": \"minecraft:quartz_block\",\r\n        \"id\": 155,\r\n        \"oldId\": 155\r\n    },\r\n    {\r\n        \"name\": \"minecraft:quartz_bricks\",\r\n        \"id\": -304,\r\n        \"oldId\": -304\r\n    },\r\n    {\r\n        \"name\": \"minecraft:quartz_ore\",\r\n        \"id\": 153,\r\n        \"oldId\": 153\r\n    },\r\n    {\r\n        \"name\": \"minecraft:quartz_stairs\",\r\n        \"id\": 156,\r\n        \"oldId\": 156\r\n    },\r\n    {\r\n        \"name\": \"minecraft:rabbit\",\r\n        \"id\": 288,\r\n        \"oldId\": 411\r\n    },\r\n    {\r\n        \"name\": \"minecraft:rabbit_foot\",\r\n        \"id\": 518,\r\n        \"oldId\": 414\r\n    },\r\n    {\r\n        \"name\": \"minecraft:rabbit_hide\",\r\n        \"id\": 519,\r\n        \"oldId\": 415\r\n    },\r\n    {\r\n        \"name\": \"minecraft:rabbit_spawn_egg\",\r\n        \"id\": 457,\r\n        \"oldId\": 383,\r\n        \"oldData\": 18\r\n    },\r\n    {\r\n        \"name\": \"minecraft:rabbit_stew\",\r\n        \"id\": 290,\r\n        \"oldId\": 413\r\n    },\r\n    {\r\n        \"name\": \"minecraft:rail\",\r\n        \"id\": 66,\r\n        \"oldId\": 66\r\n    },\r\n    {\r\n        \"name\": \"minecraft:rapid_fertilizer\",\r\n        \"id\": 587,\r\n        \"oldId\": 449\r\n    },\r\n    {\r\n        \"name\": \"minecraft:ravager_spawn_egg\",\r\n        \"id\": 491,\r\n        \"oldId\": 383,\r\n        \"oldData\": 59\r\n    },\r\n    {\r\n        \"name\": \"minecraft:real_double_stone_slab\",\r\n        \"id\": 43,\r\n        \"oldId\": 43\r\n    },\r\n    {\r\n        \"name\": \"minecraft:real_double_stone_slab2\",\r\n        \"id\": 181,\r\n        \"oldId\": 181\r\n    },\r\n    {\r\n        \"name\": \"minecraft:real_double_stone_slab3\",\r\n        \"id\": -167,\r\n        \"oldId\": -167\r\n    },\r\n    {\r\n        \"name\": \"minecraft:real_double_stone_slab4\",\r\n        \"id\": -168,\r\n        \"oldId\": -168\r\n    },\r\n    {\r\n        \"oldData\": 1,\r\n        \"name\": \"minecraft:red_dye\",\r\n        \"id\": 394,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:red_flower\",\r\n        \"id\": 38,\r\n        \"oldId\": 38\r\n    },\r\n    {\r\n        \"name\": \"minecraft:red_glazed_terracotta\",\r\n        \"id\": 234,\r\n        \"oldId\": 234\r\n    },\r\n    {\r\n        \"name\": \"minecraft:red_mushroom\",\r\n        \"id\": 40,\r\n        \"oldId\": 40\r\n    },\r\n    {\r\n        \"name\": \"minecraft:red_mushroom_block\",\r\n        \"id\": 100,\r\n        \"oldId\": 100\r\n    },\r\n    {\r\n        \"name\": \"minecraft:red_nether_brick\",\r\n        \"id\": 215,\r\n        \"oldId\": 215\r\n    },\r\n    {\r\n        \"name\": \"minecraft:red_nether_brick_stairs\",\r\n        \"id\": -184,\r\n        \"oldId\": -184\r\n    },\r\n    {\r\n        \"name\": \"minecraft:red_sandstone\",\r\n        \"id\": 179,\r\n        \"oldId\": 179\r\n    },\r\n    {\r\n        \"name\": \"minecraft:red_sandstone_stairs\",\r\n        \"id\": 180,\r\n        \"oldId\": 180\r\n    },\r\n    {\r\n        \"name\": \"minecraft:redstone\",\r\n        \"id\": 371,\r\n        \"oldId\": 331\r\n    },\r\n    {\r\n        \"name\": \"minecraft:redstone_block\",\r\n        \"id\": 152,\r\n        \"oldId\": 152\r\n    },\r\n    {\r\n        \"name\": \"minecraft:redstone_lamp\",\r\n        \"id\": 123,\r\n        \"oldId\": 123\r\n    },\r\n    {\r\n        \"name\": \"minecraft:redstone_ore\",\r\n        \"id\": 73,\r\n        \"oldId\": 73\r\n    },\r\n    {\r\n        \"name\": \"minecraft:redstone_torch\",\r\n        \"id\": 76,\r\n        \"oldId\": 76\r\n    },\r\n    {\r\n        \"name\": \"minecraft:redstone_wire\",\r\n        \"id\": 55,\r\n        \"oldId\": 55\r\n    },\r\n    {\r\n        \"name\": \"minecraft:repeater\",\r\n        \"id\": 417,\r\n        \"oldId\": 356\r\n    },\r\n    {\r\n        \"name\": \"minecraft:repeating_command_block\",\r\n        \"id\": 188,\r\n        \"oldId\": 188\r\n    },\r\n    {\r\n        \"name\": \"minecraft:reserved6\",\r\n        \"id\": 255,\r\n        \"oldId\": 255\r\n    },\r\n    {\r\n        \"name\": \"minecraft:respawn_anchor\",\r\n        \"id\": -272,\r\n        \"oldId\": -272\r\n    },\r\n    {\r\n        \"name\": \"minecraft:rotten_flesh\",\r\n        \"id\": 277,\r\n        \"oldId\": 367\r\n    },\r\n    {\r\n        \"name\": \"minecraft:saddle\",\r\n        \"id\": 369,\r\n        \"oldId\": 329\r\n    },\r\n    {\r\n        \"name\": \"minecraft:salmon\",\r\n        \"id\": 265,\r\n        \"oldId\": 460\r\n    },\r\n    {\r\n        \"oldData\": 3,\r\n        \"name\": \"minecraft:salmon_bucket\",\r\n        \"id\": 365,\r\n        \"oldId\": 325\r\n    },\r\n    {\r\n        \"name\": \"minecraft:salmon_spawn_egg\",\r\n        \"id\": 480,\r\n        \"oldId\": 383,\r\n        \"oldData\": 109\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sand\",\r\n        \"id\": 12,\r\n        \"oldId\": 12\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sandstone\",\r\n        \"id\": 24,\r\n        \"oldId\": 24\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sandstone_stairs\",\r\n        \"id\": 128,\r\n        \"oldId\": 128\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sapling\",\r\n        \"id\": 6,\r\n        \"oldId\": 6\r\n    },\r\n    {\r\n        \"name\": \"minecraft:scaffolding\",\r\n        \"id\": -165,\r\n        \"oldId\": -165\r\n    },\r\n    {\r\n        \"name\": \"minecraft:scute\",\r\n        \"id\": 562,\r\n        \"oldId\": 468\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sea_pickle\",\r\n        \"id\": -156,\r\n        \"oldId\": -156\r\n    },\r\n    {\r\n        \"name\": \"minecraft:seagrass\",\r\n        \"id\": -130,\r\n        \"oldId\": -130\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sealantern\",\r\n        \"id\": 169,\r\n        \"oldId\": 169\r\n    },\r\n    {\r\n        \"name\": \"minecraft:shears\",\r\n        \"id\": 419,\r\n        \"oldId\": 359\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sheep_spawn_egg\",\r\n        \"id\": 436,\r\n        \"oldId\": 383,\r\n        \"oldData\": 13\r\n    },\r\n    {\r\n        \"name\": \"minecraft:shield\",\r\n        \"id\": 355,\r\n        \"oldId\": 513\r\n    },\r\n    {\r\n        \"name\": \"minecraft:shroomlight\",\r\n        \"id\": -230,\r\n        \"oldId\": -230\r\n    },\r\n    {\r\n        \"name\": \"minecraft:shulker_box\",\r\n        \"id\": 218,\r\n        \"oldId\": 218\r\n    },\r\n    {\r\n        \"name\": \"minecraft:shulker_shell\",\r\n        \"id\": 556,\r\n        \"oldId\": 445\r\n    },\r\n    {\r\n        \"name\": \"minecraft:shulker_spawn_egg\",\r\n        \"id\": 467,\r\n        \"oldId\": 383,\r\n        \"oldData\": 54\r\n    },\r\n    {\r\n        \"name\": \"minecraft:silver_glazed_terracotta\",\r\n        \"id\": 228,\r\n        \"oldId\": 228\r\n    },\r\n    {\r\n        \"name\": \"minecraft:silverfish_spawn_egg\",\r\n        \"id\": 441,\r\n        \"oldId\": 383,\r\n        \"oldData\": 39\r\n    },\r\n    {\r\n        \"name\": \"minecraft:skeleton_horse_spawn_egg\",\r\n        \"id\": 465,\r\n        \"oldId\": 383,\r\n        \"oldData\": 26\r\n    },\r\n    {\r\n        \"name\": \"minecraft:skeleton_spawn_egg\",\r\n        \"id\": 442,\r\n        \"oldId\": 383,\r\n        \"oldData\": 34\r\n    },\r\n    {\r\n        \"name\": \"minecraft:skull\",\r\n        \"id\": 506,\r\n        \"oldId\": 397\r\n    },\r\n    {\r\n        \"oldData\": 1,\r\n        \"name\": \"minecraft:skull_banner_pattern\",\r\n        \"id\": 573,\r\n        \"oldId\": 434\r\n    },\r\n    {\r\n        \"name\": \"minecraft:slime\",\r\n        \"id\": 165,\r\n        \"oldId\": 165\r\n    },\r\n    {\r\n        \"name\": \"minecraft:slime_ball\",\r\n        \"id\": 386,\r\n        \"oldId\": 341\r\n    },\r\n    {\r\n        \"name\": \"minecraft:slime_spawn_egg\",\r\n        \"id\": 443,\r\n        \"oldId\": 383,\r\n        \"oldData\": 37\r\n    },\r\n    {\r\n        \"name\": \"minecraft:smithing_table\",\r\n        \"id\": -202,\r\n        \"oldId\": -202\r\n    },\r\n    {\r\n        \"name\": \"minecraft:smoker\",\r\n        \"id\": -198,\r\n        \"oldId\": -198\r\n    },\r\n    {\r\n        \"name\": \"minecraft:smooth_quartz_stairs\",\r\n        \"id\": -185,\r\n        \"oldId\": -185\r\n    },\r\n    {\r\n        \"name\": \"minecraft:smooth_red_sandstone_stairs\",\r\n        \"id\": -176,\r\n        \"oldId\": -176\r\n    },\r\n    {\r\n        \"name\": \"minecraft:smooth_sandstone_stairs\",\r\n        \"id\": -177,\r\n        \"oldId\": -177\r\n    },\r\n    {\r\n        \"name\": \"minecraft:smooth_stone\",\r\n        \"id\": -183,\r\n        \"oldId\": -183\r\n    },\r\n    {\r\n        \"name\": \"minecraft:snow\",\r\n        \"id\": 80,\r\n        \"oldId\": 80\r\n    },\r\n    {\r\n        \"name\": \"minecraft:snow_layer\",\r\n        \"id\": 78,\r\n        \"oldId\": 78\r\n    },\r\n    {\r\n        \"name\": \"minecraft:snowball\",\r\n        \"id\": 372,\r\n        \"oldId\": 332\r\n    },\r\n    {\r\n        \"name\": \"minecraft:soul_campfire\",\r\n        \"id\": 611,\r\n        \"oldId\": 801\r\n    },\r\n    {\r\n        \"name\": \"minecraft:soul_fire\",\r\n        \"id\": -237,\r\n        \"oldId\": -237\r\n    },\r\n    {\r\n        \"name\": \"minecraft:soul_lantern\",\r\n        \"id\": -269,\r\n        \"oldId\": -269\r\n    },\r\n    {\r\n        \"name\": \"minecraft:soul_sand\",\r\n        \"id\": 88,\r\n        \"oldId\": 88\r\n    },\r\n    {\r\n        \"name\": \"minecraft:soul_soil\",\r\n        \"id\": -236,\r\n        \"oldId\": -236\r\n    },\r\n    {\r\n        \"name\": \"minecraft:soul_torch\",\r\n        \"id\": -268,\r\n        \"oldId\": -268\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sparkler\",\r\n        \"id\": 590,\r\n        \"oldId\": 442\r\n    },\r\n    {\r\n        \"name\": \"minecraft:spawn_egg\",\r\n        \"id\": 615,\r\n        \"oldId\": 383\r\n    },\r\n    {\r\n        \"name\": \"minecraft:spider_eye\",\r\n        \"id\": 278,\r\n        \"oldId\": 375\r\n    },\r\n    {\r\n        \"name\": \"minecraft:spider_spawn_egg\",\r\n        \"id\": 444,\r\n        \"oldId\": 383,\r\n        \"oldData\": 35\r\n    },\r\n    {\r\n        \"name\": \"minecraft:splash_potion\",\r\n        \"id\": 551,\r\n        \"oldId\": 438\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sponge\",\r\n        \"id\": 19,\r\n        \"oldId\": 19\r\n    },\r\n    {\r\n        \"oldData\": 1,\r\n        \"name\": \"minecraft:spruce_boat\",\r\n        \"id\": 376,\r\n        \"oldId\": 333\r\n    },\r\n    {\r\n        \"name\": \"minecraft:spruce_button\",\r\n        \"id\": -144,\r\n        \"oldId\": -144\r\n    },\r\n    {\r\n        \"name\": \"minecraft:spruce_door\",\r\n        \"id\": 543,\r\n        \"oldId\": 427\r\n    },\r\n    {\r\n        \"name\": \"minecraft:spruce_fence_gate\",\r\n        \"id\": 183,\r\n        \"oldId\": 183\r\n    },\r\n    {\r\n        \"name\": \"minecraft:spruce_pressure_plate\",\r\n        \"id\": -154,\r\n        \"oldId\": -154\r\n    },\r\n    {\r\n        \"name\": \"minecraft:spruce_sign\",\r\n        \"id\": 566,\r\n        \"oldId\": 472\r\n    },\r\n    {\r\n        \"name\": \"minecraft:spruce_stairs\",\r\n        \"id\": 134,\r\n        \"oldId\": 134\r\n    },\r\n    {\r\n        \"name\": \"minecraft:spruce_standing_sign\",\r\n        \"id\": -181,\r\n        \"oldId\": -181\r\n    },\r\n    {\r\n        \"name\": \"minecraft:spruce_trapdoor\",\r\n        \"id\": -149,\r\n        \"oldId\": -149\r\n    },\r\n    {\r\n        \"name\": \"minecraft:spruce_wall_sign\",\r\n        \"id\": -182,\r\n        \"oldId\": -182\r\n    },\r\n    {\r\n        \"name\": \"minecraft:squid_spawn_egg\",\r\n        \"id\": 448,\r\n        \"oldId\": 383,\r\n        \"oldData\": 17\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stained_glass\",\r\n        \"id\": 241,\r\n        \"oldId\": 241\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stained_glass_pane\",\r\n        \"id\": 160,\r\n        \"oldId\": 160\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stained_hardened_clay\",\r\n        \"id\": 159,\r\n        \"oldId\": 159\r\n    },\r\n    {\r\n        \"name\": \"minecraft:standing_banner\",\r\n        \"id\": 176,\r\n        \"oldId\": 176\r\n    },\r\n    {\r\n        \"name\": \"minecraft:standing_sign\",\r\n        \"id\": 63,\r\n        \"oldId\": 63\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stick\",\r\n        \"id\": 320,\r\n        \"oldId\": 280\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sticky_piston\",\r\n        \"id\": 29,\r\n        \"oldId\": 29\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stickypistonarmcollision\",\r\n        \"id\": -217,\r\n        \"oldId\": -217\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stone\",\r\n        \"id\": 1,\r\n        \"oldId\": 1\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stone_axe\",\r\n        \"id\": 315,\r\n        \"oldId\": 275\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stone_brick_stairs\",\r\n        \"id\": 109,\r\n        \"oldId\": 109\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stone_button\",\r\n        \"id\": 77,\r\n        \"oldId\": 77\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stone_hoe\",\r\n        \"id\": 330,\r\n        \"oldId\": 291\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stone_pickaxe\",\r\n        \"id\": 314,\r\n        \"oldId\": 274\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stone_pressure_plate\",\r\n        \"id\": 70,\r\n        \"oldId\": 70\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stone_shovel\",\r\n        \"id\": 313,\r\n        \"oldId\": 273\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stone_stairs\",\r\n        \"id\": 67,\r\n        \"oldId\": 67\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stone_sword\",\r\n        \"id\": 312,\r\n        \"oldId\": 272\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stonebrick\",\r\n        \"id\": 98,\r\n        \"oldId\": 98\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stonecutter\",\r\n        \"id\": 245,\r\n        \"oldId\": 245\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stonecutter_block\",\r\n        \"id\": -197,\r\n        \"oldId\": -197\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stray_spawn_egg\",\r\n        \"id\": 460,\r\n        \"oldId\": 383,\r\n        \"oldData\": 46\r\n    },\r\n    {\r\n        \"name\": \"minecraft:strider_spawn_egg\",\r\n        \"id\": 493,\r\n        \"oldId\": 383,\r\n        \"oldData\": 125\r\n    },\r\n    {\r\n        \"name\": \"minecraft:string\",\r\n        \"id\": 326,\r\n        \"oldId\": 287\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stripped_acacia_log\",\r\n        \"id\": -8,\r\n        \"oldId\": -8\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stripped_birch_log\",\r\n        \"id\": -6,\r\n        \"oldId\": -6\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stripped_crimson_hyphae\",\r\n        \"id\": -300,\r\n        \"oldId\": -300\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stripped_crimson_stem\",\r\n        \"id\": -240,\r\n        \"oldId\": -240\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stripped_dark_oak_log\",\r\n        \"id\": -9,\r\n        \"oldId\": -9\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stripped_jungle_log\",\r\n        \"id\": -7,\r\n        \"oldId\": -7\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stripped_oak_log\",\r\n        \"id\": -10,\r\n        \"oldId\": -10\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stripped_spruce_log\",\r\n        \"id\": -5,\r\n        \"oldId\": -5\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stripped_warped_hyphae\",\r\n        \"id\": -301,\r\n        \"oldId\": -301\r\n    },\r\n    {\r\n        \"name\": \"minecraft:stripped_warped_stem\",\r\n        \"id\": -241,\r\n        \"oldId\": -241\r\n    },\r\n    {\r\n        \"name\": \"minecraft:structure_block\",\r\n        \"id\": 252,\r\n        \"oldId\": 252\r\n    },\r\n    {\r\n        \"name\": \"minecraft:structure_void\",\r\n        \"id\": 217,\r\n        \"oldId\": 217\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sugar\",\r\n        \"id\": 414,\r\n        \"oldId\": 353\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sugar_cane\",\r\n        \"id\": 383,\r\n        \"oldId\": 338\r\n    },\r\n    {\r\n        \"name\": \"minecraft:suspicious_stew\",\r\n        \"id\": 579,\r\n        \"oldId\": 734\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sweet_berries\",\r\n        \"id\": 287,\r\n        \"oldId\": 477\r\n    },\r\n    {\r\n        \"name\": \"minecraft:sweet_berry_bush\",\r\n        \"id\": -207,\r\n        \"oldId\": -207\r\n    },\r\n    {\r\n        \"name\": \"minecraft:tallgrass\",\r\n        \"id\": 31,\r\n        \"oldId\": 31\r\n    },\r\n    {\r\n        \"name\": \"minecraft:target\",\r\n        \"id\": -239,\r\n        \"oldId\": -239\r\n    },\r\n    {\r\n        \"name\": \"minecraft:tnt\",\r\n        \"id\": 46,\r\n        \"oldId\": 46\r\n    },\r\n    {\r\n        \"name\": \"minecraft:tnt_minecart\",\r\n        \"id\": 515,\r\n        \"oldId\": 407\r\n    },\r\n    {\r\n        \"name\": \"minecraft:torch\",\r\n        \"id\": 50,\r\n        \"oldId\": 50\r\n    },\r\n    {\r\n        \"name\": \"minecraft:totem_of_undying\",\r\n        \"id\": 558,\r\n        \"oldId\": 450\r\n    },\r\n    {\r\n        \"name\": \"minecraft:trapdoor\",\r\n        \"id\": 96,\r\n        \"oldId\": 96\r\n    },\r\n    {\r\n        \"name\": \"minecraft:trapped_chest\",\r\n        \"id\": 146,\r\n        \"oldId\": 146\r\n    },\r\n    {\r\n        \"name\": \"minecraft:trident\",\r\n        \"id\": 536,\r\n        \"oldId\": 455\r\n    },\r\n    {\r\n        \"name\": \"minecraft:tripwire\",\r\n        \"id\": 132,\r\n        \"oldId\": 132\r\n    },\r\n    {\r\n        \"name\": \"minecraft:tripwire_hook\",\r\n        \"id\": 131,\r\n        \"oldId\": 131\r\n    },\r\n    {\r\n        \"name\": \"minecraft:tropical_fish\",\r\n        \"id\": 266,\r\n        \"oldId\": 461\r\n    },\r\n    {\r\n        \"oldData\": 4,\r\n        \"name\": \"minecraft:tropical_fish_bucket\",\r\n        \"id\": 366,\r\n        \"oldId\": 325\r\n    },\r\n    {\r\n        \"name\": \"minecraft:tropical_fish_spawn_egg\",\r\n        \"id\": 477,\r\n        \"oldId\": 383,\r\n        \"oldData\": 111\r\n    },\r\n    {\r\n        \"name\": \"minecraft:turtle_egg\",\r\n        \"id\": -159,\r\n        \"oldId\": -159\r\n    },\r\n    {\r\n        \"name\": \"minecraft:turtle_helmet\",\r\n        \"id\": 563,\r\n        \"oldId\": 469\r\n    },\r\n    {\r\n        \"name\": \"minecraft:turtle_spawn_egg\",\r\n        \"id\": 483,\r\n        \"oldId\": 383,\r\n        \"oldData\": 74\r\n    },\r\n    {\r\n        \"name\": \"minecraft:twisting_vines\",\r\n        \"id\": -287,\r\n        \"oldId\": -287\r\n    },\r\n    {\r\n        \"name\": \"minecraft:underwater_torch\",\r\n        \"id\": 239,\r\n        \"oldId\": 239\r\n    },\r\n    {\r\n        \"name\": \"minecraft:undyed_shulker_box\",\r\n        \"id\": 205,\r\n        \"oldId\": 205\r\n    },\r\n    {\r\n        \"name\": \"minecraft:unknown\",\r\n        \"id\": -305\r\n    },\r\n    {\r\n        \"name\": \"minecraft:unlit_redstone_torch\",\r\n        \"id\": 75,\r\n        \"oldId\": 75\r\n    },\r\n    {\r\n        \"name\": \"minecraft:unpowered_comparator\",\r\n        \"id\": 149,\r\n        \"oldId\": 149\r\n    },\r\n    {\r\n        \"name\": \"minecraft:unpowered_repeater\",\r\n        \"id\": 93,\r\n        \"oldId\": 93\r\n    },\r\n    {\r\n        \"name\": \"minecraft:vex_spawn_egg\",\r\n        \"id\": 474,\r\n        \"oldId\": 383,\r\n        \"oldData\": 105\r\n    },\r\n    {\r\n        \"name\": \"minecraft:villager_spawn_egg\",\r\n        \"id\": 447,\r\n        \"oldId\": 383,\r\n        \"oldData\": 15\r\n    },\r\n    {\r\n        \"name\": \"minecraft:vindicator_spawn_egg\",\r\n        \"id\": 472,\r\n        \"oldId\": 383,\r\n        \"oldData\": 57\r\n    },\r\n    {\r\n        \"name\": \"minecraft:vine\",\r\n        \"id\": 106,\r\n        \"oldId\": 106\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wall_banner\",\r\n        \"id\": 177,\r\n        \"oldId\": 177\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wall_sign\",\r\n        \"id\": 68,\r\n        \"oldId\": 68\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wandering_trader_spawn_egg\",\r\n        \"id\": 490,\r\n        \"oldId\": 383,\r\n        \"oldData\": 118\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_button\",\r\n        \"id\": -261,\r\n        \"oldId\": -261\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_door\",\r\n        \"id\": 606,\r\n        \"oldId\": 756\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_double_slab\",\r\n        \"id\": -267,\r\n        \"oldId\": -267\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_fence\",\r\n        \"id\": -257,\r\n        \"oldId\": -257\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_fence_gate\",\r\n        \"id\": -259,\r\n        \"oldId\": -259\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_fungus\",\r\n        \"id\": -229,\r\n        \"oldId\": -229\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_fungus_on_a_stick\",\r\n        \"id\": 607,\r\n        \"oldId\": 757\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_hyphae\",\r\n        \"id\": -298,\r\n        \"oldId\": -298\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_nylium\",\r\n        \"id\": -233,\r\n        \"oldId\": -233\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_planks\",\r\n        \"id\": -243,\r\n        \"oldId\": -243\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_pressure_plate\",\r\n        \"id\": -263,\r\n        \"oldId\": -263\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_roots\",\r\n        \"id\": -224,\r\n        \"oldId\": -224\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_sign\",\r\n        \"id\": 604,\r\n        \"oldId\": 754\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_slab\",\r\n        \"id\": -265,\r\n        \"oldId\": -265\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_stairs\",\r\n        \"id\": -255,\r\n        \"oldId\": -255\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_standing_sign\",\r\n        \"id\": -251,\r\n        \"oldId\": -251\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_stem\",\r\n        \"id\": -226,\r\n        \"oldId\": -226\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_trapdoor\",\r\n        \"id\": -247,\r\n        \"oldId\": -247\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_wall_sign\",\r\n        \"id\": -253,\r\n        \"oldId\": -253\r\n    },\r\n    {\r\n        \"name\": \"minecraft:warped_wart_block\",\r\n        \"id\": -227,\r\n        \"oldId\": -227\r\n    },\r\n    {\r\n        \"name\": \"minecraft:water\",\r\n        \"id\": 9,\r\n        \"oldId\": 9\r\n    },\r\n    {\r\n        \"oldData\": 8,\r\n        \"name\": \"minecraft:water_bucket\",\r\n        \"id\": 362,\r\n        \"oldId\": 325\r\n    },\r\n    {\r\n        \"name\": \"minecraft:waterlily\",\r\n        \"id\": 111,\r\n        \"oldId\": 111\r\n    },\r\n    {\r\n        \"name\": \"minecraft:web\",\r\n        \"id\": 30,\r\n        \"oldId\": 30\r\n    },\r\n    {\r\n        \"name\": \"minecraft:weeping_vines\",\r\n        \"id\": -231,\r\n        \"oldId\": -231\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wheat\",\r\n        \"id\": 334,\r\n        \"oldId\": 296\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wheat_seeds\",\r\n        \"id\": 291,\r\n        \"oldId\": 295\r\n    },\r\n    {\r\n        \"oldData\": 19,\r\n        \"name\": \"minecraft:white_dye\",\r\n        \"id\": 408,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:white_glazed_terracotta\",\r\n        \"id\": 220,\r\n        \"oldId\": 220\r\n    },\r\n    {\r\n        \"name\": \"minecraft:witch_spawn_egg\",\r\n        \"id\": 450,\r\n        \"oldId\": 383,\r\n        \"oldData\": 45\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wither_rose\",\r\n        \"id\": -216,\r\n        \"oldId\": -216\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wither_skeleton_spawn_egg\",\r\n        \"id\": 462,\r\n        \"oldId\": 383,\r\n        \"oldData\": 48\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wolf_spawn_egg\",\r\n        \"id\": 437,\r\n        \"oldId\": 383,\r\n        \"oldData\": 14\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wood\",\r\n        \"id\": -212,\r\n        \"oldId\": -212\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wooden_axe\",\r\n        \"id\": 311,\r\n        \"oldId\": 271\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wooden_button\",\r\n        \"id\": 143,\r\n        \"oldId\": 143\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wooden_door\",\r\n        \"id\": 359,\r\n        \"oldId\": 324\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wooden_hoe\",\r\n        \"id\": 329,\r\n        \"oldId\": 290\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wooden_pickaxe\",\r\n        \"id\": 310,\r\n        \"oldId\": 270\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wooden_pressure_plate\",\r\n        \"id\": 72,\r\n        \"oldId\": 72\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wooden_shovel\",\r\n        \"id\": 309,\r\n        \"oldId\": 269\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wooden_slab\",\r\n        \"id\": 158,\r\n        \"oldId\": 158\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wooden_sword\",\r\n        \"id\": 308,\r\n        \"oldId\": 268\r\n    },\r\n    {\r\n        \"name\": \"minecraft:wool\",\r\n        \"id\": 35,\r\n        \"oldId\": 35\r\n    },\r\n    {\r\n        \"name\": \"minecraft:writable_book\",\r\n        \"id\": 500,\r\n        \"oldId\": 386\r\n    },\r\n    {\r\n        \"name\": \"minecraft:written_book\",\r\n        \"id\": 501,\r\n        \"oldId\": 387\r\n    },\r\n    {\r\n        \"oldData\": 11,\r\n        \"name\": \"minecraft:yellow_dye\",\r\n        \"id\": 404,\r\n        \"oldId\": 351\r\n    },\r\n    {\r\n        \"name\": \"minecraft:yellow_flower\",\r\n        \"id\": 37,\r\n        \"oldId\": 37\r\n    },\r\n    {\r\n        \"name\": \"minecraft:yellow_glazed_terracotta\",\r\n        \"id\": 224,\r\n        \"oldId\": 224\r\n    },\r\n    {\r\n        \"name\": \"minecraft:zoglin_spawn_egg\",\r\n        \"id\": 496,\r\n        \"oldId\": 383,\r\n        \"oldData\": 126\r\n    },\r\n    {\r\n        \"name\": \"minecraft:zombie_horse_spawn_egg\",\r\n        \"id\": 466,\r\n        \"oldId\": 383,\r\n        \"oldData\": 27\r\n    },\r\n    {\r\n        \"name\": \"minecraft:zombie_pigman_spawn_egg\",\r\n        \"id\": 446,\r\n        \"oldId\": 383,\r\n        \"oldData\": 36\r\n    },\r\n    {\r\n        \"name\": \"minecraft:zombie_spawn_egg\",\r\n        \"id\": 445,\r\n        \"oldId\": 383,\r\n        \"oldData\": 32\r\n    },\r\n    {\r\n        \"name\": \"minecraft:zombie_villager_spawn_egg\",\r\n        \"id\": 475,\r\n        \"oldId\": 383,\r\n        \"oldData\": 44\r\n    }\r\n]") . unwrap () ;
                            let legacy_network_map = palette
                                .iter()
                                .flat_map(|x| {
                                    if let Some(_) = x.oldId {
                                        let full_id = (x.id as i32) << 16
                                            | (x.oldData.unwrap_or(0) as i32 & 0x7FFF) << 1;
                                        Some((
                                            full_id,
                                            x.id << 1 | (x.oldData.map(|_| 1).unwrap_or(0)),
                                        ))
                                    } else {
                                        None
                                    }
                                })
                                .collect::<HashMap<_, _>>();
                            object
                                .iter()
                                .filter(|x| x.nbt.is_none())
                                .enumerate()
                                .flat_map(|(i, x)| {
                                    let data = x.damage.unwrap_or(-1);
                                    let full_network_id = x.id << 16 | (data & 0x7FFF) << 1;
                                    let full_network_id =
                                        if let Some(e) = legacy_network_map.get(&full_network_id) {
                                            e
                                        } else {
                                            if let Some(e) = legacy_network_map
                                                .get(&(x.id << 16 | (0 & 0x7FFF) << 1))
                                            {
                                                e
                                            } else {
                                                return None;
                                            }
                                        };
                                    let network_id = full_network_id >> 1;
                                    let aux = 1;
                                    let meta = if (full_network_id & 0x1) != 0 {
                                        0
                                    } else {
                                        x.damage.unwrap_or(-1)
                                    };
                                    let aux = aux | ((meta & 0x7FFF) << 8);
                                    Some(Slot {
                                        position: UnsignedVarInt(i as u32 + 1),
                                        item: Item {
                                            network_id: VarInt(network_id as i32),
                                            aux_value: VarInt(aux),
                                            has_compound_tag: Le(0),
                                            can_place_on: Vec::new().into(),
                                            can_destroy: Vec::new().into(),
                                        },
                                    })
                                })
                                .collect::<Vec<_>>()
                                .into()
                        },
                    }
                }
            }
            pub struct Slot {
                position: UnsignedVarInt,
                item: Item,
            }
            impl crate::traits::MCPEPacketData for Slot {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        position: reader.auto_decode().map_err(|x| x.map("position"))?,
                        item: reader.auto_decode().map_err(|x| x.map("item"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.position
                        .encode(writer)
                        .map_err(|x| x.map("position"))?;
                    self.item.encode(writer).map_err(|x| x.map("item"))?;
                    Ok(())
                }
            }
            pub struct Item {
                network_id: VarInt,
                aux_value: VarInt,
                has_compound_tag: Le<i16>,
                can_place_on: VecIndexed<String, VarInt>,
                can_destroy: VecIndexed<String, VarInt>,
            }
            impl crate::traits::MCPEPacketData for Item {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        network_id: reader.auto_decode().map_err(|x| x.map("network_id"))?,
                        aux_value: reader.auto_decode().map_err(|x| x.map("aux_value"))?,
                        has_compound_tag: reader
                            .auto_decode()
                            .map_err(|x| x.map("has_compound_tag"))?,
                        can_place_on: reader.auto_decode().map_err(|x| x.map("can_place_on"))?,
                        can_destroy: reader.auto_decode().map_err(|x| x.map("can_destroy"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.network_id
                        .encode(writer)
                        .map_err(|x| x.map("network_id"))?;
                    self.aux_value
                        .encode(writer)
                        .map_err(|x| x.map("aux_value"))?;
                    self.has_compound_tag
                        .encode(writer)
                        .map_err(|x| x.map("has_compound_tag"))?;
                    self.can_place_on
                        .encode(writer)
                        .map_err(|x| x.map("can_place_on"))?;
                    self.can_destroy
                        .encode(writer)
                        .map_err(|x| x.map("can_destroy"))?;
                    Ok(())
                }
            }
        }
        pub use creative_content::*;
        mod biome_definition_list {
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::prelude::StaticData;
            pub struct BiomeDefinitionList {
                inventory: StaticData<'static, u8>,
            }
            impl crate::traits::MCPEPacketData for BiomeDefinitionList {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        inventory: reader.auto_decode().map_err(|x| x.map("inventory"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.inventory
                        .encode(writer)
                        .map_err(|x| x.map("inventory"))?;
                    Ok(())
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for BiomeDefinitionList {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        BiomeDefinitionList {
                            inventory: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("BiomeDefinitionList");
                            let _ = debug_trait_builder.field("inventory", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacket for BiomeDefinitionList {
                const PACKET_ID: u8 = 122u8;
            }
            pub const BIOME_DEFINITION_LIST : BiomeDefinitionList = BiomeDefinitionList { inventory : StaticData (b"\n\x00\n\rbamboo_jungle\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfallfff?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfallfff?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x1cextended_edge_transformation\n\x02\x08\tcondition\xac\x04{\"all_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"jungle\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"ocean\"},{\"any_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"forest\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"cold\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"hills\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mega\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"birch\"}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x0bjungle_edge\x03\x06weight\x02\x00\x00\t\x14hills_transformation\n\x02\x08\x05biome\x13bamboo_jungle_hills\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\x06bamboo\x06jungle\x07monster\toverworld\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x13bamboo_jungle_hills\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfallfff?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfallfff?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x1cextended_edge_transformation\n\x02\x08\tcondition\xac\x04{\"all_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"jungle\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"ocean\"},{\"any_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"forest\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"cold\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"hills\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mega\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"birch\"}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x0bjungle_edge\x03\x06weight\x02\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\x06bamboo\x05hills\x06jungle\x07monster\toverworld\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n\rbasalt_deltas\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00@\x00\n!minecraft:nether_generation_rules\x05\x0ftarget_altitude\x00\x00\x00\x00\x05\x0ftarget_humidity\x00\x00\x00\x00\x05\x12target_temperature\x00\x00\x00\xbf\x05\x10target_weirdness\x00\x00\x00\x00\x05\x06weight333>\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\rbasalt_deltas\x06nether\x0bspawn_ghast\x16spawn_many_magma_cubes\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00@\x00\n\x05beach\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xcc\xcc>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xcc\xcc>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xccL?\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x05beach\x07monster\toverworld\x04warm\x05\x0btemperature\xcd\xccL?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0cbirch_forest\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x19?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x19?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x9a\x99\x19?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x00\x03\x06weight\x02\x00\t\x14hills_transformation\n\x02\x08\x05biome\x12birch_forest_hills\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x14birch_forest_mutated\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\x0bbee_habitat\x05birch\x06forest\x07monster\toverworld\x05\x0btemperature\x9a\x99\x19?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x12birch_forest_hills\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x19?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x19?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x9a\x99\x19?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15mutate_transformation\n\x02\x08\x05biome\x1abirch_forest_hills_mutated\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0e\x06animal\x0bbee_habitat\x05birch\x06forest\x05hills\x07monster\toverworld\x05\x0btemperature\x9a\x99\x19?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x1abirch_forest_hills_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0e\x06animal\x05birch\x06forest\x05hills\x07monster\x07mutated\x14overworld_generation\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x14birch_forest_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0e\x06animal\x0bbee_habitat\x05birch\x06forest\x07monster\x07mutated\x14overworld_generation\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\n\ncold_beach\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xccL=\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x14shore_transformation\n\x02\x08\x05biome\ncold_beach\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x05beach\x04cold\x07monster\toverworld\x05\x0btemperature\xcd\xccL=\x05\twhite_ash\x00\x00\x00\x00\x00\n\ncold_ocean\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x06\x03\x06weight\x02\x00\t\x14river_transformation\n\x02\x08\x05biome\ncold_ocean\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\ncold_ocean\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x04cold\x07monster\x05ocean\toverworld\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n\ncold_taiga\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xcc\xcc>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xcc\xcc>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00\xbf\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x08\x03\x06weight\x02\x00\t\x14hills_transformation\n\x02\x08\x05biome\x10cold_taiga_hills\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x12cold_taiga_mutated\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\ncold_beach\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\x04cold\x06forest\x07monster\toverworld\x05taiga\x05\x0btemperature\x00\x00\x00\xbf\x05\twhite_ash\x00\x00\x00\x00\x00\n\x10cold_taiga_hills\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xcc\xcc>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xcc\xcc>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00\xbf\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x14shore_transformation\n\x02\x08\x05biome\ncold_beach\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0e\x06animal\x04cold\x06forest\x05hills\x07monster\toverworld\x05taiga\x05\x0btemperature\x00\x00\x00\xbf\x05\twhite_ash\x00\x00\x00\x00\x00\n\x12cold_taiga_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xcc\xcc>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xcc\xcc>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00\xbf\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0e\x06animal\x04cold\x06forest\x07monster\x07mutated\x14overworld_generation\x05taiga\x05\x0btemperature\x00\x00\x00\xbf\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0ecrimson_forest\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x80>\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n!minecraft:nether_generation_rules\x05\x0ftarget_altitude\x00\x00\x00\x00\x05\x0ftarget_humidity\x00\x00\x00\x00\x05\x12target_temperature\xcd\xcc\xcc>\x05\x10target_weirdness\x00\x00\x00\x00\x05\x06weight\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x80>\t\x04tags\x08\n\x0ecrimson_forest\x06nether\x11netherwart_forest\x1bspawn_few_zombified_piglins\x0cspawn_piglin\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0fdeep_cold_ocean\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x06\x03\x06weight\x02\x00\t\x14river_transformation\n\x02\x08\x05biome\x0fdeep_cold_ocean\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\x0fdeep_cold_ocean\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x04cold\x04deep\x07monster\x05ocean\toverworld\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x11deep_frozen_ocean\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x08\x03\x06weight\x02\x00\t\x14river_transformation\n\x02\x08\x05biome\x11deep_frozen_ocean\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\x11deep_frozen_ocean\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x04deep\x06frozen\x07monster\x05ocean\toverworld\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n\x13deep_lukewarm_ocean\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x04\x03\x06weight\x02\x00\t\x14river_transformation\n\x02\x08\x05biome\x13deep_lukewarm_ocean\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\x13deep_lukewarm_ocean\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x04deep\x08lukewarm\x07monster\x05ocean\toverworld\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n\ndeep_ocean\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x00\x03\x06weight\x02\x00\t\x14hills_transformation\n\x04\x08\x05biome\x06plains\x03\x06weight\x02\x00\x08\x05biome\x06forest\x03\x06weight\x02\x00\t\x14river_transformation\n\x02\x08\x05biome\ndeep_ocean\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\ndeep_ocean\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x04deep\x07monster\x05ocean\toverworld\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0fdeep_warm_ocean\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x14river_transformation\n\x02\x08\x05biome\x0fdeep_warm_ocean\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\x0fdeep_warm_ocean\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x04deep\x07monster\x05ocean\toverworld\x04warm\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x06desert\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\'minecraft:legacy_world_generation_rules\t$legacy_pre_hills_edge_transformation\n\x02\x08\tcondition\x98\x01{\"all_of\":[{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"ice_plains\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x18extreme_hills_plus_trees\x03\x06weight\x02\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x02\x03\x06weight\x06\x00\t\x14hills_transformation\n\x02\x08\x05biome\x0cdesert_hills\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x0edesert_mutated\x03\x06weight\x02\x00\t\x1dpre_hills_edge_transformation\n\x02\x08\tcondition\x98\x01{\"all_of\":[{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"ice_plains\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x18extreme_hills_plus_trees\x03\x06weight\x02\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x06\x06desert\x07monster\toverworld\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0cdesert_hills\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x06desert\x05hills\x07monster\toverworld\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0edesert_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x06desert\x07monster\x07mutated\x14overworld_generation\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\rextreme_hills\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xccL>\x05\twhite_ash\x00\x00\x00\x00\x00\n\'minecraft:legacy_world_generation_rules\t$legacy_pre_hills_edge_transformation\n\x02\x08\tcondition\xb3\x01{\"all_of\":[{\"any_of\":[{\"operator\":3,\"subject\":0,\"test\":\"is_temperature_value\",\"value\":0.2000000029802322},{\"operator\":4,\"subject\":0,\"test\":\"is_temperature_value\",\"value\":1.0}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x12extreme_hills_edge\x03\x06weight\x02\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x04\x03\x0btemperature\x00\x03\x06weight\x02\x00\x03\x0btemperature\x06\x03\x06weight\x02\x00\t\x14hills_transformation\n\x02\x08\x05biome\x18extreme_hills_plus_trees\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x15extreme_hills_mutated\x03\x06weight\x02\x00\t\x1dpre_hills_edge_transformation\n\x02\x08\tcondition\xb3\x01{\"all_of\":[{\"any_of\":[{\"operator\":3,\"subject\":0,\"test\":\"is_temperature_value\",\"value\":0.2000000029802322},{\"operator\":4,\"subject\":0,\"test\":\"is_temperature_value\",\"value\":1.0}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x12extreme_hills_edge\x03\x06weight\x02\x00\x00\t\x14shore_transformation\n\x02\x08\x05biome\x0bstone_beach\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x06animal\rextreme_hills\x07monster\toverworld\x05\x0btemperature\xcd\xccL>\x05\twhite_ash\x00\x00\x00\x00\x00\n\x12extreme_hills_edge\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xccL>\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x14shore_transformation\n\x02\x08\x05biome\x0bstone_beach\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\x04edge\rextreme_hills\x07monster\x08mountain\toverworld\x05\x0btemperature\xcd\xccL>\x05\twhite_ash\x00\x00\x00\x00\x00\n\x15extreme_hills_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xccL>\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\rextreme_hills\x07monster\x07mutated\toverworld\x05\x0btemperature\xcd\xccL>\x05\twhite_ash\x00\x00\x00\x00\x00\n\x18extreme_hills_plus_trees\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xccL>\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15mutate_transformation\n\x02\x08\x05biome extreme_hills_plus_trees_mutated\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\x0bstone_beach\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\rextreme_hills\x06forest\x07monster\x08mountain\toverworld\x05\x0btemperature\xcd\xccL>\x05\twhite_ash\x00\x00\x00\x00\x00\n extreme_hills_plus_trees_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xccL>\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\rextreme_hills\x06forest\x07monster\x07mutated\toverworld\x05\x0btemperature\xcd\xccL>\x05\twhite_ash\x00\x00\x00\x00\x00\n\rflower_forest\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x0bbee_habitat\rflower_forest\x07monster\x07mutated\toverworld\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x06forest\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x04\x03\x0btemperature\x00\x03\x06weight\x02\x00\x03\x0btemperature\x06\x03\x06weight\x02\x00\t\x14hills_transformation\n\x02\x08\x05biome\x0cforest_hills\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\rflower_forest\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\x0bbee_habitat\x06forest\x07monster\toverworld\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0cforest_hills\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\x0bbee_habitat\x06forest\x05hills\x07monster\toverworld\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0cfrozen_ocean\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x08\x03\x06weight\x02\x00\t\x14river_transformation\n\x02\x08\x05biome\x0cfrozen_ocean\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\x0cfrozen_ocean\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x06frozen\x07monster\x05ocean\toverworld\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0cfrozen_river\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x14shore_transformation\n\x02\x08\x05biome\ncold_beach\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x06\x06frozen\toverworld\x05river\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n\x04hell\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n!minecraft:nether_generation_rules\x05\x0ftarget_altitude\x00\x00\x00\x00\x05\x0ftarget_humidity\x00\x00\x00\x00\x05\x12target_temperature\x00\x00\x00\x00\x05\x10target_weirdness\x00\x00\x00\x00\x05\x06weight\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0e\x06nether\rnether_wastes\x0espawn_endermen\x11spawn_few_piglins\x0bspawn_ghast\x11spawn_magma_cubes\x16spawn_zombified_piglin\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\rice_mountains\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x14shore_transformation\n\x02\x08\x05biome\ncold_beach\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x06frozen\x03ice\x08mountain\toverworld\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n\nice_plains\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x08\x03\x06weight\x06\x00\t\x14hills_transformation\n\x02\x08\x05biome\rice_mountains\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x11ice_plains_spikes\x03\x06weight\x02\x00\t\x14river_transformation\n\x02\x08\x05biome\x0cfrozen_river\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\ncold_beach\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x06frozen\x03ice\nice_plains\toverworld\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n\x11ice_plains_spikes\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x80?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x80?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x14shore_transformation\n\x02\x08\x05biome\ncold_beach\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06frozen\nice_plains\x07monster\x07mutated\toverworld\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n\x06jungle\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfallfff?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfallfff?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x1cextended_edge_transformation\n\x02\x08\tcondition\xac\x04{\"all_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"jungle\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"ocean\"},{\"any_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"forest\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"cold\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"hills\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mega\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"birch\"}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x0bjungle_edge\x03\x06weight\x02\x00\x00\t\x15generate_for_climates\n\x02\x03\x0btemperature\x00\x03\x06weight\x02\x00\t\x14hills_transformation\n\x02\x08\x05biome\x0cjungle_hills\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x0ejungle_mutated\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\x06jungle\x07monster\toverworld\x04rare\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0bjungle_edge\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x1cextended_edge_transformation\n\x02\x08\tcondition\xac\x04{\"all_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"jungle\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"ocean\"},{\"any_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"forest\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"cold\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"hills\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mega\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"birch\"}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x0bjungle_edge\x03\x06weight\x02\x00\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x13jungle_edge_mutated\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\x04edge\x06jungle\x07monster\toverworld\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x13jungle_edge_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x1cextended_edge_transformation\n\x02\x08\tcondition\xac\x04{\"all_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"jungle\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"ocean\"},{\"any_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"forest\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"cold\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"hills\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mega\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"birch\"}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x0bjungle_edge\x03\x06weight\x02\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\x04edge\x06jungle\x07monster\x07mutated\x14overworld_generation\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0cjungle_hills\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfallfff?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfallfff?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x1cextended_edge_transformation\n\x02\x08\tcondition\xac\x04{\"all_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"jungle\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"ocean\"},{\"any_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"forest\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"cold\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"hills\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mega\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"birch\"}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x0bjungle_edge\x03\x06weight\x02\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\x05hills\x06jungle\x07monster\toverworld\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0ejungle_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfallfff?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfallfff?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x1cextended_edge_transformation\n\x02\x08\tcondition\xac\x04{\"all_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"jungle\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"ocean\"},{\"any_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"forest\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"cold\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"hills\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mega\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"birch\"}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x0bjungle_edge\x03\x06weight\x02\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\x06jungle\x07monster\x07mutated\x14overworld_generation\x05\x0btemperature33s?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x13legacy_frozen_ocean\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x14river_transformation\n\x02\x08\x05biome\x13legacy_frozen_ocean\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\x13legacy_frozen_ocean\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x06\x06frozen\x05ocean\toverworld\x05\x0btemperature\x00\x00\x00\x00\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0elukewarm_ocean\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x04\x03\x06weight\x02\x00\t\x14river_transformation\n\x02\x08\x05biome\x0elukewarm_ocean\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\x0elukewarm_ocean\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x08lukewarm\x07monster\x05ocean\toverworld\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n\nmega_taiga\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x9a\x99\x99>\x05\twhite_ash\x00\x00\x00\x00\x00\n\'minecraft:legacy_world_generation_rules\t$legacy_pre_hills_edge_transformation\n\x02\x08\tconditionO{\"all_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"taiga\"}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x05taiga\x03\x06weight\x02\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x06\x03\x06weight\x02\x00\t\x14hills_transformation\n\x02\x08\x05biome\x10mega_taiga_hills\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x15redwood_taiga_mutated\x03\x06weight\x02\x00\t\x1dpre_hills_edge_transformation\n\x02\x08\tconditionO{\"all_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"taiga\"}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x05taiga\x03\x06weight\x02\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0e\x06animal\x06forest\x04mega\x07monster\toverworld\x04rare\x05taiga\x05\x0btemperature\x9a\x99\x99>\x05\twhite_ash\x00\x00\x00\x00\x00\n\x10mega_taiga_hills\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x9a\x99\x99>\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15mutate_transformation\n\x02\x08\x05biome\x1bredwood_taiga_hills_mutated\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0e\x06animal\x06forest\x05hills\x04mega\x07monster\toverworld\x05taiga\x05\x0btemperature\x9a\x99\x99>\x05\twhite_ash\x00\x00\x00\x00\x00\n\x04mesa\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x1cextended_edge_transformation\n\x02\x08\tcondition\x90\x01{\"all_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mesa\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"ocean\"}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x06desert\x03\x06weight\x02\x00\x00\t\x15mutate_transformation\n\x02\x08\x05biome\nmesa_bryce\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\x04mesa\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x06\x04mesa\x07monster\toverworld\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\nmesa_bryce\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\x04mesa\x07monster\x07mutated\toverworld\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0cmesa_plateau\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\'minecraft:legacy_world_generation_rules\t$legacy_pre_hills_edge_transformation\n\x02\x08\tcondition\xe3\x01{\"all_of\":[{\"any_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"plateau\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mesa\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x04mesa\x03\x06weight\x02\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x02\x03\x06weight\x02\x00\t\x14hills_transformation\n\x02\x08\x05biome\x04mesa\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x14mesa_plateau_mutated\x03\x06weight\x02\x00\t\x1dpre_hills_edge_transformation\n\x02\x08\tcondition\xe3\x01{\"all_of\":[{\"any_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"plateau\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mesa\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x04mesa\x03\x06weight\x02\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x04mesa\x07monster\toverworld\x07plateau\x04rare\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\x14mesa_plateau_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x04mesa\x07monster\x07mutated\toverworld\x07plateau\x05stone\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\x12mesa_plateau_stone\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\'minecraft:legacy_world_generation_rules\t$legacy_pre_hills_edge_transformation\n\x02\x08\tcondition\xe3\x01{\"all_of\":[{\"any_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"plateau\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mesa\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x04mesa\x03\x06weight\x02\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x1cextended_edge_transformation\n\x02\x08\tcondition\x90\x01{\"all_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mesa\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"ocean\"}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x06desert\x03\x06weight\x02\x00\x00\t\x15generate_for_climates\n\x02\x03\x0btemperature\x02\x03\x06weight\x04\x00\t\x14hills_transformation\n\x02\x08\x05biome\x04mesa\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x1amesa_plateau_stone_mutated\x03\x06weight\x02\x00\t\x1dpre_hills_edge_transformation\n\x02\x08\tcondition\xe3\x01{\"all_of\":[{\"any_of\":[{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"plateau\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mesa\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x04mesa\x03\x06weight\x02\x00\x00\t\x14shore_transformation\n\x02\x08\x05biome\x12mesa_plateau_stone\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x04mesa\x07monster\toverworld\x07plateau\x04rare\x05stone\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\x1amesa_plateau_stone_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x04mesa\x07monster\x07mutated\toverworld\x07plateau\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0fmushroom_island\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x80?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x80?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperaturefff?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x14river_transformation\n\x02\x08\x05biome\x15mushroom_island_shore\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\x15mushroom_island_shore\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x04\x10mooshroom_island\toverworld\x05\x0btemperaturefff?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x15mushroom_island_shore\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x80?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x80?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperaturefff?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x14river_transformation\n\x02\x08\x05biome\x15mushroom_island_shore\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x06\x10mooshroom_island\toverworld\x05shore\x05\x0btemperaturefff?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x05ocean\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x00\x03\x06weight\x02\x00\t\x14hills_transformation\n\x02\x08\x05biome\ndeep_ocean\x03\x06weight\x02\x00\t\x14river_transformation\n\x02\x08\x05biome\x05ocean\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\x05ocean\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x06\x07monster\x05ocean\toverworld\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x06plains\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xcc\xcc>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xcc\xcc>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xccL?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x06\x03\x0btemperature\x00\x03\x06weight\x06\x00\x03\x0btemperature\x02\x03\x06weight\x02\x00\x03\x0btemperature\x06\x03\x06weight\x02\x00\t\x14hills_transformation\n\x04\x08\x05biome\x0cforest_hills\x03\x06weight\x02\x00\x08\x05biome\x06forest\x03\x06weight\x04\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x10sunflower_plains\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\x0bbee_habitat\x07monster\toverworld\x06plains\x05\x0btemperature\xcd\xccL?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x1bredwood_taiga_hills_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x9a\x99\x99>\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x10\x06animal\x06forest\x05hills\x04mega\x07monster\x07mutated\x14overworld_generation\x05taiga\x05\x0btemperature\x9a\x99\x99>\x05\twhite_ash\x00\x00\x00\x00\x00\n\x15redwood_taiga_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x80>\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0e\x06animal\x06forest\x04mega\x07monster\x07mutated\toverworld\x05taiga\x05\x0btemperature\x00\x00\x80>\x05\twhite_ash\x00\x00\x00\x00\x00\n\x05river\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x14shore_transformation\n\x02\x08\x05biome\x05river\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x04\toverworld\x05river\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n\rroofed_forest\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x00\x03\x06weight\x02\x00\t\x14hills_transformation\n\x02\x08\x05biome\x06plains\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x15roofed_forest_mutated\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\x06forest\x07monster\x12no_legacy_worldgen\toverworld\x06roofed\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x15roofed_forest_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\x06forest\x07monster\x07mutated\x14overworld_generation\x06roofed\x05\x0btemperature333?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x07savanna\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x9a\x99\x99?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x02\x03\x06weight\x04\x00\t\x14hills_transformation\n\x02\x08\x05biome\x0fsavanna_plateau\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x0fsavanna_mutated\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x06animal\x07monster\toverworld\x07savanna\x05\x0btemperature\x9a\x99\x99?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0fsavanna_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xcc\x8c?\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\x07monster\x07mutated\toverworld\x07savanna\x05\x0btemperature\xcd\xcc\x8c?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0fsavanna_plateau\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x80?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15mutate_transformation\n\x02\x08\x05biome\x17savanna_plateau_mutated\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\x07monster\toverworld\x07plateau\x07savanna\x05\x0btemperature\x00\x00\x80?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x17savanna_plateau_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x80?\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\x07monster\x07mutated\toverworld\x07plateau\x07savanna\x05\x0btemperature\x00\x00\x80?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0fsoulsand_valley\x05\x03ash\xcd\xccL=\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\xcd\xccL=\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n!minecraft:nether_generation_rules\x05\x0ftarget_altitude\x00\x00\x00\x00\x05\x0ftarget_humidity\x00\x00\x00\xbf\x05\x12target_temperature\x00\x00\x00\x00\x05\x10target_weirdness\x00\x00\x00\x00\x05\x06weight\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x06nether\x0fsoulsand_valley\x0espawn_endermen\x0bspawn_ghast\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0bstone_beach\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x9a\x99\x99>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xccL>\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x05beach\x07monster\toverworld\x05stone\x05\x0btemperature\xcd\xccL>\x05\twhite_ash\x00\x00\x00\x00\x00\n\x10sunflower_plains\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xcc\xcc>\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xcc\xcc>\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xccL?\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\x0bbee_habitat\x07monster\x07mutated\toverworld\x06plains\x05\x0btemperature\xcd\xccL?\x05\twhite_ash\x00\x00\x00\x00\x00\n\tswampland\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xccL?\x05\twhite_ash\x00\x00\x00\x00\x00\n\'minecraft:legacy_world_generation_rules\t$legacy_pre_hills_edge_transformation\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x00\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\x11swampland_mutated\x03\x06weight\x02\x00\t\x1dpre_hills_edge_transformation\n\x04\x08\tcondition\x9e\x05{\"all_of\":[{\"any_of\":[{\"all_of\":[{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"desert\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"hills\"}]},{\"all_of\":[{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"taiga\"},{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"cold\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"hills\"}]},{\"all_of\":[{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"ice_plains\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"}]}]}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x06plains\x03\x06weight\x02\x00\x00\x08\tcondition\x97\x02{\"all_of\":[{\"operator\":0,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"jungle\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"mutated\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"edge\"},{\"operator\":1,\"subject\":0,\"test\":\"has_biome_tag\",\"value\":\"hills\"}]}\n\x03\x15min_passing_neighbors\x02\t\x0ftransforms_into\n\x02\x08\x05biome\x0bjungle_edge\x03\x06weight\x02\x00\x00\t\x14shore_transformation\n\x02\x08\x05biome\tswampland\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x06animal\x07monster\toverworld\x05swamp\x05\x0btemperature\xcd\xccL?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x11swampland_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\xcd\xccL?\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\x07monster\x07mutated\x14overworld_generation\x05swamp\x05\x0btemperature\xcd\xccL?\x05\twhite_ash\x00\x00\x00\x00\x00\n\x05taiga\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x80>\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x06\x03\x06weight\x02\x00\t\x14hills_transformation\n\x02\x08\x05biome\x0btaiga_hills\x03\x06weight\x02\x00\t\x15mutate_transformation\n\x02\x08\x05biome\rtaiga_mutated\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\n\x06animal\x06forest\x07monster\toverworld\x05taiga\x05\x0btemperature\x00\x00\x80>\x05\twhite_ash\x00\x00\x00\x00\x00\n\x0btaiga_hills\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x80>\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\x06forest\x05hills\x07monster\toverworld\x05taiga\x05\x0btemperature\x00\x00\x80>\x05\twhite_ash\x00\x00\x00\x00\x00\n\rtaiga_mutated\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\xcd\xccL?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x80>\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x0c\x06animal\x06forest\x07monster\x07mutated\x14overworld_generation\x05taiga\x05\x0btemperature\x00\x00\x80>\x05\twhite_ash\x00\x00\x00\x00\x00\n\x07the_end\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x02\x07the_end\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n\nwarm_ocean\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x00\x00\x05\x08downfall\x00\x00\x00?\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n$minecraft:overworld_generation_rules\t\x15generate_for_climates\n\x02\x03\x0btemperature\x02\x03\x06weight\x02\x00\t\x14river_transformation\n\x02\x08\x05biome\nwarm_ocean\x03\x06weight\x02\x00\t\x14shore_transformation\n\x02\x08\x05biome\nwarm_ocean\x03\x06weight\x02\x00\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x07monster\x05ocean\toverworld\x04warm\x05\x0btemperature\x00\x00\x00?\x05\twhite_ash\x00\x00\x00\x00\x00\n\rwarped_forest\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x80>\x05\x08downfall\x00\x00\x00\x00\n\x11minecraft:climate\x05\x03ash\x00\x00\x00\x00\x05\x0bblue_spores\x00\x00\x80>\x05\x08downfall\x00\x00\x00\x00\x05\nred_spores\x00\x00\x00\x00\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\n!minecraft:nether_generation_rules\x05\x0ftarget_altitude\x00\x00\x00\x00\x05\x0ftarget_humidity\x00\x00\x00?\x05\x12target_temperature\x00\x00\x00\x00\x05\x10target_weirdness\x00\x00\x00\x00\x05\x06weight\x00\x00\xc0>\x00\x05\nred_spores\x00\x00\x00\x00\t\x04tags\x08\x08\x06nether\x11netherwart_forest\x0espawn_endermen\rwarped_forest\x05\x0btemperature\x00\x00\x00@\x05\twhite_ash\x00\x00\x00\x00\x00\x00") , } ;
        }
        pub use biome_definition_list::*;
        mod chunk_radius_updated {
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::prelude::VarInt;
            pub struct ChunkRadiusUpdated {
                pub radius: VarInt,
            }
            impl crate::traits::MCPEPacketData for ChunkRadiusUpdated {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        radius: reader.auto_decode().map_err(|x| x.map("radius"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.radius.encode(writer).map_err(|x| x.map("radius"))?;
                    Ok(())
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for ChunkRadiusUpdated {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        ChunkRadiusUpdated {
                            radius: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("ChunkRadiusUpdated");
                            let _ = debug_trait_builder.field("radius", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacket for ChunkRadiusUpdated {
                const PACKET_ID: u8 = 70u8;
            }
        }
        pub use chunk_radius_updated::*;
        mod level_chunk {
            use std::convert::TryInto;
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::prelude::{
                BiomeIdArray, ByteArrayEncapsulated, StaticData, UnsignedVarInt, VarInt,
            };
            pub struct LevelChunkPacket {
                chunk_x: VarInt,
                chunk_z: VarInt,
                sub_chunk_count: UnsignedVarInt,
                cache: bool,
                data: ByteArrayEncapsulated<LevelChunkDataData>,
            }
            impl crate::traits::MCPEPacketData for LevelChunkPacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        chunk_x: reader.auto_decode().map_err(|x| x.map("chunk_x"))?,
                        chunk_z: reader.auto_decode().map_err(|x| x.map("chunk_z"))?,
                        sub_chunk_count: reader
                            .auto_decode()
                            .map_err(|x| x.map("sub_chunk_count"))?,
                        cache: reader.auto_decode().map_err(|x| x.map("cache"))?,
                        data: reader.auto_decode().map_err(|x| x.map("data"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.chunk_x.encode(writer).map_err(|x| x.map("chunk_x"))?;
                    self.chunk_z.encode(writer).map_err(|x| x.map("chunk_z"))?;
                    self.sub_chunk_count
                        .encode(writer)
                        .map_err(|x| x.map("sub_chunk_count"))?;
                    self.cache.encode(writer).map_err(|x| x.map("cache"))?;
                    self.data.encode(writer).map_err(|x| x.map("data"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for LevelChunkPacket {
                const PACKET_ID: u8 = 58u8;
            }
            pub struct LevelChunkSection {
                unknown_byte_1: i8,
                unknown_byte_2: i8,
                storage: StaticData<'static, u8>,
                empty_storage: StaticData<'static, u8>,
            }
            impl crate::traits::MCPEPacketData for LevelChunkSection {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        unknown_byte_1: reader
                            .auto_decode()
                            .map_err(|x| x.map("unknown_byte_1"))?,
                        unknown_byte_2: reader
                            .auto_decode()
                            .map_err(|x| x.map("unknown_byte_2"))?,
                        storage: reader.auto_decode().map_err(|x| x.map("storage"))?,
                        empty_storage: reader.auto_decode().map_err(|x| x.map("empty_storage"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.unknown_byte_1
                        .encode(writer)
                        .map_err(|x| x.map("unknown_byte_1"))?;
                    self.unknown_byte_2
                        .encode(writer)
                        .map_err(|x| x.map("unknown_byte_2"))?;
                    self.storage.encode(writer).map_err(|x| x.map("storage"))?;
                    self.empty_storage
                        .encode(writer)
                        .map_err(|x| x.map("empty_storage"))?;
                    Ok(())
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for LevelChunkSection {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        LevelChunkSection {
                            unknown_byte_1: ref __self_0_0,
                            unknown_byte_2: ref __self_0_1,
                            storage: ref __self_0_2,
                            empty_storage: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("LevelChunkSection");
                            let _ = debug_trait_builder.field("unknown_byte_1", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("unknown_byte_2", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("storage", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("empty_storage", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for LevelChunkSection {
                #[inline]
                fn clone(&self) -> LevelChunkSection {
                    match *self {
                        LevelChunkSection {
                            unknown_byte_1: ref __self_0_0,
                            unknown_byte_2: ref __self_0_1,
                            storage: ref __self_0_2,
                            empty_storage: ref __self_0_3,
                        } => LevelChunkSection {
                            unknown_byte_1: ::core::clone::Clone::clone(&(*__self_0_0)),
                            unknown_byte_2: ::core::clone::Clone::clone(&(*__self_0_1)),
                            storage: ::core::clone::Clone::clone(&(*__self_0_2)),
                            empty_storage: ::core::clone::Clone::clone(&(*__self_0_3)),
                        },
                    }
                }
            }
            impl LevelChunkSection {
                pub fn new() -> Self {
                    Self {
                        unknown_byte_1: 8,
                        unknown_byte_2: 2,
                        storage: StaticData(EMPTY_STORAGE),
                        empty_storage: StaticData(EMPTY_STORAGE),
                    }
                }
            }
            pub struct LevelChunkDataData {
                sections: [LevelChunkSection; 16],
                biome_id_array: BiomeIdArray,
                unknown_byte_1: i8,
            }
            impl crate::traits::MCPEPacketData for LevelChunkDataData {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        sections: reader.auto_decode().map_err(|x| x.map("sections"))?,
                        biome_id_array: reader
                            .auto_decode()
                            .map_err(|x| x.map("biome_id_array"))?,
                        unknown_byte_1: reader
                            .auto_decode()
                            .map_err(|x| x.map("unknown_byte_1"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.sections
                        .encode(writer)
                        .map_err(|x| x.map("sections"))?;
                    self.biome_id_array
                        .encode(writer)
                        .map_err(|x| x.map("biome_id_array"))?;
                    self.unknown_byte_1
                        .encode(writer)
                        .map_err(|x| x.map("unknown_byte_1"))?;
                    Ok(())
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for LevelChunkDataData {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        LevelChunkDataData {
                            sections: ref __self_0_0,
                            biome_id_array: ref __self_0_1,
                            unknown_byte_1: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("LevelChunkDataData");
                            let _ = debug_trait_builder.field("sections", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("biome_id_array", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("unknown_byte_1", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl LevelChunkPacket {
                pub fn new(chunk_x: i32, chunk_z: i32) -> Self {
                    {
                        ::std::io::_print(::core::fmt::Arguments::new_v1(
                            &["A1\n"],
                            &match () {
                                () => [],
                            },
                        ));
                    };
                    Self {
                        chunk_x: VarInt(chunk_x),
                        chunk_z: VarInt(chunk_z),
                        sub_chunk_count: UnsignedVarInt(6),
                        cache: false,
                        data: ByteArrayEncapsulated(LevelChunkDataData {
                            sections: (0..16)
                                .map(|_| {
                                    {
                                        ::std::io::_print(::core::fmt::Arguments::new_v1(
                                            &["A2\n"],
                                            &match () {
                                                () => [],
                                            },
                                        ));
                                    };
                                    LevelChunkSection::new().clone()
                                })
                                .collect::<Vec<_>>()
                                .try_into()
                                .unwrap(),
                            biome_id_array: BiomeIdArray::default(),
                            unknown_byte_1: 0,
                        }),
                    }
                }
            }
            const EMPTY_STORAGE: &'static [u8] = &[
                3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 140, 2,
            ];
        }
        pub use level_chunk::*;
        mod network_chunk_publisher_update {
            use crate::prelude::{BlockVec3, UnsignedVarInt};
            use packet_derive::{packet, MCPEPacketDataAuto};
            pub struct NetworkChunkPublisherUpdatePacket {
                position: BlockVec3,
                radius: UnsignedVarInt,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for NetworkChunkPublisherUpdatePacket {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        NetworkChunkPublisherUpdatePacket {
                            position: ref __self_0_0,
                            radius: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("NetworkChunkPublisherUpdatePacket");
                            let _ = debug_trait_builder.field("position", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("radius", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for NetworkChunkPublisherUpdatePacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        position: reader.auto_decode().map_err(|x| x.map("position"))?,
                        radius: reader.auto_decode().map_err(|x| x.map("radius"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.position
                        .encode(writer)
                        .map_err(|x| x.map("position"))?;
                    self.radius.encode(writer).map_err(|x| x.map("radius"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for NetworkChunkPublisherUpdatePacket {
                const PACKET_ID: u8 = 121u8;
            }
        }
        pub use network_chunk_publisher_update::*;
        mod commands {
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::prelude::UnsignedVarInt;
            pub struct AvailableCommandsPacket {
                pub unknown1: UnsignedVarInt,
                pub unknown2: UnsignedVarInt,
                pub unknown3: UnsignedVarInt,
                pub unknown4: UnsignedVarInt,
                pub unknown5: UnsignedVarInt,
                pub unknown6: UnsignedVarInt,
            }
            impl crate::traits::MCPEPacketData for AvailableCommandsPacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        unknown1: reader.auto_decode().map_err(|x| x.map("unknown1"))?,
                        unknown2: reader.auto_decode().map_err(|x| x.map("unknown2"))?,
                        unknown3: reader.auto_decode().map_err(|x| x.map("unknown3"))?,
                        unknown4: reader.auto_decode().map_err(|x| x.map("unknown4"))?,
                        unknown5: reader.auto_decode().map_err(|x| x.map("unknown5"))?,
                        unknown6: reader.auto_decode().map_err(|x| x.map("unknown6"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.unknown1
                        .encode(writer)
                        .map_err(|x| x.map("unknown1"))?;
                    self.unknown2
                        .encode(writer)
                        .map_err(|x| x.map("unknown2"))?;
                    self.unknown3
                        .encode(writer)
                        .map_err(|x| x.map("unknown3"))?;
                    self.unknown4
                        .encode(writer)
                        .map_err(|x| x.map("unknown4"))?;
                    self.unknown5
                        .encode(writer)
                        .map_err(|x| x.map("unknown5"))?;
                    self.unknown6
                        .encode(writer)
                        .map_err(|x| x.map("unknown6"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for AvailableCommandsPacket {
                const PACKET_ID: u8 = 76u8;
            }
            impl Default for AvailableCommandsPacket {
                fn default() -> Self {
                    Self {
                        unknown1: UnsignedVarInt(0),
                        unknown2: UnsignedVarInt(0),
                        unknown3: UnsignedVarInt(0),
                        unknown4: UnsignedVarInt(0),
                        unknown5: UnsignedVarInt(0),
                        unknown6: UnsignedVarInt(0),
                    }
                }
            }
        }
        pub use commands::*;
        mod set_commands_enabled {
            use packet_derive::{packet, MCPEPacketDataAuto};
            pub struct SetCommandsEnabledPacket {
                enabled: bool,
            }
            impl crate::traits::MCPEPacketData for SetCommandsEnabledPacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        enabled: reader.auto_decode().map_err(|x| x.map("enabled"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.enabled.encode(writer).map_err(|x| x.map("enabled"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for SetCommandsEnabledPacket {
                const PACKET_ID: u8 = 59u8;
            }
        }
        pub use set_commands_enabled::*;
        mod inventory_content {
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::prelude::UnsignedVarInt;
            pub struct InventoryContentPacket {
                pub inventory_id: UnsignedVarInt,
                pub slot: UnsignedVarInt,
            }
            impl crate::traits::MCPEPacketData for InventoryContentPacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        inventory_id: reader.auto_decode().map_err(|x| x.map("inventory_id"))?,
                        slot: reader.auto_decode().map_err(|x| x.map("slot"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.inventory_id
                        .encode(writer)
                        .map_err(|x| x.map("inventory_id"))?;
                    self.slot.encode(writer).map_err(|x| x.map("slot"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for InventoryContentPacket {
                const PACKET_ID: u8 = 49u8;
            }
        }
        pub use inventory_content::*;
        mod available_entity_identifiers {
            use crate::prelude::StaticData;
            use packet_derive::{packet, MCPEPacketDataAuto};
            pub struct AvailableEntityIdentifiersPacket(StaticData<'static, u8>);
            impl crate::traits::MCPEPacketData for AvailableEntityIdentifiersPacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self(reader.auto_decode().map_err(|x| x.map("0"))?))
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.0.encode(writer).map_err(|x| x.map("0"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for AvailableEntityIdentifiersPacket {
                const PACKET_ID: u8 = 119u8;
            }
            pub const AVAILABLE_ENTITY_IDENTIFIERS_PACKET : AvailableEntityIdentifiersPacket = AvailableEntityIdentifiersPacket (StaticData (b"\n\x00\t\x06idlist\n\xde\x01\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x15minecraft:villager_v2\x03\x03rid\xe6\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\rminecraft:cat\x03\x03rid\x96\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x10minecraft:turtle\x03\x03rid\x94\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x11minecraft:chicken\x03\x03rid\x14\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\rminecraft:pig\x03\x03rid\x18\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0fminecraft:sheep\x03\x03rid\x1a\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0eminecraft:wolf\x03\x03rid\x1c\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x12minecraft:villager\x03\x03rid\x1e\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x13minecraft:mooshroom\x03\x03rid \x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0fminecraft:squid\x03\x03rid\"\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x10minecraft:rabbit\x03\x03rid$\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\rminecraft:bat\x03\x03rid&\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x12minecraft:minecart\x03\x03rid\xa8\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x14minecraft:iron_golem\x03\x03rid(\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x10minecraft:ocelot\x03\x03rid,\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0fminecraft:horse\x03\x03rid.\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0fminecraft:llama\x03\x03rid:\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x14minecraft:polar_bear\x03\x03rid8\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x12minecraft:guardian\x03\x03ridb\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0fminecraft:panda\x03\x03rid\xe2\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x10minecraft:parrot\x03\x03rid<\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0eminecraft:husk\x03\x03rid^\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x16minecraft:tropicalfish\x03\x03rid\xde\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x19minecraft:wither_skeleton\x03\x03rid`\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\rminecraft:cod\x03\x03rid\xe0\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x19minecraft:zombie_villager\x03\x03ridX\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x14minecraft:pufferfish\x03\x03rid\xd8\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0fminecraft:witch\x03\x03ridZ\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x10minecraft:salmon\x03\x03rid\xda\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x11minecraft:dolphin\x03\x03rid>\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x10minecraft:donkey\x03\x03rid0\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0eminecraft:mule\x03\x03rid2\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x18minecraft:skeleton_horse\x03\x03rid4\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x16minecraft:zombie_horse\x03\x03rid6\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x19minecraft:hopper_minecart\x03\x03rid\xc0\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x10minecraft:zombie\x03\x03rid@\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x16minecraft:tnt_minecart\x03\x03rid\xc2\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x11minecraft:creeper\x03\x03ridB\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x18minecraft:chest_minecart\x03\x03rid\xc4\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x12minecraft:skeleton\x03\x03ridD\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x10minecraft:spider\x03\x03ridF\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id minecraft:command_block_minecart\x03\x03rid\xc8\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x17minecraft:zombie_pigman\x03\x03ridH\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0fminecraft:slime\x03\x03ridJ\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x12minecraft:enderman\x03\x03ridL\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x14minecraft:silverfish\x03\x03ridN\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x15minecraft:cave_spider\x03\x03ridP\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0fminecraft:ghast\x03\x03ridR\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x14minecraft:magma_cube\x03\x03ridT\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0fminecraft:blaze\x03\x03ridV\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x10minecraft:wither\x03\x03ridh\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x1cminecraft:zombie_villager_v2\x03\x03rid\xe8\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x11minecraft:drowned\x03\x03rid\xdc\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x0fminecraft:stray\x03\x03rid\\\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x18minecraft:elder_guardian\x03\x03ridd\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x1eminecraft:elder_guardian_ghost\x03\x03rid\xf0\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x14minecraft:vindicator\x03\x03ridr\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x11minecraft:phantom\x03\x03ridt\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x11minecraft:ravager\x03\x03ridv\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x16minecraft:ender_dragon\x03\x03ridj\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x11minecraft:shulker\x03\x03ridl\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x13minecraft:endermite\x03\x03ridn\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x15minecraft:armor_stand\x03\x03ridz\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x0eminecraft:item\x03\x03rid\x80\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\rminecraft:tnt\x03\x03rid\x82\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x17minecraft:falling_block\x03\x03rid\x84\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x13minecraft:xp_bottle\x03\x03rid\x88\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x10minecraft:xp_orb\x03\x03rid\x8a\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x1dminecraft:eye_of_ender_signal\x03\x03rid\x8c\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x17minecraft:ender_crystal\x03\x03rid\x8e\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x18minecraft:shulker_bullet\x03\x03rid\x98\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x16minecraft:fishing_hook\x03\x03rid\x9a\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x19minecraft:dragon_fireball\x03\x03rid\x9e\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x0fminecraft:arrow\x03\x03rid\xa0\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x12minecraft:snowball\x03\x03rid\xa2\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\rminecraft:egg\x03\x03rid\xa4\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x12minecraft:painting\x03\x03rid\xa6\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x18minecraft:thrown_trident\x03\x03rid\x92\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x12minecraft:fireball\x03\x03rid\xaa\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x17minecraft:splash_potion\x03\x03rid\xac\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x15minecraft:ender_pearl\x03\x03rid\xae\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x14minecraft:leash_knot\x03\x03rid\xb0\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x16minecraft:wither_skull\x03\x03rid\xb2\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id minecraft:wither_skull_dangerous\x03\x03rid\xb6\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x0eminecraft:boat\x03\x03rid\xb4\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x18minecraft:lightning_bolt\x03\x03rid\xba\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x18minecraft:small_fireball\x03\x03rid\xbc\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x14minecraft:llama_spit\x03\x03rid\xcc\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x1bminecraft:area_effect_cloud\x03\x03rid\xbe\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x1aminecraft:lingering_potion\x03\x03rid\xca\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x1aminecraft:fireworks_rocket\x03\x03rid\x90\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x18minecraft:evocation_fang\x03\x03rid\xce\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x1bminecraft:evocation_illager\x03\x03rid\xd0\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\rminecraft:vex\x03\x03rid\xd2\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x12minecraft:pillager\x03\x03rid\xe4\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x0fminecraft:agent\x03\x03ridp\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x12minecraft:ice_bomb\x03\x03rid\xd4\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x11minecraft:balloon\x03\x03rid\xd6\x01\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\rminecraft:npc\x03\x03ridf\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x17minecraft:tripod_camera\x03\x03rid|\x01\nsummonable\x00\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x10minecraft:piglin\x03\x03rid\xf6\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\rminecraft:cow\x03\x03rid\x16\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x10minecraft:zoglin\x03\x03rid\xfc\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x16minecraft:piglin_brute\x03\x03rid\xfe\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\rminecraft:bee\x03\x03rid\xf4\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x1aminecraft:wandering_trader\x03\x03rid\xec\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x00\x08\x02id\x14minecraft:snow_golem\x03\x03rid*\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\rminecraft:fox\x03\x03rid\xf2\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x10minecraft:hoglin\x03\x03rid\xf8\x01\x01\nsummonable\x01\x00\x08\x03bid\x00\x01\x0bhasspawnegg\x01\x08\x02id\x11minecraft:strider\x03\x03rid\xfa\x01\x01\nsummonable\x01\x00\x08\x03bid\nminecraft:\x01\x0bhasspawnegg\x00\x08\x02id\x10minecraft:player\x03\x03rid\x82\x04\x01\nsummonable\x00\x00\x00")) ;
        }
        pub use available_entity_identifiers::*;
        mod adventure_settings {
            use crate::prelude::StaticData;
            use packet_derive::{packet, MCPEPacketDataAuto};
            pub struct AdventureSettingsPacket(StaticData<'static, u8>);
            impl crate::traits::MCPEPacketData for AdventureSettingsPacket {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self(reader.auto_decode().map_err(|x| x.map("0"))?))
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.0.encode(writer).map_err(|x| x.map("0"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for AdventureSettingsPacket {
                const PACKET_ID: u8 = 55u8;
            }
            pub const ADVENTURE_SETTINGS: AdventureSettingsPacket =
                AdventureSettingsPacket(StaticData(&[224, 2, 1, 31, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0]));
        }
        pub use adventure_settings::*;
        mod world {
            mod block_palette {
                use std::collections::HashMap;
                use lazy_static::lazy_static;
                use crate::{
                    prelude::{Le, VarInt},
                    traits::MCPEPacketData,
                };
                pub struct PalettedBlockStorage {
                    palette: Vec<i32>,
                    bit_array: BitArray,
                }
                #[automatically_derived]
                #[allow(unused_qualifications)]
                impl ::core::fmt::Debug for PalettedBlockStorage {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                        match *self {
                            PalettedBlockStorage {
                                palette: ref __self_0_0,
                                bit_array: ref __self_0_1,
                            } => {
                                let mut debug_trait_builder =
                                    f.debug_struct("PalettedBlockStorage");
                                let _ = debug_trait_builder.field("palette", &&(*__self_0_0));
                                let _ = debug_trait_builder.field("bit_array", &&(*__self_0_1));
                                debug_trait_builder.finish()
                            }
                        }
                    }
                }
                #[automatically_derived]
                #[allow(unused_qualifications)]
                impl ::core::clone::Clone for PalettedBlockStorage {
                    #[inline]
                    fn clone(&self) -> PalettedBlockStorage {
                        match *self {
                            PalettedBlockStorage {
                                palette: ref __self_0_0,
                                bit_array: ref __self_0_1,
                            } => PalettedBlockStorage {
                                palette: ::core::clone::Clone::clone(&(*__self_0_0)),
                                bit_array: ::core::clone::Clone::clone(&(*__self_0_1)),
                            },
                        }
                    }
                }
                impl PalettedBlockStorage {
                    pub fn new(version: &'static BitArrayVersion) -> Self {
                        Self {
                            palette: {
                                let mut vec = Vec::with_capacity(16);
                                vec.push(GLOBAL_BLOCK_PALETTE.get_or_create_runtime_id(0, 0));
                                vec
                            },
                            bit_array: version.create_palette([0; 4096]),
                        }
                    }
                    fn get_palette_header(&self, runtime: bool) -> u8 {
                        return (self.bit_array.version.bits as u8) << 1
                            | if runtime { 1 } else { 0 };
                    }
                    pub fn set_block(&mut self, index: i32, runtime_id: i32) {
                        let id = self.id_for(runtime_id);
                        self.bit_array.set(index, id);
                    }
                    fn id_for(&mut self, runtime_id: i32) -> i32 {
                        if let Some(index) = self.palette.iter().position(|x| x == &runtime_id) {
                            index as i32
                        } else {
                            let index = self.palette.len() as i32;
                            let version = self.bit_array.version;
                            if index > version.max_entry_value {
                                self.resize(version.next_version.unwrap());
                            }
                            self.palette.push(runtime_id);
                            return index;
                        }
                    }
                    fn resize(&mut self, version: &'static BitArrayVersion) {
                        let mut new_bit_array = version.create_palette([0; 4096]);
                        (0..4096).for_each(|x| {
                            new_bit_array.set(x, self.bit_array.get(x));
                        });
                        self.bit_array = new_bit_array;
                    }
                }
                impl MCPEPacketData for PalettedBlockStorage {
                    fn decode(
                        _: &mut impl crate::traits::Reader,
                    ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                        ::core::panicking::panic("not yet implemented")
                    }
                    fn encode(
                        &self,
                        writer: &mut impl crate::traits::Writer,
                    ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                        self.get_palette_header(true).encode(writer)?;
                        for var4 in &self.bit_array.words {
                            Le(*var4).encode(writer)?;
                        }
                        VarInt(self.palette.len() as i32).encode(writer)?;
                        for i in &self.palette {
                            VarInt(*i).encode(writer)?;
                        }
                        Ok(())
                    }
                }
                pub struct BitArrayVersion {
                    bits: i32,
                    entries_per_word: i32,
                    max_entry_value: i32,
                    next_version: Option<&'static BitArrayVersion>,
                }
                #[automatically_derived]
                #[allow(unused_qualifications)]
                impl ::core::fmt::Debug for BitArrayVersion {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                        match *self {
                            BitArrayVersion {
                                bits: ref __self_0_0,
                                entries_per_word: ref __self_0_1,
                                max_entry_value: ref __self_0_2,
                                next_version: ref __self_0_3,
                            } => {
                                let mut debug_trait_builder = f.debug_struct("BitArrayVersion");
                                let _ = debug_trait_builder.field("bits", &&(*__self_0_0));
                                let _ =
                                    debug_trait_builder.field("entries_per_word", &&(*__self_0_1));
                                let _ =
                                    debug_trait_builder.field("max_entry_value", &&(*__self_0_2));
                                let _ = debug_trait_builder.field("next_version", &&(*__self_0_3));
                                debug_trait_builder.finish()
                            }
                        }
                    }
                }
                pub const V16: BitArrayVersion = BitArrayVersion {
                    bits: 16,
                    entries_per_word: 2,
                    max_entry_value: (1 << 16) - 1,
                    next_version: None,
                };
                pub const V8: BitArrayVersion = BitArrayVersion {
                    bits: 8,
                    entries_per_word: 4,
                    max_entry_value: (1 << 8) - 1,
                    next_version: Some(&V16),
                };
                pub const V6: BitArrayVersion = BitArrayVersion {
                    bits: 6,
                    entries_per_word: 5,
                    max_entry_value: (1 << 6) - 1,
                    next_version: Some(&V8),
                };
                pub const V5: BitArrayVersion = BitArrayVersion {
                    bits: 5,
                    entries_per_word: 6,
                    max_entry_value: (1 << 5) - 1,
                    next_version: Some(&V6),
                };
                pub const V4: BitArrayVersion = BitArrayVersion {
                    bits: 4,
                    entries_per_word: 8,
                    max_entry_value: (1 << 4) - 1,
                    next_version: Some(&V5),
                };
                pub const V3: BitArrayVersion = BitArrayVersion {
                    bits: 3,
                    entries_per_word: 10,
                    max_entry_value: (1 << 3) - 1,
                    next_version: Some(&V4),
                };
                pub const V2: BitArrayVersion = BitArrayVersion {
                    bits: 2,
                    entries_per_word: 16,
                    max_entry_value: (1 << 2) - 1,
                    next_version: Some(&V3),
                };
                pub const V1: BitArrayVersion = BitArrayVersion {
                    bits: 1,
                    entries_per_word: 32,
                    max_entry_value: (1 << 1) - 1,
                    next_version: Some(&V2),
                };
                impl BitArrayVersion {
                    fn create_palette(&'static self, words: [i32; 4096]) -> BitArray {
                        match self.bits {
                            3..=6 => BitArray::from_padded(self, words),
                            _ => BitArray::from_pow2(self, words),
                        }
                    }
                }
                pub struct BitArray {
                    pow2: bool,
                    version: &'static BitArrayVersion,
                    words: [i32; 4096],
                }
                #[automatically_derived]
                #[allow(unused_qualifications)]
                impl ::core::fmt::Debug for BitArray {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                        match *self {
                            BitArray {
                                pow2: ref __self_0_0,
                                version: ref __self_0_1,
                                words: ref __self_0_2,
                            } => {
                                let mut debug_trait_builder = f.debug_struct("BitArray");
                                let _ = debug_trait_builder.field("pow2", &&(*__self_0_0));
                                let _ = debug_trait_builder.field("version", &&(*__self_0_1));
                                let _ = debug_trait_builder.field("words", &&(*__self_0_2));
                                debug_trait_builder.finish()
                            }
                        }
                    }
                }
                #[automatically_derived]
                #[allow(unused_qualifications)]
                impl ::core::clone::Clone for BitArray {
                    #[inline]
                    fn clone(&self) -> BitArray {
                        match *self {
                            BitArray {
                                pow2: ref __self_0_0,
                                version: ref __self_0_1,
                                words: ref __self_0_2,
                            } => BitArray {
                                pow2: ::core::clone::Clone::clone(&(*__self_0_0)),
                                version: ::core::clone::Clone::clone(&(*__self_0_1)),
                                words: ::core::clone::Clone::clone(&(*__self_0_2)),
                            },
                        }
                    }
                }
                impl BitArray {
                    fn from_pow2(version: &'static BitArrayVersion, words: [i32; 4096]) -> Self {
                        Self {
                            pow2: true,
                            version,
                            words,
                        }
                    }
                    fn from_padded(version: &'static BitArrayVersion, words: [i32; 4096]) -> Self {
                        Self {
                            pow2: false,
                            version,
                            words,
                        }
                    }
                    pub fn set(&mut self, index: i32, value: i32) {
                        if self.pow2 {
                            let bit_index = index * self.version.bits;
                            let array_index = (bit_index >> 5) as usize;
                            let offset = bit_index & 31;
                            self.words[array_index] = self.words[array_index]
                                & !((self.version.max_entry_value) << offset)
                                | (value & self.version.max_entry_value) << offset;
                        } else {
                            let array_index = (index / self.version.entries_per_word) as usize;
                            let offset = index % self.version.entries_per_word * self.version.bits;
                            self.words[array_index] = self.words[array_index]
                                & !(self.version.max_entry_value << offset)
                                | (value & self.version.max_entry_value) << offset;
                        }
                    }
                    pub fn get(&self, index: i32) -> i32 {
                        if self.pow2 {
                            let bit_index = index * self.version.bits as i32;
                            let array_index = (bit_index >> 5) as usize;
                            let word_offset = bit_index & 31;
                            self.words[array_index] >> word_offset
                                & (self.version.max_entry_value as i32)
                        } else {
                            let array_index = (index / self.version.entries_per_word) as usize;
                            let offset = index % self.version.entries_per_word * self.version.bits;
                            self.words[array_index] >> offset & self.version.max_entry_value
                        }
                    }
                }
                #[allow(missing_copy_implementations)]
                #[allow(non_camel_case_types)]
                #[allow(dead_code)]
                pub struct GLOBAL_BLOCK_PALETTE {
                    __private_field: (),
                }
                #[doc(hidden)]
                pub static GLOBAL_BLOCK_PALETTE: GLOBAL_BLOCK_PALETTE = GLOBAL_BLOCK_PALETTE {
                    __private_field: (),
                };
                impl ::lazy_static::__Deref for GLOBAL_BLOCK_PALETTE {
                    type Target = GlobalBlockPalette;
                    fn deref(&self) -> &GlobalBlockPalette {
                        #[inline(always)]
                        fn __static_ref_initialize() -> GlobalBlockPalette {
                            GlobalBlockPalette::new()
                        }
                        #[inline(always)]
                        fn __stability() -> &'static GlobalBlockPalette {
                            static LAZY: ::lazy_static::lazy::Lazy<GlobalBlockPalette> =
                                ::lazy_static::lazy::Lazy::INIT;
                            LAZY.get(__static_ref_initialize)
                        }
                        __stability()
                    }
                }
                impl ::lazy_static::LazyStatic for GLOBAL_BLOCK_PALETTE {
                    fn initialize(lazy: &Self) {
                        let _ = &**lazy;
                    }
                }
                pub struct GlobalBlockPalette {
                    legacy_to_runtime_id: HashMap<i32, i32>,
                    _runtime_id_to_legacy: HashMap<i32, i32>,
                }
                impl GlobalBlockPalette {
                    pub fn get_or_create_runtime_id(&self, id: i32, meta: i32) -> i32 {
                        let legacy_id = id << 6 | meta;
                        if let Some(e) = self.legacy_to_runtime_id.get(&legacy_id) {
                            *e
                        } else if let Some(e) = self.legacy_to_runtime_id.get(&(legacy_id << 6)) {
                            *e
                        } else {
                            {
                                ::std::rt::begin_panic_fmt(&::core::fmt::Arguments::new_v1(
                                    &["No runtime ID for unknown block "],
                                    &match (&id,) {
                                        (arg0,) => [::core::fmt::ArgumentV1::new(
                                            arg0,
                                            ::core::fmt::Display::fmt,
                                        )],
                                    },
                                ))
                            };
                        }
                    }
                    fn new() -> Self {
                        let legacy_to_runtime_id : HashMap < i32 , i32 > = "0:134,28099:5434,6860:4036,15435:5818,10949:878,27968:5801,28230:398,2112:4800,8706:4406,2243:6555,397:5535,11211:3769,15173:3313,11215:3766,15169:3309,4224:5386,28492:96,13057:3248,25991:375,13061:3252,4486:5932,10953:882,6336:823,25987:371,8579:5764,25729:3645,10945:874,13065:3254,27972:5805,4482:5928,15439:5822,8448:6103,2116:4804,15042:432,655:4074,15431:5814,28357:4417,26511:6138,26114:4390,28361:4421,28365:4425,26118:4394,23744:3864,4359:6241,26126:4402,4355:6244,26122:4398,6725:4668,6721:4664,12672:4141,4609:6525,13184:3986,28619:3679,13069:3258,14915:4152,6852:4028,28238:406,15046:430,9095:5234,15296:6173,520:4083,16896:6032,1985:6067,11207:3760,4232:5394,25999:383,11203:3763,27845:4762,25995:379,27841:4758,4228:5390,5006:5647,19008:3900,5002:5643,12803:959,12807:956,25733:3649,10957:886,25737:3653,6856:4032,13839:627,4613:6529,6848:4024,516:4079,28623:3683,11596:3800,2759:3779,21632:3945,28234:402,28615:3675,28226:394,524:4087,15300:6177,8710:4410,10560:5599,8325:4009,8321:4005,25344:308,2763:3783,2767:3787,4621:6537,4617:6533,25741:3657,9218:5589,643:4062,26368:3324,1600:4765,11592:3796,9349:6102,2755:3775,29830:4303,28480:84,3712:3415,3843:4013,29532:304,12382:5711,25475:4331,11727:5744,8198:5522,5824:4620,10699:4298,14657:3555,27587:5618,4998:5639,9615:5250,27023:3819,3970:4616,12553:37,16074:4782,14919:4149,27460:4823,24780:3344,26503:6142,10433:77,28869:616,23232:3972,10310:4534,8960:4057,8456:6111,29703:872,9484:4230,14530:4145,11850:4382,9476:4222,25606:106,11330:6237,8067:125,25614:114,4871:5454,6213:4717,6983:5913,9226:5595,13696:4753,28488:92,15427:5810,10052:3834,651:4070,29953:3284,15808:4756,18496:3891,9607:5242,385:5525,29524:296,1477:3753,14407:4602,13315:4000,11719:5736,6344:831,4490:5936,25483:4337,24641:5561,27329:5217,2255:6567,12108:929,28738:4542,21120:3936,12545:29,14788:621,4101:6513,26884:5540,13962:5575,10691:4290,29572:6062,26892:5548,13954:5567,393:5531,16642:6043,2247:6559,5955:6206,3267:4043,15177:3317,25038:3395,12934:3259,12942:3265,29961:3283,27718:3984,1858:5889,11072:964,4109:6521,12505:4365,25864:5793,4117:6513,25856:5785,5963:6214,3275:4051,9861:4241,3529:5469,27011:3807,12104:925,11906:3606,29056:4626,12565:33,3200:6075,10060:3840,24967:3372,8079:128,25165:4463,5443:4021,29318:185,12366:5711,9929:5373,16261:4178,10123:6549,28992:5601,3136:4786,16257:4174,24903:3355,8015:3850,11969:45,7424:3977,3394:4768,14149:4792,7686:3995,27075:3823,7682:3991,9865:4243,3533:5473,25094:3403,25161:4459,20544:3926,3458:950,12569:37,14212:4659,14085:6442,12239:4204,11648:5958,12362:5707,11842:4374,9925:5369,16455:5285,11846:4378,16451:5281,29314:187,26952:5995,1096:4641,1092:4637,14018:5340,7559:908,24768:3335,14470:4794,12442:330,16515:3663,8138:3245,13827:627,10381:6449,1163:4527,16070:4774,12624:3572,12227:4192,11981:57,24907:3363,24709:3325,17984:3882,25288:6,7495:806,10183:5846,11652:5962,14208:4655,26753:162,12378:5707,28996:5605,12045:5503,24971:3376,17920:3881,20608:3927,10119:6540,13831:631,12636:3584,7301:4744,14466:4796,14276:4584,26817:174,10187:5850,9544:6195,1735:4120,29060:4630,27591:5622,6030:5265,9345:6098,12033:5493,12620:3584,25546:5693,12446:334,16519:3667,16134:6050,25348:312,12430:334,25352:314,11588:3792,11584:3788,14272:4580,12426:330,27456:4819,3974:4614,12549:33,1731:4123,512:4075,13966:5579,4800:6181,8460:6115,29699:868,26765:172,28611:3671,12485:4361,10306:4532,27392:5208,9286:151,4236:5386,6153:6090,711:4493,3910:4107,4565:4275,11723:5740,10703:4302,28679:3684,4736:4625,2819:5945,4994:5635,22208:3955,647:4066,27650:5625,10500:3640,25284:4,6411:5425,1167:4531,11787:363,27527:4734,25804:4440,12743:4099,4430:4562,14534:4143,9480:4226,7563:912,28814:4169,5197:854,1667:205,576:6385,25610:110,4033:5872,9984:5378,9409:4587,15360:962,29893:6449,11271:5862,8583:5768,5895:857,4939:5923,2251:6563,26062:3634,25090:3399,26507:6146,4097:6509,6785:6220,26888:5544,25665:409,28353:4413,25487:4334,389:5529,27908:5773,5320:5484,9603:5238,1473:3749,29770:4511,27333:5221,6340:827,9028:893,4494:5940,16832:6020,1806:3730,19520:3908,29512:284,11910:3610,8777:3278,9222:5587,4291:6003,25868:5797,9667:3693,2445:5396,6979:5909,29957:3288,7360:4749,10048:3830,29528:300,25423:3566,27269:142,22144:3954,24832:3345,5959:6210,3271:4047,25026:3383,12501:4361,27714:3980,26694:5980,4113:6509,12930:3261,15618:270,10242:5825,8396:6131,15105:3293,2441:5405,4288:6000,26055:3627,11278:5869,25792:4428,25924:64,6400:5414,12994:5358,12993:5357,28167:5614,28163:5610,10885:4211,10882:4208,10886:4212,27904:5769,15240:940,15236:936,8770:3273,8774:3271,15237:937,17344:3920,26059:3631,8909:980,325:4817,4292:6004,26181:5750,10889:4215,25928:68,6272:6008,25920:60,6403:5417,25796:4432,6792:6227,11405:3719,4549:4275,9166:6486,6788:6223,14848:816,4545:4271,9162:6488,8646:390,8642:386,2434:5398,25931:71,322:4814,4164:4480,26177:5746,12608:3572,11402:3716,6407:5421,4427:4559,19584:3910,26308:5556,6916:812,8782:3277,8778:3279,15232:932,718:4500,15244:944,28417:4445,23296:3973,714:4496,28420:4448,4160:4476,4423:4555,12875:5355,25935:75,326:4812,11406:3720,12612:3576,12997:5361,27651:5626,25927:67,25793:4429,4431:4563,11398:3712,29894:6444,14855:816,5196:853,10754:5269,9163:6489,14851:819,28032:5631,9155:6483,9159:6480,2180:4810,15118:3306,8896:967,29890:6446,16960:6038,25411:3563,26829:174,6019:5254,29897:6451,25280:0,12879:5347,27654:5629,25412:3564,6018:5253,27523:4730,11394:3708,9678:3704,9679:3705,6150:6087,707:4489,12481:4357,5324:5488,1536:5512,4570:4264,6912:808,27655:5630,2822:5948,3907:4110,710:4492,4569:4279,28416:4444,3648:3736,29766:4508,26828:173,9024:889,10369:4646,25539:5688,5891:860,11267:5858,9543:6194,27782:4725,10377:4650,8134:3241,4804:6185,17856:3880,25547:5694,9551:6202,14336:6569,12609:3589,14852:820,5193:850,1671:209,7567:915,7300:4743,15621:273,26956:5999,28551:116,16706:6025,26697:5983,8393:6128,3776:6429,8781:3282,29377:4652,11914:3614,28932:6018,24974:3379,12359:5720,9671:3697,4295:6007,26690:5976,26689:5975,12441:345,26309:5557,6158:6095,25800:4436,16269:4186,10893:4207,12740:4102,5185:842,25419:3569,6157:6094,9290:155,14983:5407,6919:815,4562:4256,28933:6019,16578:5272,9031:896,10116:6544,9857:4237,15233:933,9412:4590,12100:923,4943:5920,25678:422,11274:5865,14343:6569,11655:5965,11266:5857,1672:210,8643:387,1664:202,579:6388,4125:6521,25030:3387,10497:3637,29378:4653,23168:3971,28544:116,2433:5397,3526:5466,24966:3371,5442:4020,25098:3407,22592:3961,12434:322,10191:5854,24835:3348,3462:948,27142:4138,1024:965,29321:192,12367:5728,12235:4200,1155:4519,9928:5372,10127:6546,25162:4460,8012:3854,3395:4769,29520:292,5506:5288,12370:5699,9600:5235,3398:4772,10124:6550,29516:288,24899:3358,27074:3822,7685:3994,27078:3820,7681:3990,10063:3836,25102:3411,29513:285,24970:3375,12231:4196,16066:4776,22720:3963,11779:355,27138:4134,1159:4523,27270:143,16265:4182,16518:3666,26885:5541,9921:5365,9472:4218,12498:4342,12502:4346,16133:6055,10255:5838,9988:5382,25027:3384,1675:213,1088:4633,14275:4583,14022:5338,5962:6213,1679:217,1476:3752,26821:178,7297:4740,29509:281,9985:5379,12228:4193,9540:6191,14471:4794,6026:5261,11783:359,28865:612,16514:3662,25550:5691,1739:4129,27266:139,7361:4750,26757:166,9604:5239,12374:5703,4573:4283,12637:3601,25486:4334,1803:3733,1807:3730,26825:182,1472:3748,9536:6187,12224:4189,24781:3340,11786:362,12438:326,6022:5257,9924:5368,24963:3368,14086:6437,10309:4535,1743:4126,1152:4516,26761:168,25166:4464,8066:124,4046:5885,19968:3916,22656:3962,16130:6052,11843:4375,11847:4379,28801:4156,3783:6436,27206:3744,1095:4640,3779:6432,27202:3740,1091:4636,25543:5685,11790:366,14791:617,8130:3237,12616:3580,9547:6198,10437:81,28612:3672,29698:867,10305:4533,25479:4328,2818:5944,8194:5518,4566:4260,12548:16,3911:4107,10373:4648,4235:5386,29762:4504,9611:5246,26693:5979,14656:3554,6980:5910,20032:3917,29901:6455,25408:3560,12445:349,6154:6091,9223:5587,9091:5230,5189:846,3847:4017,14467:4797,28484:88,29826:4305,25867:5796,6784:6219,25351:308,11854:4386,12160:4172,2946:6073,17536:3953,16963:6038,5958:6209,8397:6132,11334:6235,15617:269,26508:6135,9408:4586,14784:617,12096:919,26063:3635,13068:3257,17472:3942,20160:3919,11270:5861,14339:6572,8582:5767,11651:5961,12573:41,26889:5545,13958:5571,11982:58,9294:159,12032:5492,17408:3931,20096:3918,22784:3965,10120:6546,14403:4605,26241:899,11715:5732,28929:6015,9027:892,6339:826,16582:5276,28103:5438,11918:3618,25415:3560,9230:5593,10946:875,10056:3836,26305:5553,28993:5602,15432:5815,9675:3701,12363:5724,25034:3391,29317:190,4121:6517,29965:3283,1668:206,3530:5470,10501:3641,25860:5789,28548:120,2437:5401,12509:4369,28231:399,396:5534,4354:6243,26121:4397,15172:3312,28364:4424,8576:5761,6861:4037,6859:4035,15434:5817,15170:3310,28100:5435,23616:3862,8705:4405,394:5532,13062:3247,10948:877,28493:97,4483:5929,11212:3770,12800:956,25988:372,4489:5935,25986:370,11210:3768,28235:403,2766:3786,10690:4289,4225:5387,28622:3682,6855:4031,15176:3316,28102:5437,2248:6560,2240:6552,523:4086,2246:6558,15299:6176,525:4088,29952:3283,8711:4411,28229:397,15297:6174,28620:3680,4610:6526,4618:6534,4612:6528,9231:5593,12935:3259,25859:5788,19392:3906,12933:3264,25857:5786,12929:3260,4616:6532,2119:4800,19648:3911,4098:6494,2252:6564,15178:3318,28485:89,8832:201,15426:5809,8961:4058,23360:3974,29954:3285,28356:4416,650:4069,26506:6145,26242:900,13070:3253,27846:4763,11204:3764,25736:3652,12544:12,4233:5395,6341:828,4491:5937,4495:5941,12806:956,10956:885,10434:78,8455:6110,25992:376,3969:4615,646:4065,28352:4412,29696:865,29825:4304,2496:822,16899:6032,9090:5229,3840:4010,15041:431,6726:4669,25603:103,26113:4389,11333:6240,4868:5458,6212:4716,9487:4233,27588:5619,19904:3915,6976:5906,25345:309,9219:5590,9217:5588,644:4063,23104:3970,29831:4303,26764:171,29533:305,3842:4012,9088:5227,26762:169,10700:4299,27590:5621,25216:3843,14658:3556,12288:931,4239:5386,25474:4330,16075:4783,2758:3778,10698:4297,26891:5547,9346:6099,5001:5642,1728:4120,8199:5523,11597:3801,515:4078,12941:3270,14787:620,2254:6566,3584:3737,29531:303,16643:6041,28608:3668,13832:632,10180:5843,12423:343,6982:5912,8326:4004,29960:3291,12943:3265,25347:311,27717:3983,25871:5800,9225:5594,5956:6207,11589:3793,25353:315,7808:3842,10051:3833,25865:5794,8320:4004,28997:5606,25039:3396,26754:163,652:4071,15428:5811,28487:91,7494:805,1478:3748,25994:378,28237:405,16067:4777,23872:3866,10692:4291,8449:6104,6853:4029,9866:4244,24642:5562,13056:3247,14400:4602,6724:4667,29184:4056,13064:3253,3971:4617,4481:5927,28366:4426,8578:5763,9922:5366,8457:6112,29702:871,28358:4418,12238:4203,2117:4805,11331:6238,3008:636,25095:3404,26123:4399,29313:186,14529:4144,27459:4822,26115:4391,3534:5474,17792:3879,19136:3902,6214:4712,18304:3888,11972:48,10059:3839,1484:3758,29517:289,5507:5289,12038:5492,25031:3388,25033:3390,7488:799,14215:4655,14082:6439,27141:4137,1156:4520,25295:6,24704:3325,12236:4201,3463:948,24898:3357,3399:4773,29519:291,12629:3593,12036:5496,11974:50,14146:4789,24640:5560,24896:3355,28928:6014,24962:3367,26883:5539,3072:4718,12627:3591,12437:341,16131:6053,13824:624,12109:930,24839:3345,12494:4354,1742:4126,18368:3889,10057:3837,12506:4350,4120:6500,12435:339,29120:897,10251:5834,24841:3351,3264:4040,7296:4739,3266:4042,5964:6215,14279:4580,4118:6498,27205:3743,18048:3883,25359:314,27203:3741,8006:3844,11782:358,25551:5691,10249:5832,9539:6190,24777:3341,5763:5224,27020:3816,7232:4738,26756:165,27397:5213,16268:4185,29327:191,12572:24,14402:4604,24960:3365,5827:4623,13961:5574,11718:5735,24910:3360,9608:5243,25154:4452,12373:5718,28999:5601,27084:3829,12556:24,10114:6542,16579:5273,28672:3684,25482:4336,29505:277,11851:4383,5188:845,4042:5881,25615:115,12357:5718,26947:5993,29902:6450,10313:4537,2945:6072,9475:4221,1099:4644,8070:122,28805:4160,25097:3406,27461:4824,3520:5460,7552:902,1678:216,9416:4594,4106:6502,10372:4647,1863:5887,11659:5969,1797:3729,6349:836,4040:5879,26500:6139,25674:418,28743:4547,8129:3236,28741:4545,4930:5916,4932:5918,12615:3595,10436:80,1799:3724,8193:5517,26498:6137,6347:834,25738:3654,27915:5780,9610:5245,29761:4503,25480:4334,10370:4645,27917:5782,26306:5554,12421:341,29966:3283,13838:626,9674:3700,10178:5841,25416:3566,4104:6500,12613:3593,25537:5686,29569:6059,1861:5892,517:4080,11595:3799,14785:618,2760:3780,27780:4723,11917:3617,3278:4054,28549:121,12508:4352,8072:128,14338:6571,25601:101,11716:5733,3207:6075,9473:4219,27844:4761,10315:4536,27018:3814,12492:4352,16266:4183,10890:4216,1740:4130,13959:5572,8008:3850,4574:4268,14979:5410,11780:356,9537:6188,4227:5389,5003:5644,13318:4578,12558:26,27082:3827,4161:4477,14144:4787,10954:883,16581:5275,15043:433,12371:5716,1101:6445,1984:6066,3328:4711,14080:6437,9295:160,11853:4385,27139:4135,12736:4096,29325:196,25795:4431,1158:4522,6404:5418,18112:3884,19456:3907,8647:391,1676:214,28864:611,28807:4162,24775:3335,3522:5462,8898:969,4866:5456,14023:5338,6662:5296,28165:5612,23680:3863,8641:385,8905:976,10884:4210,6661:5295,26186:5755,4419:4551,10883:4209,67:5902,9167:6486,19328:3905,12864:5344,25923:63,4553:4279,25922:62,15235:935,26057:3629,4418:4550,8512:3975,8776:3277,2048:3722,28166:5613,15234:934,15241:941,23552:3861,11275:5866,4547:4273,8769:3272,12998:5362,10755:5267,6790:6225,26051:3623,2831:5957,19200:3903,25794:4430,12992:5356,6796:6231,15107:3295,68:5903,4290:6002,2446:5396,8911:967,26185:5754,8640:384,588:6397,2438:5402,8897:968,28294:424,15113:3301,2183:4806,26178:5747,4560:4254,23936:3867,6917:813,25930:70,9160:6486,14850:818,8385:6120,12871:5351,10891:4217,4426:4558,6276:6012,8783:3277,25801:4437,4561:4271,8256:3976,30023:4608,29760:4502,9025:890,9026:891,715:4497,28421:4449,30016:4608,2824:5950,4803:6184,581:6390,27781:4724,9289:154,18944:3899,25538:5687,11268:5859,28813:4168,26307:5555,11276:5867,6277:6008,12742:4100,4034:5873,13248:4103,10499:3639,15106:3294,2176:4806,8904:975,2439:5403,28550:116,15114:3302,14594:5583,709:4491,29896:6450,12878:5346,27653:5628,5194:851,5195:852,6020:5255,25410:3562,14593:5582,11525:5448,6149:6086,11396:3710,3906:4109,6021:5256,9282:147,27652:5627,25409:3561,12877:5345,3905:4108,5323:5487,9281:146,29768:4509,708:4490,29767:4508,26827:184,26826:183,7565:914,5322:5486,27525:4732,2823:5949,6156:6093,14465:4795,11524:5447,11397:3711,6148:6085,9154:6482,8391:6126,29903:6450,26691:5977,25282:2,580:6389,29895:6444,8399:6134,2432:5396,29889:6445,3778:6431,26699:5985,6027:5262,11403:3717,2944:6071,6918:814,29063:4626,9161:6487,26179:5748,11404:3718,19072:3901,6028:5263,24448:3876,12870:5350,25289:7,7744:4003,26819:176,5316:5480,12044:5502,13120:6179,2830:5956,12230:4195,12229:4194,29248:5600,29775:4515,29774:4515,15242:942,30017:4609,26820:177,2304:3856,716:4498,28422:4444,18432:3890,25160:4458,23808:3865,26058:3630,16132:6054,6789:6224,5315:5479,4546:4256,9930:5374,12999:5363,4425:4557,26050:3622,4554:4264,27524:4731,9987:5381,25929:69,9153:6481,25281:1,29062:4626,8384:6119,7566:915,6797:6232,25103:3412,13760:5430,587:6396,26698:5984,8392:6127,7558:908,29888:6444,3777:6430,28293:429,2182:4806,3265:4041,25032:3389,8014:3850,29319:185,12500:4344,12037:5497,24833:3346,10058:3838,16260:4177,1485:3759,14081:6438,27012:3808,12237:4202,24968:3373,12564:16,11973:49,9858:4238,24897:3356,29518:290,10122:6548,7687:3996,12635:3599,14145:4788,27076:3824,3393:4767,4126:6506,12372:5701,24904:3360,11909:3609,10186:5849,12571:39,1157:4521,27140:4136,24705:3326,3535:5475,5444:4022,25096:3405,13953:5566,9666:3692,12101:924,3201:6076,1677:215,26948:5994,25025:3382,12429:349,3272:4048,14273:4581,27332:5220,18560:3892,27019:3815,11980:56,29525:297,9474:4220,29312:185,8071:122,14337:6570,13960:5573,5187:844,12358:5703,12443:347,25089:3398,9673:3699,16267:4184,29575:6065,12621:3601,27396:5212,2880:807,25153:4451,10378:4649,13632:4661,28934:6014,14401:4603,24975:3380,11717:5734,24384:3875,9609:5244,10115:6543,16580:5274,28870:611,2816:5942,29967:3283,12628:3576,1670:208,12365:5726,24911:3360,24320:3874,11653:5963,5892:861,10179:5842,8463:6118,25417:3567,7872:5452,26955:5998,8078:128,9410:4588,11916:3616,18624:3893,8135:3242,1164:4528,29376:4651,3528:5468,12422:326,4119:6515,14017:5339,12507:4367,24769:3336,25609:109,2688:4253,13967:5580,8064:122,4568:4262,28742:4546,1798:3724,26499:6138,11724:5741,18816:3896,6348:835,4041:5880,24192:3872,9417:4595,29568:6058,1862:5887,4931:5917,10307:4532,12614:3578,25545:5692,2624:4118,8000:3844,28678:3684,13376:3987,1734:4120,18752:3895,11788:364,24128:3871,6412:5426,12550:18,29504:276,4995:5636,25481:4335,10371:4645,2560:5413,27916:5781,7936:4624,11852:4384,13312:3997,28614:3674,18688:3894,1100:6444,24064:3870,10435:79,12486:4346,9545:6196,28806:4161,2752:3772,25673:417,8128:3235,18880:3897,11660:5970,7302:4745,24256:3873,15619:271,25602:102,29632:4482,24847:3350,4867:5457,4112:6492,10243:5826,12557:41,3521:5461,24776:3340,10314:4536,27909:5774,388:5528,8007:3844,16516:3664,25666:410,4938:5922,11781:357,29326:191,27268:141,6405:5419,1741:4131,29511:283,4162:4478,27083:3828,9538:6189,14914:4151,4575:4285,14978:5409,25730:3646,12379:5724,10955:884,1805:3735,4226:5388,13319:4578,9602:5237,24961:3366,14209:4656,12493:4369,3457:949,27973:5806,24783:3340,28621:3681,10250:5833,24840:3350,324:4816,12436:324,4105:6517,11845:4377,16452:5282,9481:4227,3279:4055,1093:4638,27204:3742,11213:3771,15171:3311,28363:4423,4353:6242,26120:4396,28232:400,28494:98,6727:4670,15040:430,8708:4408,395:5533,15302:6173,526:4089,28097:5432,6862:4038,2241:6553,17152:3887,6858:4034,28101:5436,10951:880,4484:5930,10947:876,13059:3250,13063:3247,19264:3904,25989:373,4488:5934,25985:369,28367:4427,6592:4662,26116:4392,4357:6246,25993:377,26124:4400,21376:3940,15044:434,28490:94,2114:4802,15429:5812,28359:4419,8581:5766,8577:5762,15433:5816,10816:5563,27970:5803,15437:5820,25600:100,6723:4666,15179:3319,27712:3978,12936:3265,387:5527,10693:4292,1856:5887,8450:6105,29955:3286,4099:6511,653:4072,28486:90,28355:4415,15425:5808,26509:6136,13317:4002,4480:5926,10697:4296,6342:829,26243:901,13313:3998,4492:5938,6338:825,15175:3315,25473:4329,15183:3323,8192:5516,391:5524,1860:5891,27716:3982,12940:3269,29959:3290,10689:4288,2245:6557,399:5530,2253:6565,9220:5591,2249:6561,9228:5597,6981:5911,14786:619,6977:5907,14790:617,24000:3868,4103:6515,9224:5593,25870:5799,25866:5795,25858:5787,12932:3263,25862:5791,12928:3259,4238:5386,5953:6204,14528:4143,25477:4333,8327:4004,14659:3557,25346:310,8196:5520,10439:83,26894:5550,3841:4011,28609:3669,26763:170,8458:6113,16771:6035,25743:3659,645:4064,12547:31,28740:4544,3972:4618,1729:4121,26497:6136,6350:837,17664:3858,10701:4300,27589:5620,5000:5641,11459:5442,16076:4784,9613:5248,9486:4232,27847:4764,11721:5738,9478:4224,5826:4622,7104:6401,13071:3253,26505:6144,21888:3949,10304:4532,27021:3817,9089:5228,29701:870,27458:4821,25088:3397,10312:4536,8069:127,24778:3342,25604:104,11332:6239,25612:112,6215:4712,4869:5459,1987:6069,26755:164,12376:5705,256:966,4230:5392,28998:5601,11979:55,2118:4800,24909:3360,28867:614,10181:5844,2368:6568,29824:4303,7493:804,13825:625,16513:3661,14917:4154,16068:4778,6854:4030,12805:961,4992:5633,10959:888,7680:3989,25735:3651,11209:3767,11201:3761,19776:3913,28228:396,2757:3777,1737:4127,9347:6100,28236:404,15298:6175,522:4085,13833:633,4611:6527,14278:4580,12432:320,28617:3677,11598:3802,514:4077,12416:320,24512:3877,2765:3785,25354:316,11590:3794,27200:3738,12424:328,4619:6535,9927:5371,16259:4176,24834:3347,12499:4359,5441:4019,25163:4461,13952:5565,29320:191,1153:4517,18240:3886,9859:4239,9863:4236,27009:3805,12567:35,12035:5495,10189:5852,12563:31,24969:3374,24901:3355,3396:4770,29514:286,8013:3855,27073:3821,14151:4787,7684:3993,11844:4376,18176:3885,27077:3820,1217:5684,16453:5283,28994:5603,9923:5367,9601:5236,9792:5377,8077:133,3460:952,1487:3754,29316:189,7616:3988,12364:5709,24576:3878,14087:6437,24707:3328,27013:3809,25167:4465,14210:4657,24770:3337,22400:3958,3531:5471,25092:3401,26950:5990,14016:5338,9986:5380,1090:4635,1094:4639,3527:5467,16449:5279,5318:5482,7561:910,25024:3381,29526:298,9605:5240,29772:4513,11848:4380,26886:5542,768:5510,10050:3832,3456:948,4047:5886,7362:4751,25421:3571,27267:140,29574:6064,28736:4540,7168:4737,29510:282,1475:3751,27335:5223,25485:4339,27331:5219,1804:3734,24643:5560,5957:6208,12487:4363,25028:3385,3269:4045,24846:3350,6155:6092,12503:4363,4127:6523,28935:6014,13964:5577,26890:5546,10062:3836,8001:3845,27271:144,29530:302,11912:3612,11908:3608,12106:927,9669:3695,9665:3691,12102:919,4111:6523,832:4142,26692:5978,10244:5827,8394:6129,26696:5982,8398:6133,4115:6511,3273:4049,15616:268,5961:6212,12483:4359,29633:4483,9482:4228,11725:5742,4567:4277,2753:3773,16640:6041,29697:866,10308:4534,15552:4818,25544:5691,12551:35,9546:6197,26831:174,1733:4125,11789:365,6413:5427,28677:3689,2817:5943,4996:5637,713:4495,20864:3932,16834:6022,12380:5709,14532:4147,5199:856,1669:207,9288:153,28871:611,4802:6183,25802:4438,8462:6117,649:4068,16898:6034,8136:3243,10502:3642,11269:5860,5893:862,24782:3340,25286:0,1165:4529,26954:5997,11328:6235,8065:123,29891:6447,11205:3765,25608:108,26112:4388,28800:4155,14849:817,12622:3586,24711:3325,27974:5801,6274:6010,11650:5960,4428:4560,13829:629,14468:4798,16517:3665,16072:4780,10185:5848,14913:4150,12225:4190,13067:3256,10379:4649,12047:5498,15246:946,3392:4766,6080:4251,8768:3271,28419:4447,12638:3586,25731:3647,10121:6547,4234:5386,9165:6491,8323:4007,24905:3361,11983:59,6016:5251,28613:3673,8704:4404,11392:3706,26767:168,25925:65,20800:3930,23488:3860,7303:4746,26176:5745,4615:6531,12444:332,29058:4628,25350:308,12428:332,14274:4582,11586:3790,66:5901,6794:6229,4551:4277,2177:4807,17216:3898,4420:4552,26187:5756,6663:5297,65:5900,26053:3625,4552:4262,25921:61,6660:5294,26052:3624,11277:5868,26056:3628,4417:4549,14976:5407,28164:5611,8771:3274,8775:3271,15239:939,2181:4811,70:5905,6798:6233,4416:4548,2444:5396,14977:5408,4424:4556,12868:5348,26049:3621,4555:4281,15111:3299,12996:5360,27776:4719,10753:5268,323:4815,1920:6402,28292:428,26191:5760,2440:5404,8899:970,586:6395,8903:974,590:6399,23424:3859,25667:411,6406:5420,2828:5954,27910:5775,8386:6121,4544:4254,9423:4601,25668:412,4940:5924,6787:6222,6144:6081,12872:5352,12737:4095,10892:4206,26048:3620,15243:943,11273:5864,15247:947,27648:5623,9030:895,27911:5776,26060:3632,1792:3724,27907:5772,30019:4611,4163:4479,14980:5411,3904:4107,15620:272,6410:5424,17600:3964,25672:416,25664:408,4548:4258,4556:4266,6147:6084,4933:5919,6528:4115,9422:4600,9418:4596,28291:427,4937:5921,14592:5581,4289:6001,11661:5971,2447:5396,6791:6226,6799:6234,8390:6125,6795:6230,26700:5986,589:6398,585:6394,28295:424,9152:6480,9284:149,27522:4729,3908:4111,1665:203,578:6387,12352:5697,25807:4443,25806:4442,17728:3869,14595:5584,11527:5450,11395:3709,11526:5449,6151:6088,14464:4794,19840:3914,12876:5344,2821:5947,23040:3969,5325:5489,9283:148,1800:3730,29765:4507,27914:5779,16835:6020,28673:3685,28804:4159,12619:3599,25679:423,28812:4167,11654:5964,8002:3846,26561:840,4563:4273,11662:5972,9411:4589,4167:4476,12480:4340,27395:5211,4043:5882,4936:5920,9419:4597,6278:6008,12741:4101,12488:4348,25671:415,10498:3638,19712:3912,15119:3307,24845:3350,11915:3615,1098:4643,4035:5874,10245:5828,28545:117,5186:843,717:4499,13250:4105,9291:156,13249:4104,2829:5955,25799:4435,9672:3698,12869:5349,12360:5705,4805:6186,25418:3568,30018:4610,10383:6448,12626:3574,24973:3378,12043:5501,28423:4444,10117:6545,4036:5875,27394:5210,26949:5990,17088:3857,22464:3959,26957:5995,25152:4450,10376:4649,5445:4023,8133:3240,1793:3725,25540:5689,69:5904,5890:859,16262:4179,6659:5293,6279:6008,12570:22,24706:3327,9550:6201,26188:5757,26180:5749,28811:4166,27783:4726,7040:4736,3202:6077,9728:5451,8910:967,15104:3292,16707:6023,14019:5341,8902:973,15112:3300,11840:4372,12566:18,12103:919,9664:3690,1483:3757,20416:3924,27010:3806,11907:3607,14083:6440,14214:4655,25294:6,11776:352,24902:3355,1486:3754,22528:3960,16258:4175,12039:5492,20352:3923,11971:47,12630:3578,9860:4240,12634:3582,14150:4787,9864:4242,14147:4790,5314:5478,9931:5375,11968:44,9668:3694,25159:4457,11911:3611,10188:5851,12107:928,25422:3566,29324:195,25290:8,24774:3335,27017:3813,3523:5463,12431:351,6029:5264,29057:4627,10316:4538,29061:4631,20224:3921,3270:4046,26946:5992,7553:903,12427:347,7557:907,12046:5498,27085:3825,25287:0,16069:4779,24842:3352,29773:4514,5317:5481,8005:3849,10184:5847,13826:626,12491:4367,12555:39,12559:43,9871:4242,10049:3831,5762:5226,24906:3362,1479:3748,5321:5485,26818:175,8009:3851,12377:5722,29506:278,16073:4781,9867:4245,1216:5683,5965:6216,24838:3345,27526:4733,27081:3826,3459:951,12495:4371,29769:4510,10252:5835,25283:3,20288:3922,22976:3968,29570:6060,26882:5538,14211:4658,11523:5446,12110:925,9216:5587,25611:111,11904:3604,9479:4225,14535:4143,16454:5284,4107:6519,7564:913,14531:4146,7560:909,16450:5280,10248:5831,3277:4053,25675:419,2754:3774,28676:3688,4865:5455,1732:4124,11658:5968,6414:5428,9415:4593,28808:4163,12484:4344,3975:4614,4929:5915,8461:6116,29534:306,13965:5578,25739:3655,1796:3728,26501:6140,6346:833,11722:5739,9351:6097,9287:152,12381:5726,4997:5638,27918:5783,9280:145,29958:3289,27715:3981,13830:630,2825:5951,12356:5701,8454:6109,1408:4484,27462:4825,15115:3303,1102:6446,14599:5581,8322:4006,22912:3967,4039:5878,28288:424,582:6391,6211:4715,10241:5824,4114:6494,6720:4663,11587:3791,1344:4485,26953:5996,12623:3603,4032:5871,27398:5214,9935:5367,24710:3325,10380:6448,25155:4453,5004:5645,4559:4285,27843:4760,22848:3966,28815:4170,25536:5685,8073:129,28224:392,5894:863,26127:4403,3206:6075,6275:6011,1280:4114,3968:4614,6656:5290,30022:4608,9344:6097,27334:5222,29527:299,25472:4328,28160:5607,11206:3760,10113:6541,12801:957,25803:4439,28491:95,14663:3554,1166:4530,11975:51,7489:800,12865:5345,10177:5840,4623:6539,13837:625,2113:4801,4356:6245,4801:6182,518:4081,27779:4722,11594:3798,25091:3400,26184:5753,15108:3296,2761:3781,8906:977,8137:3244,12420:324,25358:314,8707:4407,4485:5931,13060:3251,10950:879,28495:99,21504:3943,28098:5433,2242:6554,28362:4422,2244:6556,527:4090,15301:6178,15303:6173,28233:401,13058:3249,25990:374,10688:4287,4487:5933,25728:3644,11214:3766,10952:881,392:5530,28227:395,6863:4039,28096:5431,15174:3314,15168:3308,6857:4033,8709:4409,398:5530,17024:623,4096:6492,2764:3784,28225:393,4614:6530,9229:5598,4622:6538,25861:5790,25863:5792,4620:6536,12931:3262,6464:4252,13316:4001,14916:4153,2762:3782,8451:6106,28239:407,28618:3678,27975:5801,9094:5233,12937:3266,21248:3938,6851:4027,9227:5596,5005:5646,25996:380,10694:4293,4229:5391,1986:6068,521:4084,28489:93,386:5526,27842:4759,390:5524,10944:873,13066:3255,12802:958,6337:824,25732:3648,25984:368,11208:3766,128:4140,2115:4803,26125:4401,4358:6241,27971:5804,14912:4149,15438:5821,8580:5765,28360:4420,654:4073,28481:85,15430:5813,26510:6137,25607:107,17280:3909,15045:435,6722:4665,9483:4229,26117:4393,6208:4712,12417:337,20992:3934,11329:6236,29962:3283,27719:3985,14660:3558,642:4061,13834:634,3973:4619,28610:3670,29700:869,16770:6037,9348:6101,26893:5549,11726:5743,1730:4122,26502:6141,6351:838,8197:5521,25742:3658,12383:5728,11200:3760,4237:5386,12546:14,25476:4332,4999:5640,4993:5634,9614:5249,16077:4785,27328:5216,12552:20,13963:5576,4102:6498,4110:6506,29571:6061,1736:4126,6345:832,384:5524,1859:5890,28737:4541,28739:4543,16512:3660,16641:6042,4100:6496,15680:6013,2756:3776,29573:6063,4108:6504,14789:622,28616:3676,513:4076,11599:3803,1857:5888,5954:6205,11591:3795,3276:4052,12425:345,3274:4050,15047:430,24908:3364,7363:4752,9606:5241,1162:4526,12375:5720,11849:4381,21760:3947,10182:5845,10432:76,11978:54,13314:3999,4231:5393,5007:5648,29523:295,11202:3762,12554:22,6343:830,25484:4338,10958:887,25734:3650,27330:5218,12804:960,8076:132,25605:105,8068:126,26504:6143,25613:113,10319:4538,26496:6135,27840:4757,11720:5737,12562:14,5825:4621,9477:4223,27022:3818,14918:4149,10311:4534,27014:3810,28868:615,3461:953,4352:6241,5696:4117,15436:5819,24779:3343,27969:5802,24771:3338,9485:4231,11841:4373,20480:3925,4870:5454,24900:3359,3397:4771,26945:5991,12631:3595,4122:6502,12433:337,10190:5853,11905:3605,12369:5714,27143:4139,12234:4199,1154:4518,1482:3756,24964:3369,12040:5498,10126:6546,27080:3825,5505:5287,960:4286,14148:4791,12633:3597,11712:5729,14342:6569,11976:52,8010:3852,3203:6078,13955:5568,12042:5500,12099:922,12496:4340,10253:5836,29521:293,5446:4018,25035:3392,25037:3394,896:4119,24837:3345,7490:801,10055:3830,10053:3835,7492:803,26881:5537,3205:6080,14340:6573,12097:920,16129:6051,12439:343,4124:6504,5966:6217,27207:3745,25355:317,25357:319,27201:3739,22336:3957,1674:212,28866:613,9920:5364,20672:3928,11520:5443,12490:4350,13957:5570,12111:925,22272:3956,14406:4602,11714:5731,28930:6016,1738:4128,12560:12,25158:4456,9856:4236,26822:179,9868:4246,16583:5277,1480:3754,4572:4266,9989:5383,11778:354,12232:4197,16065:4775,27016:3812,5313:5477,9932:5364,27137:4133,16264:4181,25291:9,29323:194,8074:130,14596:5585,26959:5995,3844:4014,29898:6452,1160:4524,5192:849,8131:3238,11657:5967,1103:6447,10317:4539,12353:5714,9414:4592,25101:3410,24773:3335,4864:5454,3524:5464,7556:906,14021:5343,10438:82,26895:5551,11593:3797,8195:5519,9350:6097,28809:4164,5888:857,13836:624,11264:5855,11855:4387,29829:4308,10176:5839,22016:3951,29535:307,20928:3933,26304:5552,27586:5617,14662:3554,706:4488,25740:3656,25478:4328,5327:5491,10112:6540,29763:4505,11458:5441,9612:5247,16079:4780,6023:5258,26240:898,27584:5615,8389:6124,9156:6484,6913:809,25934:74,26758:161,25414:3560,15182:3322,1539:5515,6146:6083,1537:5513,11522:5445,11399:3713,26760:167,9676:3702,12419:339,6025:5260,9158:6480,11401:3715,29964:3283,12939:3268,8387:6122,25932:72,4608:6524,5952:6203,11919:3619,3782:6435,26701:5987,26703:5989,16704:6023,3780:6433,20736:3929,22080:3952,28547:119,12510:4354,519:4082,28289:425,14404:4606,27778:4721,25156:4454,27399:5215,9934:5366,15180:3320,4558:4268,12574:26,2826:5952,10696:4295,9092:5231,8453:6108,6849:4025,6915:811,12873:5353,25998:382,704:4486,9870:4242,30021:4613,11456:5439,26824:181,12355:5716,5190:847,3846:4016,2947:6074,29900:6454,14598:5581,640:4059,4672:5453,28483:87,15424:5807,16768:6035,25293:11,29827:4306,27520:4727,16962:6040,583:6392,15116:3304,26119:4395,27463:4826,2178:4808,25099:3408,7554:904,6210:4714,11335:6235,9991:5385,11279:5870,26054:3626,10752:5267,12995:5359,4550:4260,4422:4554,10881:4207,4421:4553,21440:3941,28162:5609,8773:3276,8772:3275,15238:938,11407:3721,15109:3297,6658:5292,10887:4213,9164:6490,27905:5770,4942:5920,26183:5752,193:3747,25926:66,4557:4283,6401:5415,12866:5346,64:5899,8907:978,2179:4809,2442:5406,4294:6006,327:4812,21568:3944,8644:388,28290:426,26189:5758,8901:972,2436:5400,10496:3636,6786:6221,14981:5412,9292:157,30020:4612,27777:4720,321:4813,11272:5863,2827:5953,13251:4106,9293:158,12738:4094,6273:6009,4807:6181,25798:4434,25797:4433,192:3746,719:4501,8779:3280,26061:3633,26311:5559,21696:3946,9029:894,8645:389,28161:5608,26182:5751,10888:4214,26190:5759,10880:4206,8908:979,4564:4258,27906:5771,6657:5291,71:5899,12867:5347,6402:5416,4038:5877,4941:5925,21312:3939,2443:5396,4293:6005,10503:3643,15110:3298,8900:971,10240:5823,28546:118,2435:5399,2820:5946,6415:5429,577:6386,12482:4342,25542:5685,25676:420,9548:6199,9549:6200,12617:3597,28674:3686,10374:4647,448:218,1795:3727,28675:3687,4571:4281,10375:4647,16576:5270,11791:367,1801:3731,21952:3950,27919:5784,12611:3591,14854:816,5760:5224,1794:3726,11136:4793,9421:4599,27393:5209,4045:5884,4928:5914,16271:4188,28802:4157,10895:4209,27264:137,4934:5914,25677:421,12447:351,5889:858,25541:5690,21056:3935,11265:5856,11656:5966,28810:4165,9413:4591,8132:3239,4037:5876,7298:4741,26958:5995,1673:211,15623:275,10247:5830,1097:4642,5632:5675,24843:3353,11008:4205,26310:5558,27136:4132,12739:4093,5056:4248,27265:138,4806:6181,9542:6193,27087:3825,8004:3848,25669:413,9541:6192,11785:361,25549:5696,29507:279,21184:3937,6409:5423,6408:5422,26560:839,11784:360,5761:5225,4165:4481,27086:3825,4166:4476,29508:280,8780:3281,14982:5407,27912:5777,27913:5778,1802:3732,10368:4645,9420:4598,15744:4116,4044:5883,16577:5271,449:219,11663:5973,14853:821,12618:3582,12610:3574,25548:5695,8003:3847,16270:4187,4935:5914,10894:4208,25670:414,12489:4365,24836:3349,15622:274,12440:328,7299:4742,320:4812,24844:3354,12497:4357,10254:5837,28803:4158,16448:5278,21824:3948,10246:5829,1089:4634,10125:6551,5376:4327,25164:4462,12368:5697,4123:6519,16128:6050,9926:5370,24965:3370,26880:5536,12105:926,14213:4660,14084:6441,29515:287,5312:5476,11970:46,16064:4774,8011:3853,26816:173,9862:4236,12041:5499,12632:3580,27079:3820,7683:3992,5248:963,16263:4180,6031:5266,24772:3339,12504:4348,10318:4538,16000:4735,29059:4629,12034:5494,12561:29,11777:353,26752:161,8075:131,1481:3755,12233:4198,27015:3811,29322:193,25292:10,10061:3841,25100:3409,29379:4654,5440:4018,1161:4525,16192:4171,25029:3386,11913:3613,9990:5384,26944:5990,14277:4585,3268:4044,7555:905,4116:6496,14020:5342,3525:5465,5120:5632,26887:5543,6159:6096,15872:4249,16135:6050,26624:197,9670:3696,25420:3570,12361:5722,12575:43,11649:5959,24972:3377,9933:5365,5568:4755,10382:6448,28995:5604,25157:4455,12625:3589,16320:5504,28931:6017,14405:4607,27072:3820,10118:6540,11713:5730,29315:188,5504:5286,25036:3393,25093:3402,16256:4173,29522:294,11977:53,3204:6079,27008:3804,14341:6574,12568:20,7491:802,24708:3329,13956:5569,10054:3830,9677:3703,5184:841,15936:4250,12098:921,5447:4018,26688:5974,27457:4820,3532:5472,12418:322,8139:3246,16705:6024,12511:4371,25356:318,26951:5990,13835:635,10702:4301,5326:5490,1666:204,29963:3283,27521:4728,6152:6089,16769:6036,8459:6114,641:4060,25805:4441,25413:3565,6017:5252,11393:3707,14661:3559,9285:150,27585:5616,26830:173,3909:4112,11457:5440,16833:6021,712:4494,29764:4506,16078:4780,705:4487,15117:3305,25349:313,8324:4008,12874:5354,14597:5586,25869:5798,9221:5592,3845:4015,5191:848,29529:301,28482:86,26766:167,29828:4307,29956:3287,26695:5981,29899:6453,27713:3979,12354:5699,6978:5908,16961:6039,8395:6130,6209:4713,584:6393,11585:3789,5960:6211,15245:945,9869:4247,25997:381,14469:4799,13828:628,5319:5483,9093:5232,8452:6107,2250:6562,28354:4414,4429:4561,26823:180,29771:4512,1474:3750,6850:4026,16071:4774,12226:4191,10695:4294,4493:5939,12639:3603,28418:4446,26759:162,1538:5514,6914:810,5198:855,11400:3714,27649:5624,11521:5444,648:4067,6024:5259,16897:6033,769:5511,5967:6218,6145:6082,15181:3321,12938:3267,25285:5,8388:6123,25933:73,6793:6228,14533:4148,7562:911,9157:6485,29892:6448,3781:6434,591:6400,26702:5988" . split (",") . map (| x | { let mut i = x . split (":") ; (i . next () . unwrap () . parse () . unwrap () , i . next () . unwrap () . parse () . unwrap ()) }) . collect () ;
                        Self {
                            _runtime_id_to_legacy: legacy_to_runtime_id
                                .iter()
                                .map(|(x, y)| (*y, *x))
                                .collect(),
                            legacy_to_runtime_id,
                        }
                    }
                }
            }
            pub use block_palette::*;
            mod biome_map {
                use packet_derive::MCPEPacketDataAuto;
                pub struct BiomeIdArray {
                    biomes: [u8; 256],
                }
                impl crate::traits::MCPEPacketData for BiomeIdArray {
                    fn decode(
                        reader: &mut impl crate::traits::Reader,
                    ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                        use crate::traits::PacketReader;
                        Ok(Self {
                            biomes: reader.auto_decode().map_err(|x| x.map("biomes"))?,
                        })
                    }
                    fn encode(
                        &self,
                        writer: &mut impl crate::traits::Writer,
                    ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                        self.biomes.encode(writer).map_err(|x| x.map("biomes"))?;
                        Ok(())
                    }
                }
                #[automatically_derived]
                #[allow(unused_qualifications)]
                impl ::core::fmt::Debug for BiomeIdArray {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                        match *self {
                            BiomeIdArray {
                                biomes: ref __self_0_0,
                            } => {
                                let mut debug_trait_builder = f.debug_struct("BiomeIdArray");
                                let _ = debug_trait_builder.field("biomes", &&(*__self_0_0));
                                debug_trait_builder.finish()
                            }
                        }
                    }
                }
                impl Default for BiomeIdArray {
                    fn default() -> Self {
                        {
                            ::std::io::_print(::core::fmt::Arguments::new_v1(
                                &["A3\n"],
                                &match () {
                                    () => [],
                                },
                            ));
                        };
                        Self { biomes: [0; 256] }
                    }
                }
                impl BiomeIdArray {
                    pub fn set_biome(&mut self, x: u8, z: u8, biome_id: u8) {
                        self.biomes[(x << 4 | z) as usize] = biome_id;
                    }
                    pub fn get_biome(&mut self, x: u8, z: u8) -> u8 {
                        self.biomes[(x << 4 | z) as usize]
                    }
                }
            }
            pub use biome_map::*;
        }
        pub use world::*;
        mod update_block {
            use packet_derive::{packet, MCPEPacketDataAuto};
            use crate::prelude::{BlockVec3, VarInt, GLOBAL_BLOCK_PALETTE};
            pub struct UpdateBlock {
                block_coord: BlockVec3,
                block_runtime_id: VarInt,
                flags: VarInt,
                data_layer: VarInt,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for UpdateBlock {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        UpdateBlock {
                            block_coord: ref __self_0_0,
                            block_runtime_id: ref __self_0_1,
                            flags: ref __self_0_2,
                            data_layer: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("UpdateBlock");
                            let _ = debug_trait_builder.field("block_coord", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("block_runtime_id", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("flags", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("data_layer", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            impl crate::traits::MCPEPacketData for UpdateBlock {
                fn decode(
                    reader: &mut impl crate::traits::Reader,
                ) -> Result<Self, crate::prelude::MCPEPacketDataError> {
                    use crate::traits::PacketReader;
                    Ok(Self {
                        block_coord: reader.auto_decode().map_err(|x| x.map("block_coord"))?,
                        block_runtime_id: reader
                            .auto_decode()
                            .map_err(|x| x.map("block_runtime_id"))?,
                        flags: reader.auto_decode().map_err(|x| x.map("flags"))?,
                        data_layer: reader.auto_decode().map_err(|x| x.map("data_layer"))?,
                    })
                }
                fn encode(
                    &self,
                    writer: &mut impl crate::traits::Writer,
                ) -> Result<(), crate::prelude::MCPEPacketDataError> {
                    self.block_coord
                        .encode(writer)
                        .map_err(|x| x.map("block_coord"))?;
                    self.block_runtime_id
                        .encode(writer)
                        .map_err(|x| x.map("block_runtime_id"))?;
                    self.flags.encode(writer).map_err(|x| x.map("flags"))?;
                    self.data_layer
                        .encode(writer)
                        .map_err(|x| x.map("data_layer"))?;
                    Ok(())
                }
            }
            impl crate::traits::MCPEPacket for UpdateBlock {
                const PACKET_ID: u8 = 21u8;
            }
            impl UpdateBlock {
                pub fn new(x: i32, y: u32, z: i32) -> Self {
                    Self {
                        block_coord: (x, y, z).into(),
                        block_runtime_id: VarInt(
                            GLOBAL_BLOCK_PALETTE.get_or_create_runtime_id(1, 0),
                        ),
                        flags: VarInt(0),
                        data_layer: VarInt(0),
                    }
                }
            }
        }
        pub use update_block::*;
    }
    pub use client::*;
    pub use common::*;
    pub use server::*;
}
pub mod traits {
    use std::convert::TryInto;
    use crate::prelude::MCPEPacketDataError;
    pub trait MCPEPacketData: Sized {
        fn decode(reader: &mut impl Reader) -> Result<Self, MCPEPacketDataError>;
        fn encode(&self, writer: &mut impl Writer) -> Result<(), MCPEPacketDataError>;
    }
    pub trait MCPEPacket: MCPEPacketData + Sized {
        const PACKET_ID: u8;
    }
    pub trait Reader {
        fn skip(&mut self, n: usize);
        fn next(&mut self) -> Result<u8, MCPEPacketDataError>;
        fn next_array<const N: usize>(&mut self) -> Result<[u8; N], MCPEPacketDataError>;
        fn read_to_end(&mut self) -> Vec<u8>;
        fn read(&mut self, length: usize) -> Result<Vec<u8>, MCPEPacketDataError>;
    }
    pub trait Writer {
        fn write(&mut self, data: u8) -> Result<(), MCPEPacketDataError>;
        fn write_slice(&mut self, slice: &[u8]) -> Result<(), MCPEPacketDataError>;
    }
    impl<'a, T: Iterator<Item = &'a u8>> Reader for T {
        fn next(&mut self) -> Result<u8, MCPEPacketDataError> {
            self.next()
                .copied()
                .ok_or_else(|| MCPEPacketDataError::new("$iterator_next", "Can't take next value"))
        }
        fn next_array<const N: usize>(&mut self) -> Result<[u8; N], MCPEPacketDataError> {
            self.take(N)
                .copied()
                .collect::<Vec<u8>>()
                .try_into()
                .ok()
                .ok_or_else(|| {
                    MCPEPacketDataError::new("$iterator_next_array", "Can't take next array")
                })
        }
        fn read(&mut self, length: usize) -> Result<Vec<u8>, MCPEPacketDataError> {
            let i: Vec<u8> = self.take(length).copied().collect();
            if i.len() != length {
                Err(MCPEPacketDataError::new(
                    "$iterator_read",
                    "Can't read value (Invalid length)",
                ))
            } else {
                Ok(i)
            }
        }
        fn read_to_end(&mut self) -> Vec<u8> {
            self.copied().collect()
        }
        fn skip(&mut self, n: usize) {
            self.take(n).for_each(drop);
        }
    }
    impl Writer for Vec<u8> {
        fn write(&mut self, data: u8) -> Result<(), MCPEPacketDataError> {
            self.push(data);
            Ok(())
        }
        fn write_slice(&mut self, slice: &[u8]) -> Result<(), MCPEPacketDataError> {
            self.extend_from_slice(slice);
            Ok(())
        }
    }
    pub trait PacketReader<T> {
        fn auto_decode(&mut self) -> Result<T, MCPEPacketDataError>;
    }
    impl<T: MCPEPacketData, E: Reader> PacketReader<T> for E {
        fn auto_decode(&mut self) -> Result<T, MCPEPacketDataError> {
            T::decode(self)
        }
    }
}
pub mod prelude {
    pub use crate::errors::*;
    pub use crate::objects::*;
    pub use crate::packets::*;
    pub use crate::traits::*;
}
pub const PROTOCOL_VERSION: i32 = 428;
pub const GAME_VERSION: &'static str = "1.16.210";
